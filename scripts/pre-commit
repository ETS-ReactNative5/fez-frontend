#!/bin/bash

echo "Pre-commit hook running..."

# Commits should be made directly on Staging branch.
# (Do work in feature branch and then merge into Staging branch)

FORBIDDEN_BRANCH="staging"
THIS_BRANCH=$(git rev-parse --abbrev-ref HEAD)

if [[ "$THIS_BRANCH" == "$FORBIDDEN_BRANCH" ]] ; then
  if [ ! -e ".git/MERGE_MODE" ]; then
    echo "You are trying to commit directly on the $FORBIDDEN_BRANCH branch."
    echo "Please commit in a feature branch and then merge into $FORBIDDEN_BRANCH branch instead."
    echo "Aborting commit."
    exit 1
  fi
fi

# Run eslint on staged files

STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep ".jsx\{0,1\}$")
ESLINT="$(git rev-parse --show-toplevel)/node_modules/.bin/eslint"

if [[ "$STAGED_FILES" = "" ]]; then
  exit 0
fi

PASS=true

# Enable nvm if available
if [ -f ~/.nvm/nvm.sh ]; then
  source ~/.nvm/nvm.sh
fi

printf "\n\e[32mRunning ESLint...\e[0m\n\n"

# Check for eslint
if [[ ! -x "$ESLINT" ]]; then
  echo "Please install ESlint (npm i --save-dev eslint)"
  exit 1
fi

for FILE in $STAGED_FILES
do
  "$ESLINT" --config "$(git rev-parse --show-toplevel)/.eslintrc" "$FILE" --quiet

  if [[ "$?" == 0 ]]; then
    printf "\e[92mESLint Passed: $FILE\e[0m\n"
  else
    printf "\e[31mESLint Failed: $FILE\e[0m\n"
    PASS=false
  fi
done

printf "\nESLint validation complete.\n"

if ! $PASS; then
  printf "\n\e[31m\e[1mCOMMIT FAILED.\e[0m \e[31mYour commit contains files that should pass ESLint but do not.\e[0m"
  printf "\n\e[31mPlease fix the ESLint errors and try again.\e[0m\n"
  exit 1
fi

# printf "\n\e[32mRunning Jest...\e[0m\n"

# npm test -- --ci --findRelatedTests $STAGED_FILES

# if [[ "$?" != 0 ]]; then
#   printf "\e[31mEither Jest tests failed, or code coverage is not complete. Please fix and try again.\e[0m\n"
#   exit 2
# else

printf "\n\e[92mNo issues found. Proceeding with commit...\e[0m\n\n"

# fi