// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AutoCompleteAsyncField component should call filter function on itemsList 1`] = `
<div
  className="root"
>
  <label
    hidden={true}
    id="Test-label"
  >
    Test
  </label>
  <Downshift
    aria-label="Test"
    defaultHighlightedIndex={null}
    defaultInputValue="test 1"
    defaultIsOpen={false}
    defaultSelectedItem={null}
    environment={[Window]}
    getA11yStatusMessage={[Function]}
    id="Test"
    itemToString={[MockFunction]}
    onChange={[MockFunction]}
    onInputValueChange={[Function]}
    onOuterClick={[Function]}
    onSelect={[Function]}
    onStateChange={[Function]}
    onUserAction={[Function]}
    scrollIntoView={[Function]}
    selectedItem={null}
    selectedItemChanged={[Function]}
    stateReducer={[Function]}
    suppressRefError={false}
  >
    <Component />
  </Downshift>
</div>
`;

exports[`AutoCompleteAsyncField component should call filter function on itemsList 2`] = `
<Downshift
  aria-label="Test"
  defaultHighlightedIndex={null}
  defaultInputValue="test 1"
  defaultIsOpen={false}
  defaultSelectedItem={null}
  environment={[Window]}
  getA11yStatusMessage={[Function]}
  id="Test"
  itemToString={[MockFunction]}
  onChange={[MockFunction]}
  onInputValueChange={[Function]}
  onOuterClick={[Function]}
  onSelect={[Function]}
  onStateChange={[Function]}
  onUserAction={[Function]}
  scrollIntoView={[Function]}
  selectedItem={null}
  selectedItemChanged={[Function]}
  stateReducer={[Function]}
  suppressRefError={false}
>
  <Component />
</Downshift>
`;

exports[`AutoCompleteAsyncField component should call filter function on itemsList 3`] = `
<div
  className="container"
>
  <WithStyles(ForwardRef(Grid))
    alignContent="flex-end"
    alignItems="flex-end"
    container={true}
    spacing={2}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={true}
    >
      <WithStyles(TextFieldWrapper)
        InputProps={
          Object {
            "classes": Object {
              "root": "inputRoot",
            },
            "inputRef": [Function],
            "onChange": [Function],
          }
        }
        disabled={false}
        error={true}
        errorText="This field is required"
        fullWidth={true}
        id="Test-input"
        placeholder={null}
        required={true}
        value="tes"
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
  <div>
    <ForwardRef(Popper)
      disablePortal={true}
      id="downshift-popper"
      open={true}
      placement="bottom-start"
    >
      <WithStyles(ForwardRef(Paper))
        className="paper"
        elevation={1}
        square={true}
        style={
          Object {
            "width": null,
          }
        }
        variant="elevation"
      >
        <WithStyles(ForwardRef(MenuItem))
          button={true}
          key="UQ:123"
          selected={false}
          style={
            Object {
              "fontWeight": 400,
              "height": "auto",
              "whiteSpace": "normal",
            }
          }
        >
          <MenuItemComponent
            suggestion={
              Object {
                "id": "UQ:123",
                "value": "test 1",
              }
            }
          />
        </WithStyles(ForwardRef(MenuItem))>
        <WithStyles(ForwardRef(MenuItem))
          button={true}
          key="UQ:456"
          selected={false}
          style={
            Object {
              "fontWeight": 400,
              "height": "auto",
              "whiteSpace": "normal",
            }
          }
        >
          <MenuItemComponent
            suggestion={
              Object {
                "id": "UQ:456",
                "value": "test 2",
              }
            }
          />
        </WithStyles(ForwardRef(MenuItem))>
      </WithStyles(ForwardRef(Paper))>
    </ForwardRef(Popper)>
  </div>
</div>
`;

exports[`AutoCompleteAsyncField component should call filter function on itemsList 4`] = `
<div
  className="container"
>
  <WithStyles(Grid)
    alignContent="flex-end"
    alignItems="flex-end"
    container={true}
    spacing={2}
  >
    <WithStyles(Grid)
      item={true}
      xs={true}
    >
      <WithStyles(TextFieldWrapper)
        InputProps={
          Object {
            "classes": Object {
              "root": "inputRoot",
            },
            "inputRef": [Function],
          }
        }
        disabled={false}
        error={true}
        errorText="This field is required"
        fullWidth={true}
        id="Test-input"
        placeholder={null}
        required={true}
        value="UQ:123"
      />
    </WithStyles(Grid)>
  </WithStyles(Grid)>
  <div>
    <Popper
      disablePortal={true}
      id="downshift-popper"
      open={true}
      placement="bottom-start"
      transition={false}
    >
      <WithStyles(Paper)
        className="paper"
        square={true}
        style={
          Object {
            "width": null,
          }
        }
      >
        <WithStyles(MenuItem)
          button={true}
          key="UQ:123"
          selected={false}
          style={
            Object {
              "fontWeight": 400,
              "height": "auto",
              "whiteSpace": "normal",
            }
          }
        >
          <MenuItemComponent
            suggestion={
              Object {
                "id": "UQ:123",
                "value": "test 1",
              }
            }
          />
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          button={true}
          key="UQ:456"
          selected={false}
          style={
            Object {
              "fontWeight": 400,
              "height": "auto",
              "whiteSpace": "normal",
            }
          }
        >
          <MenuItemComponent
            suggestion={
              Object {
                "id": "UQ:456",
                "value": "test 2",
              }
            }
          />
        </WithStyles(MenuItem)>
      </WithStyles(Paper)>
    </Popper>
  </div>
</div>
`;

exports[`AutoCompleteAsyncField component should call filter function on itemsList 5`] = `
<MenuItem
  button={true}
  classes={
    Object {
      "gutters": "MuiMenuItem-gutters-216",
      "root": "MuiMenuItem-root-215",
      "selected": "MuiMenuItem-selected-217",
    }
  }
  component="li"
  disableGutters={false}
  role="menuitem"
  selected={false}
  style={
    Object {
      "fontWeight": 400,
      "height": "auto",
      "whiteSpace": "normal",
    }
  }
>
  <MenuItemComponent
    suggestion={
      Object {
        "id": "UQ:123",
        "value": "test 1",
      }
    }
  />
</MenuItem>
`;

exports[`AutoCompleteAsyncField component should call filter function on itemsList 6`] = `
<WithStyles(ListItemText)
  primary="test 1"
  primaryTypographyProps={
    Object {
      "variant": "body1",
    }
  }
  secondary="UQ:123"
  secondaryTypographyProps={
    Object {
      "variant": "body2",
    }
  }
/>
`;

exports[`AutoCompleteAsyncField component should call filter function on itemsList 7`] = `
<WithStyles(FormControl)
  classes={Object {}}
  disabled={false}
  error={true}
  fullWidth={true}
  required={true}
  variant="standard"
>
  <WithStyles(Input)
    aria-describedby="Test-input-helper-text"
    classes={
      Object {
        "root": "inputRoot",
      }
    }
    fullWidth={true}
    id="Test-input"
    inputProps={
      Object {
        "aria-label": undefined,
        "aria-labelledby": "Test-input-label",
        "id": "Test-input",
        "label": undefined,
      }
    }
    inputRef={[Function]}
    placeholder={null}
    value="UQ:123"
  />
  <WithStyles(WithFormControlContext(FormHelperText))
    id="Test-input-helper-text"
  >
    This field is required
  </WithStyles(WithFormControlContext(FormHelperText))>
</WithStyles(FormControl)>
`;

exports[`AutoCompleteAsyncField component should call filter function on itemsList 8`] = `
<div
  className="container"
>
  <WithStyles(Grid)
    alignContent="flex-end"
    alignItems="flex-end"
    container={true}
    spacing={2}
  >
    <WithStyles(Grid)
      item={true}
      xs={true}
    >
      <WithStyles(TextFieldWrapper)
        InputProps={
          Object {
            "classes": Object {
              "root": "inputRoot",
            },
            "inputRef": [Function],
          }
        }
        disabled={false}
        error={true}
        errorText="This field is required"
        fullWidth={true}
        id="Test-input"
        placeholder={null}
        required={true}
        value="123"
      />
    </WithStyles(Grid)>
  </WithStyles(Grid)>
  <div>
    <Popper
      disablePortal={true}
      id="downshift-popper"
      open={true}
      placement="bottom-start"
      transition={false}
    >
      <WithStyles(Paper)
        className="paper"
        square={true}
        style={
          Object {
            "width": null,
          }
        }
      >
        <WithStyles(MenuItem)
          button={true}
          key="UQ:123"
          selected={false}
          style={
            Object {
              "fontWeight": 500,
              "height": "auto",
              "whiteSpace": "normal",
            }
          }
        >
          <MenuItemComponent
            suggestion={
              Object {
                "id": "UQ:123",
                "value": "test 1",
              }
            }
          />
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          button={true}
          key="UQ:456"
          selected={true}
          style={
            Object {
              "fontWeight": 400,
              "height": "auto",
              "whiteSpace": "normal",
            }
          }
        >
          <MenuItemComponent
            suggestion={
              Object {
                "id": "UQ:456",
                "value": "test 2",
              }
            }
          />
        </WithStyles(MenuItem)>
      </WithStyles(Paper)>
    </Popper>
  </div>
</div>
`;

exports[`AutoCompleteAsyncField component should call given filter function on itemsList 1`] = `
<div
  className="root"
>
  <label
    hidden={true}
    id="autosuggest-label"
  />
  <Downshift
    aria-label="autosuggest"
    defaultHighlightedIndex={null}
    defaultInputValue=""
    defaultIsOpen={false}
    defaultSelectedItem={null}
    environment={[Window]}
    getA11yStatusMessage={[Function]}
    id="autosuggest"
    itemToString={[MockFunction]}
    onChange={[MockFunction]}
    onInputValueChange={[Function]}
    onOuterClick={[Function]}
    onSelect={[Function]}
    onStateChange={[Function]}
    onUserAction={[Function]}
    scrollIntoView={[Function]}
    selectedItemChanged={[Function]}
    stateReducer={[Function]}
    suppressRefError={false}
  >
    <Component />
  </Downshift>
</div>
`;

exports[`AutoCompleteAsyncField component should have a proper style generator 1`] = `
Object {
  "chip": Object {
    "margin": "4px 2px",
  },
  "container": Object {
    "flexGrow": 1,
    "position": "relative",
  },
  "inputRoot": Object {
    "flexWrap": "wrap",
  },
  "noWrap": Object {
    "flexWrap": "unset",
  },
  "paper": Object {
    "maxHeight": 250,
    "overflowY": "scroll",
    "position": "absolute",
    "zIndex": 999,
  },
  "root": Object {
    "flexGrow": 1,
  },
}
`;

exports[`AutoCompleteAsyncField component should render 1`] = `
<div
  className="root"
>
  <label
    hidden={true}
    id="autosuggest-label"
  />
  <Downshift
    aria-label="autosuggest"
    defaultHighlightedIndex={null}
    defaultInputValue=""
    defaultIsOpen={false}
    defaultSelectedItem={null}
    environment={[Window]}
    getA11yStatusMessage={[Function]}
    id="autosuggest"
    itemToString={[MockFunction]}
    onChange={[MockFunction]}
    onInputValueChange={[Function]}
    onOuterClick={[Function]}
    onSelect={[Function]}
    onStateChange={[Function]}
    onUserAction={[Function]}
    scrollIntoView={[Function]}
    selectedItemChanged={[Function]}
    stateReducer={[Function]}
    suppressRefError={false}
  >
    <Component />
  </Downshift>
</div>
`;

exports[`AutoCompleteAsyncField component should render a spinner while loading 1`] = `null`;

exports[`AutoCompleteAsyncField component should render as required field 1`] = `
<Provider
  store={
    Object {
      "dispatch": [MockFunction],
      "getState": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
        ],
      },
      "subscribe": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ThemeProvider
        theme={
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "up": [Function],
              "values": Object {
                "lg": 1280,
                "md": 960,
                "sm": 600,
                "xl": 1920,
                "xs": 0,
              },
              "width": [Function],
            },
            "direction": "ltr",
            "graphs": Object {
              "color1": "#d72865",
              "color2": "#1e7d94",
              "color3": "#49075E",
              "color4": "#468fcc",
              "color5": "#f28620",
              "color6": "#333333",
              "color7": "#595959",
            },
            "hexToRGBA": [Function],
            "mixins": Object {
              "gutters": [Function],
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "overrides": Object {
              "MUIDataTable": Object {
                "paper": Object {
                  "boxShadow": "none",
                  "margin": 0,
                  "padding": 0,
                },
              },
              "MuiFormLabel": Object {
                "root": Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                  "whiteSpace": "nowrap",
                  "width": "100%",
                },
              },
              "MuiMenuItem": Object {
                "root": Object {
                  "&$selected": Object {
                    "backgroundColor": "#4085C6 !important",
                    "color": "#FFFFFF",
                  },
                },
              },
            },
            "palette": Object {
              "accent": Object {
                "dark": "#2a557d",
                "light": "#54acff",
                "main": "#316799",
              },
              "action": Object {
                "activatedOpacity": 0.12,
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "disabledOpacity": 0.38,
                "focus": "rgba(0, 0, 0, 0.12)",
                "focusOpacity": 0.12,
                "hover": "rgba(0, 0, 0, 0.04)",
                "hoverOpacity": 0.04,
                "selected": "rgba(0, 0, 0, 0.08)",
                "selectedOpacity": 0.08,
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fafafa",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "#790000",
                "light": "#ff0000",
                "main": "#c80000",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#f5f5f5",
                "200": "#eeeeee",
                "300": "#e0e0e0",
                "400": "#bdbdbd",
                "50": "#fafafa",
                "500": "#9e9e9e",
                "600": "#757575",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#d5d5d5",
                "A200": "#aaaaaa",
                "A400": "#303030",
                "A700": "#616161",
              },
              "info": Object {
                "contrastText": "#fff",
                "dark": "#1976d2",
                "light": "#64b5f6",
                "main": "#2196f3",
              },
              "primary": Object {
                "contrastText": "#fff",
                "dark": "#3b1a59",
                "gradient": Object {
                  "diagonal": Object {
                    "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                  "horizontal": Object {
                    "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                },
                "light": "#962A8B",
                "main": "#51247A",
              },
              "secondary": Object {
                "contrastText": "#fff",
                "dark": "#333333",
                "light": "#f2f2f2",
                "main": "#595959",
              },
              "success": Object {
                "contrastText": "#fff",
                "dark": "#005000",
                "light": "#00a700",
                "main": "#007200",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "hint": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.54)",
              },
              "tonalOffset": 0.2,
              "type": "light",
              "warning": Object {
                "contrastText": "#fff",
                "dark": "#542400",
                "light": "#ff9a57",
                "main": "#bf5000",
              },
              "white": Object {
                "main": "#FFFFFF",
              },
            },
            "props": Object {},
            "shadows": Array [
              "none",
              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": [Function],
            "status": Object {
              "danger": "#f44336",
              "warning": "#ff9800",
            },
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.5,
              },
              "body2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 300,
                "letterSpacing": "0.01071em",
                "lineHeight": 1.43,
              },
              "button": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.02857em",
                "lineHeight": 1.75,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.03333em",
                "lineHeight": 1.66,
              },
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": 14,
              "fontWeightBold": 700,
              "fontWeightLight": 200,
              "fontWeightMedium": 400,
              "fontWeightRegular": 300,
              "h1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "6rem",
                "fontWeight": 200,
                "letterSpacing": "-0.01562em",
                "lineHeight": 1.167,
              },
              "h2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 200,
                "letterSpacing": "-0.00833em",
                "lineHeight": 1.2,
              },
              "h3": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.167,
              },
              "h4": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 300,
                "letterSpacing": "0.00735em",
                "lineHeight": 1.235,
              },
              "h5": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.334,
              },
              "h6": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.25rem",
                "fontWeight": 400,
                "letterSpacing": "0.0075em",
                "lineHeight": 1.6,
              },
              "htmlFontSize": 16,
              "overline": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.08333em",
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "round": [Function],
              "subtitle1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.00714em",
                "lineHeight": 1.57,
              },
              "suppressDeprecationWarnings": true,
              "useNextVariants": true,
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "speedDial": 1050,
              "tooltip": 1500,
            },
            Symbol(mui.nested): false,
          }
        }
      >
        <MuiPickersUtilsProvider
          utils={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
        >
          <AutoCompleteAsyncField
            MenuItemComponent={[Function]}
            allowFreeText={false}
            async={true}
            category={null}
            classes={
              Object {
                "container": "container",
                "inputRoot": "inputRoot",
                "paper": "paper",
                "root": "root",
              }
            }
            disabled={false}
            error={false}
            filter={[Function]}
            floatingLabelText=""
            hintText={null}
            itemToString={[MockFunction]}
            itemsList={Array []}
            itemsListLoading={false}
            loadSuggestions={[MockFunction]}
            maxResults={7}
            onChange={[MockFunction]}
            openOnFocus={false}
            required={true}
            selectedItem={
              Array [
                Object {
                  "id": 1,
                  "value": "Test",
                },
              ]
            }
            selectedValue={null}
            showChips={true}
            showClear={true}
          >
            <div
              className="root"
            >
              <label
                hidden={true}
                id="autosuggest-label"
              />
              <Downshift
                aria-label="autosuggest"
                defaultHighlightedIndex={null}
                defaultInputValue=""
                defaultIsOpen={false}
                defaultSelectedItem={null}
                environment={[Window]}
                getA11yStatusMessage={[Function]}
                id="autosuggest"
                itemToString={[MockFunction]}
                onChange={[MockFunction]}
                onInputValueChange={[Function]}
                onOuterClick={[Function]}
                onSelect={[Function]}
                onStateChange={[Function]}
                onUserAction={[Function]}
                scrollIntoView={[Function]}
                selectedItemChanged={[Function]}
                stateReducer={[Function]}
                suppressRefError={false}
              >
                <div
                  aria-expanded={false}
                  aria-haspopup="listbox"
                  aria-labelledby="autosuggest-label"
                  aria-owns={null}
                  className="container"
                  role="combobox"
                >
                  <WithStyles(ForwardRef(Grid))
                    alignContent="flex-end"
                    alignItems="flex-end"
                    container={true}
                    spacing={2}
                  >
                    <ForwardRef(Grid)
                      alignContent="flex-end"
                      alignItems="flex-end"
                      classes={
                        Object {
                          "align-content-xs-center": "MuiGrid-align-content-xs-center",
                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                          "align-items-xs-center": "MuiGrid-align-items-xs-center",
                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                          "container": "MuiGrid-container",
                          "direction-xs-column": "MuiGrid-direction-xs-column",
                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                          "grid-lg-1": "MuiGrid-grid-lg-1",
                          "grid-lg-10": "MuiGrid-grid-lg-10",
                          "grid-lg-11": "MuiGrid-grid-lg-11",
                          "grid-lg-12": "MuiGrid-grid-lg-12",
                          "grid-lg-2": "MuiGrid-grid-lg-2",
                          "grid-lg-3": "MuiGrid-grid-lg-3",
                          "grid-lg-4": "MuiGrid-grid-lg-4",
                          "grid-lg-5": "MuiGrid-grid-lg-5",
                          "grid-lg-6": "MuiGrid-grid-lg-6",
                          "grid-lg-7": "MuiGrid-grid-lg-7",
                          "grid-lg-8": "MuiGrid-grid-lg-8",
                          "grid-lg-9": "MuiGrid-grid-lg-9",
                          "grid-lg-auto": "MuiGrid-grid-lg-auto",
                          "grid-lg-true": "MuiGrid-grid-lg-true",
                          "grid-md-1": "MuiGrid-grid-md-1",
                          "grid-md-10": "MuiGrid-grid-md-10",
                          "grid-md-11": "MuiGrid-grid-md-11",
                          "grid-md-12": "MuiGrid-grid-md-12",
                          "grid-md-2": "MuiGrid-grid-md-2",
                          "grid-md-3": "MuiGrid-grid-md-3",
                          "grid-md-4": "MuiGrid-grid-md-4",
                          "grid-md-5": "MuiGrid-grid-md-5",
                          "grid-md-6": "MuiGrid-grid-md-6",
                          "grid-md-7": "MuiGrid-grid-md-7",
                          "grid-md-8": "MuiGrid-grid-md-8",
                          "grid-md-9": "MuiGrid-grid-md-9",
                          "grid-md-auto": "MuiGrid-grid-md-auto",
                          "grid-md-true": "MuiGrid-grid-md-true",
                          "grid-sm-1": "MuiGrid-grid-sm-1",
                          "grid-sm-10": "MuiGrid-grid-sm-10",
                          "grid-sm-11": "MuiGrid-grid-sm-11",
                          "grid-sm-12": "MuiGrid-grid-sm-12",
                          "grid-sm-2": "MuiGrid-grid-sm-2",
                          "grid-sm-3": "MuiGrid-grid-sm-3",
                          "grid-sm-4": "MuiGrid-grid-sm-4",
                          "grid-sm-5": "MuiGrid-grid-sm-5",
                          "grid-sm-6": "MuiGrid-grid-sm-6",
                          "grid-sm-7": "MuiGrid-grid-sm-7",
                          "grid-sm-8": "MuiGrid-grid-sm-8",
                          "grid-sm-9": "MuiGrid-grid-sm-9",
                          "grid-sm-auto": "MuiGrid-grid-sm-auto",
                          "grid-sm-true": "MuiGrid-grid-sm-true",
                          "grid-xl-1": "MuiGrid-grid-xl-1",
                          "grid-xl-10": "MuiGrid-grid-xl-10",
                          "grid-xl-11": "MuiGrid-grid-xl-11",
                          "grid-xl-12": "MuiGrid-grid-xl-12",
                          "grid-xl-2": "MuiGrid-grid-xl-2",
                          "grid-xl-3": "MuiGrid-grid-xl-3",
                          "grid-xl-4": "MuiGrid-grid-xl-4",
                          "grid-xl-5": "MuiGrid-grid-xl-5",
                          "grid-xl-6": "MuiGrid-grid-xl-6",
                          "grid-xl-7": "MuiGrid-grid-xl-7",
                          "grid-xl-8": "MuiGrid-grid-xl-8",
                          "grid-xl-9": "MuiGrid-grid-xl-9",
                          "grid-xl-auto": "MuiGrid-grid-xl-auto",
                          "grid-xl-true": "MuiGrid-grid-xl-true",
                          "grid-xs-1": "MuiGrid-grid-xs-1",
                          "grid-xs-10": "MuiGrid-grid-xs-10",
                          "grid-xs-11": "MuiGrid-grid-xs-11",
                          "grid-xs-12": "MuiGrid-grid-xs-12",
                          "grid-xs-2": "MuiGrid-grid-xs-2",
                          "grid-xs-3": "MuiGrid-grid-xs-3",
                          "grid-xs-4": "MuiGrid-grid-xs-4",
                          "grid-xs-5": "MuiGrid-grid-xs-5",
                          "grid-xs-6": "MuiGrid-grid-xs-6",
                          "grid-xs-7": "MuiGrid-grid-xs-7",
                          "grid-xs-8": "MuiGrid-grid-xs-8",
                          "grid-xs-9": "MuiGrid-grid-xs-9",
                          "grid-xs-auto": "MuiGrid-grid-xs-auto",
                          "grid-xs-true": "MuiGrid-grid-xs-true",
                          "item": "MuiGrid-item",
                          "justify-xs-center": "MuiGrid-justify-xs-center",
                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                          "root": "MuiGrid-root",
                          "spacing-xs-1": "MuiGrid-spacing-xs-1",
                          "spacing-xs-10": "MuiGrid-spacing-xs-10",
                          "spacing-xs-2": "MuiGrid-spacing-xs-2",
                          "spacing-xs-3": "MuiGrid-spacing-xs-3",
                          "spacing-xs-4": "MuiGrid-spacing-xs-4",
                          "spacing-xs-5": "MuiGrid-spacing-xs-5",
                          "spacing-xs-6": "MuiGrid-spacing-xs-6",
                          "spacing-xs-7": "MuiGrid-spacing-xs-7",
                          "spacing-xs-8": "MuiGrid-spacing-xs-8",
                          "spacing-xs-9": "MuiGrid-spacing-xs-9",
                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                          "zeroMinWidth": "MuiGrid-zeroMinWidth",
                        }
                      }
                      container={true}
                      spacing={2}
                    >
                      <div
                        className="MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-2 MuiGrid-align-items-xs-flex-end MuiGrid-align-content-xs-flex-end"
                      >
                        <WithStyles(ForwardRef(Grid))
                          item={true}
                          xs={true}
                        >
                          <ForwardRef(Grid)
                            classes={
                              Object {
                                "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                "container": "MuiGrid-container",
                                "direction-xs-column": "MuiGrid-direction-xs-column",
                                "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                "grid-lg-1": "MuiGrid-grid-lg-1",
                                "grid-lg-10": "MuiGrid-grid-lg-10",
                                "grid-lg-11": "MuiGrid-grid-lg-11",
                                "grid-lg-12": "MuiGrid-grid-lg-12",
                                "grid-lg-2": "MuiGrid-grid-lg-2",
                                "grid-lg-3": "MuiGrid-grid-lg-3",
                                "grid-lg-4": "MuiGrid-grid-lg-4",
                                "grid-lg-5": "MuiGrid-grid-lg-5",
                                "grid-lg-6": "MuiGrid-grid-lg-6",
                                "grid-lg-7": "MuiGrid-grid-lg-7",
                                "grid-lg-8": "MuiGrid-grid-lg-8",
                                "grid-lg-9": "MuiGrid-grid-lg-9",
                                "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                "grid-lg-true": "MuiGrid-grid-lg-true",
                                "grid-md-1": "MuiGrid-grid-md-1",
                                "grid-md-10": "MuiGrid-grid-md-10",
                                "grid-md-11": "MuiGrid-grid-md-11",
                                "grid-md-12": "MuiGrid-grid-md-12",
                                "grid-md-2": "MuiGrid-grid-md-2",
                                "grid-md-3": "MuiGrid-grid-md-3",
                                "grid-md-4": "MuiGrid-grid-md-4",
                                "grid-md-5": "MuiGrid-grid-md-5",
                                "grid-md-6": "MuiGrid-grid-md-6",
                                "grid-md-7": "MuiGrid-grid-md-7",
                                "grid-md-8": "MuiGrid-grid-md-8",
                                "grid-md-9": "MuiGrid-grid-md-9",
                                "grid-md-auto": "MuiGrid-grid-md-auto",
                                "grid-md-true": "MuiGrid-grid-md-true",
                                "grid-sm-1": "MuiGrid-grid-sm-1",
                                "grid-sm-10": "MuiGrid-grid-sm-10",
                                "grid-sm-11": "MuiGrid-grid-sm-11",
                                "grid-sm-12": "MuiGrid-grid-sm-12",
                                "grid-sm-2": "MuiGrid-grid-sm-2",
                                "grid-sm-3": "MuiGrid-grid-sm-3",
                                "grid-sm-4": "MuiGrid-grid-sm-4",
                                "grid-sm-5": "MuiGrid-grid-sm-5",
                                "grid-sm-6": "MuiGrid-grid-sm-6",
                                "grid-sm-7": "MuiGrid-grid-sm-7",
                                "grid-sm-8": "MuiGrid-grid-sm-8",
                                "grid-sm-9": "MuiGrid-grid-sm-9",
                                "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                "grid-sm-true": "MuiGrid-grid-sm-true",
                                "grid-xl-1": "MuiGrid-grid-xl-1",
                                "grid-xl-10": "MuiGrid-grid-xl-10",
                                "grid-xl-11": "MuiGrid-grid-xl-11",
                                "grid-xl-12": "MuiGrid-grid-xl-12",
                                "grid-xl-2": "MuiGrid-grid-xl-2",
                                "grid-xl-3": "MuiGrid-grid-xl-3",
                                "grid-xl-4": "MuiGrid-grid-xl-4",
                                "grid-xl-5": "MuiGrid-grid-xl-5",
                                "grid-xl-6": "MuiGrid-grid-xl-6",
                                "grid-xl-7": "MuiGrid-grid-xl-7",
                                "grid-xl-8": "MuiGrid-grid-xl-8",
                                "grid-xl-9": "MuiGrid-grid-xl-9",
                                "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                "grid-xl-true": "MuiGrid-grid-xl-true",
                                "grid-xs-1": "MuiGrid-grid-xs-1",
                                "grid-xs-10": "MuiGrid-grid-xs-10",
                                "grid-xs-11": "MuiGrid-grid-xs-11",
                                "grid-xs-12": "MuiGrid-grid-xs-12",
                                "grid-xs-2": "MuiGrid-grid-xs-2",
                                "grid-xs-3": "MuiGrid-grid-xs-3",
                                "grid-xs-4": "MuiGrid-grid-xs-4",
                                "grid-xs-5": "MuiGrid-grid-xs-5",
                                "grid-xs-6": "MuiGrid-grid-xs-6",
                                "grid-xs-7": "MuiGrid-grid-xs-7",
                                "grid-xs-8": "MuiGrid-grid-xs-8",
                                "grid-xs-9": "MuiGrid-grid-xs-9",
                                "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                "grid-xs-true": "MuiGrid-grid-xs-true",
                                "item": "MuiGrid-item",
                                "justify-xs-center": "MuiGrid-justify-xs-center",
                                "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                "root": "MuiGrid-root",
                                "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                "zeroMinWidth": "MuiGrid-zeroMinWidth",
                              }
                            }
                            item={true}
                            xs={true}
                          >
                            <div
                              className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-true"
                            >
                              <WithStyles(TextFieldWrapper)
                                InputProps={
                                  Object {
                                    "aria-activedescendant": null,
                                    "aria-autocomplete": "list",
                                    "aria-controls": null,
                                    "aria-labelledby": "autosuggest-label",
                                    "autoComplete": "off",
                                    "classes": Object {
                                      "root": undefined,
                                    },
                                    "endAdornment": <ForwardRef(WithStyles)
                                      position="end"
                                    >
                                      <ForwardRef(WithStyles)
                                        aria-label="Clear"
                                        id="clear-input"
                                        onClick={[Function]}
                                      >
                                        <Memo(ClearIcon) />
                                      </ForwardRef(WithStyles)>
                                    </ForwardRef(WithStyles)>,
                                    "id": "autosuggest-input",
                                    "inputRef": [Function],
                                    "onBlur": [Function],
                                    "onChange": [Function],
                                    "onKeyDown": [Function],
                                    "startAdornment": Array [
                                      <ForwardRef(WithStyles)
                                        label="Test"
                                        onDelete={[Function]}
                                        tabIndex={-1}
                                      />,
                                    ],
                                    "value": "",
                                  }
                                }
                                disabled={false}
                                error={false}
                                errorText=""
                                fullWidth={true}
                                id="autosuggest-input"
                                label="autosuggest"
                                placeholder={null}
                                required={true}
                                value=""
                              >
                                <TextFieldWrapper
                                  InputProps={
                                    Object {
                                      "aria-activedescendant": null,
                                      "aria-autocomplete": "list",
                                      "aria-controls": null,
                                      "aria-labelledby": "autosuggest-label",
                                      "autoComplete": "off",
                                      "classes": Object {
                                        "root": undefined,
                                      },
                                      "endAdornment": <ForwardRef(WithStyles)
                                        position="end"
                                      >
                                        <ForwardRef(WithStyles)
                                          aria-label="Clear"
                                          id="clear-input"
                                          onClick={[Function]}
                                        >
                                          <Memo(ClearIcon) />
                                        </ForwardRef(WithStyles)>
                                      </ForwardRef(WithStyles)>,
                                      "id": "autosuggest-input",
                                      "inputRef": [Function],
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onKeyDown": [Function],
                                      "startAdornment": Array [
                                        <ForwardRef(WithStyles)
                                          label="Test"
                                          onDelete={[Function]}
                                          tabIndex={-1}
                                        />,
                                      ],
                                      "value": "",
                                    }
                                  }
                                  classes={Object {}}
                                  disabled={false}
                                  error={false}
                                  errorText=""
                                  fullWidth={true}
                                  id="autosuggest-input"
                                  label="autosuggest"
                                  placeholder={null}
                                  required={true}
                                  value=""
                                >
                                  <WithStyles(ForwardRef(TextField))
                                    InputLabelProps={
                                      Object {
                                        "hidden": false,
                                        "htmlFor": "autosuggest-input",
                                        "id": "autosuggest-input-label",
                                        "shrink": undefined,
                                      }
                                    }
                                    InputProps={
                                      Object {
                                        "aria-activedescendant": null,
                                        "aria-autocomplete": "list",
                                        "aria-controls": null,
                                        "aria-labelledby": "autosuggest-label",
                                        "autoComplete": "off",
                                        "classes": Object {
                                          "root": undefined,
                                        },
                                        "endAdornment": <ForwardRef(WithStyles)
                                          position="end"
                                        >
                                          <ForwardRef(WithStyles)
                                            aria-label="Clear"
                                            id="clear-input"
                                            onClick={[Function]}
                                          >
                                            <Memo(ClearIcon) />
                                          </ForwardRef(WithStyles)>
                                        </ForwardRef(WithStyles)>,
                                        "id": "autosuggest-input",
                                        "inputRef": [Function],
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "onKeyDown": [Function],
                                        "startAdornment": Array [
                                          <ForwardRef(WithStyles)
                                            label="Test"
                                            onDelete={[Function]}
                                            tabIndex={-1}
                                          />,
                                        ],
                                        "value": "",
                                      }
                                    }
                                    classes={Object {}}
                                    disabled={false}
                                    error={false}
                                    fullWidth={true}
                                    id="autosuggest-input"
                                    inputProps={
                                      Object {
                                        "aria-label": "autosuggest",
                                        "aria-labelledby": "autosuggest-input-label",
                                        "id": "autosuggest-input",
                                        "label": "autosuggest",
                                      }
                                    }
                                    label="autosuggest"
                                    placeholder={null}
                                    required={true}
                                    value=""
                                  >
                                    <ForwardRef(TextField)
                                      InputLabelProps={
                                        Object {
                                          "hidden": false,
                                          "htmlFor": "autosuggest-input",
                                          "id": "autosuggest-input-label",
                                          "shrink": undefined,
                                        }
                                      }
                                      InputProps={
                                        Object {
                                          "aria-activedescendant": null,
                                          "aria-autocomplete": "list",
                                          "aria-controls": null,
                                          "aria-labelledby": "autosuggest-label",
                                          "autoComplete": "off",
                                          "classes": Object {
                                            "root": undefined,
                                          },
                                          "endAdornment": <ForwardRef(WithStyles)
                                            position="end"
                                          >
                                            <ForwardRef(WithStyles)
                                              aria-label="Clear"
                                              id="clear-input"
                                              onClick={[Function]}
                                            >
                                              <Memo(ClearIcon) />
                                            </ForwardRef(WithStyles)>
                                          </ForwardRef(WithStyles)>,
                                          "id": "autosuggest-input",
                                          "inputRef": [Function],
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onKeyDown": [Function],
                                          "startAdornment": Array [
                                            <ForwardRef(WithStyles)
                                              label="Test"
                                              onDelete={[Function]}
                                              tabIndex={-1}
                                            />,
                                          ],
                                          "value": "",
                                        }
                                      }
                                      classes={
                                        Object {
                                          "root": "MuiTextField-root",
                                        }
                                      }
                                      disabled={false}
                                      error={false}
                                      fullWidth={true}
                                      id="autosuggest-input"
                                      inputProps={
                                        Object {
                                          "aria-label": "autosuggest",
                                          "aria-labelledby": "autosuggest-input-label",
                                          "id": "autosuggest-input",
                                          "label": "autosuggest",
                                        }
                                      }
                                      label="autosuggest"
                                      placeholder={null}
                                      required={true}
                                      value=""
                                    >
                                      <WithStyles(ForwardRef(FormControl))
                                        className="MuiTextField-root"
                                        color="primary"
                                        disabled={false}
                                        error={false}
                                        fullWidth={true}
                                        required={true}
                                        variant="standard"
                                      >
                                        <ForwardRef(FormControl)
                                          className="MuiTextField-root"
                                          classes={
                                            Object {
                                              "fullWidth": "MuiFormControl-fullWidth",
                                              "marginDense": "MuiFormControl-marginDense",
                                              "marginNormal": "MuiFormControl-marginNormal",
                                              "root": "MuiFormControl-root",
                                            }
                                          }
                                          color="primary"
                                          disabled={false}
                                          error={false}
                                          fullWidth={true}
                                          required={true}
                                          variant="standard"
                                        >
                                          <div
                                            className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                          >
                                            <WithStyles(ForwardRef(InputLabel))
                                              hidden={false}
                                              htmlFor="autosuggest-input"
                                              id="autosuggest-input-label"
                                            >
                                              <ForwardRef(InputLabel)
                                                classes={
                                                  Object {
                                                    "animated": "MuiInputLabel-animated",
                                                    "asterisk": "MuiInputLabel-asterisk",
                                                    "disabled": "Mui-disabled",
                                                    "error": "Mui-error",
                                                    "filled": "MuiInputLabel-filled",
                                                    "focused": "Mui-focused",
                                                    "formControl": "MuiInputLabel-formControl",
                                                    "marginDense": "MuiInputLabel-marginDense",
                                                    "outlined": "MuiInputLabel-outlined",
                                                    "required": "Mui-required",
                                                    "root": "MuiInputLabel-root",
                                                    "shrink": "MuiInputLabel-shrink",
                                                  }
                                                }
                                                hidden={false}
                                                htmlFor="autosuggest-input"
                                                id="autosuggest-input-label"
                                              >
                                                <WithStyles(ForwardRef(FormLabel))
                                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                                                  classes={
                                                    Object {
                                                      "asterisk": "MuiInputLabel-asterisk",
                                                      "disabled": "Mui-disabled",
                                                      "error": "Mui-error",
                                                      "focused": "Mui-focused",
                                                      "required": "Mui-required",
                                                    }
                                                  }
                                                  data-shrink={true}
                                                  hidden={false}
                                                  htmlFor="autosuggest-input"
                                                  id="autosuggest-input-label"
                                                >
                                                  <ForwardRef(FormLabel)
                                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                                                    classes={
                                                      Object {
                                                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                        "colorSecondary": "MuiFormLabel-colorSecondary",
                                                        "disabled": "Mui-disabled Mui-disabled",
                                                        "error": "Mui-error Mui-error",
                                                        "filled": "MuiFormLabel-filled",
                                                        "focused": "Mui-focused Mui-focused",
                                                        "required": "Mui-required Mui-required",
                                                        "root": "MuiFormLabel-root",
                                                      }
                                                    }
                                                    data-shrink={true}
                                                    hidden={false}
                                                    htmlFor="autosuggest-input"
                                                    id="autosuggest-input-label"
                                                  >
                                                    <label
                                                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink Mui-required Mui-required"
                                                      data-shrink={true}
                                                      hidden={false}
                                                      htmlFor="autosuggest-input"
                                                      id="autosuggest-input-label"
                                                    >
                                                      autosuggest
                                                      <span
                                                        className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                                                      >
                                                         
                                                        *
                                                      </span>
                                                    </label>
                                                  </ForwardRef(FormLabel)>
                                                </WithStyles(ForwardRef(FormLabel))>
                                              </ForwardRef(InputLabel)>
                                            </WithStyles(ForwardRef(InputLabel))>
                                            <WithStyles(ForwardRef(Input))
                                              aria-activedescendant={null}
                                              aria-autocomplete="list"
                                              aria-controls={null}
                                              aria-labelledby="autosuggest-label"
                                              autoComplete="off"
                                              autoFocus={false}
                                              classes={
                                                Object {
                                                  "root": undefined,
                                                }
                                              }
                                              endAdornment={
                                                <ForwardRef(WithStyles)
                                                  position="end"
                                                >
                                                  <ForwardRef(WithStyles)
                                                    aria-label="Clear"
                                                    id="clear-input"
                                                    onClick={[Function]}
                                                  >
                                                    <Memo(ClearIcon) />
                                                  </ForwardRef(WithStyles)>
                                                </ForwardRef(WithStyles)>
                                              }
                                              fullWidth={true}
                                              id="autosuggest-input"
                                              inputProps={
                                                Object {
                                                  "aria-label": "autosuggest",
                                                  "aria-labelledby": "autosuggest-input-label",
                                                  "id": "autosuggest-input",
                                                  "label": "autosuggest",
                                                }
                                              }
                                              inputRef={[Function]}
                                              multiline={false}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder={null}
                                              startAdornment={
                                                Array [
                                                  <ForwardRef(WithStyles)
                                                    label="Test"
                                                    onDelete={[Function]}
                                                    tabIndex={-1}
                                                  />,
                                                ]
                                              }
                                              value=""
                                            >
                                              <ForwardRef(Input)
                                                aria-activedescendant={null}
                                                aria-autocomplete="list"
                                                aria-controls={null}
                                                aria-labelledby="autosuggest-label"
                                                autoComplete="off"
                                                autoFocus={false}
                                                classes={
                                                  Object {
                                                    "colorSecondary": "MuiInput-colorSecondary",
                                                    "disabled": "Mui-disabled",
                                                    "error": "Mui-error",
                                                    "focused": "Mui-focused",
                                                    "formControl": "MuiInput-formControl",
                                                    "fullWidth": "MuiInput-fullWidth",
                                                    "input": "MuiInput-input",
                                                    "inputMarginDense": "MuiInput-inputMarginDense",
                                                    "inputMultiline": "MuiInput-inputMultiline",
                                                    "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                    "marginDense": "MuiInput-marginDense",
                                                    "multiline": "MuiInput-multiline",
                                                    "root": "MuiInput-root",
                                                    "underline": "MuiInput-underline",
                                                  }
                                                }
                                                endAdornment={
                                                  <ForwardRef(WithStyles)
                                                    position="end"
                                                  >
                                                    <ForwardRef(WithStyles)
                                                      aria-label="Clear"
                                                      id="clear-input"
                                                      onClick={[Function]}
                                                    >
                                                      <Memo(ClearIcon) />
                                                    </ForwardRef(WithStyles)>
                                                  </ForwardRef(WithStyles)>
                                                }
                                                fullWidth={true}
                                                id="autosuggest-input"
                                                inputProps={
                                                  Object {
                                                    "aria-label": "autosuggest",
                                                    "aria-labelledby": "autosuggest-input-label",
                                                    "id": "autosuggest-input",
                                                    "label": "autosuggest",
                                                  }
                                                }
                                                inputRef={[Function]}
                                                multiline={false}
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder={null}
                                                startAdornment={
                                                  Array [
                                                    <ForwardRef(WithStyles)
                                                      label="Test"
                                                      onDelete={[Function]}
                                                      tabIndex={-1}
                                                    />,
                                                  ]
                                                }
                                                value=""
                                              >
                                                <WithStyles(ForwardRef(InputBase))
                                                  aria-activedescendant={null}
                                                  aria-autocomplete="list"
                                                  aria-controls={null}
                                                  aria-labelledby="autosuggest-label"
                                                  autoComplete="off"
                                                  autoFocus={false}
                                                  classes={
                                                    Object {
                                                      "colorSecondary": "MuiInput-colorSecondary",
                                                      "disabled": "Mui-disabled",
                                                      "error": "Mui-error",
                                                      "focused": "Mui-focused",
                                                      "formControl": "MuiInput-formControl",
                                                      "fullWidth": "MuiInput-fullWidth",
                                                      "input": "MuiInput-input",
                                                      "inputMarginDense": "MuiInput-inputMarginDense",
                                                      "inputMultiline": "MuiInput-inputMultiline",
                                                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                      "marginDense": "MuiInput-marginDense",
                                                      "multiline": "MuiInput-multiline",
                                                      "root": "MuiInput-root MuiInput-underline",
                                                      "underline": null,
                                                    }
                                                  }
                                                  endAdornment={
                                                    <ForwardRef(WithStyles)
                                                      position="end"
                                                    >
                                                      <ForwardRef(WithStyles)
                                                        aria-label="Clear"
                                                        id="clear-input"
                                                        onClick={[Function]}
                                                      >
                                                        <Memo(ClearIcon) />
                                                      </ForwardRef(WithStyles)>
                                                    </ForwardRef(WithStyles)>
                                                  }
                                                  fullWidth={true}
                                                  id="autosuggest-input"
                                                  inputComponent="input"
                                                  inputProps={
                                                    Object {
                                                      "aria-label": "autosuggest",
                                                      "aria-labelledby": "autosuggest-input-label",
                                                      "id": "autosuggest-input",
                                                      "label": "autosuggest",
                                                    }
                                                  }
                                                  inputRef={[Function]}
                                                  multiline={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder={null}
                                                  startAdornment={
                                                    Array [
                                                      <ForwardRef(WithStyles)
                                                        label="Test"
                                                        onDelete={[Function]}
                                                        tabIndex={-1}
                                                      />,
                                                    ]
                                                  }
                                                  type="text"
                                                  value=""
                                                >
                                                  <ForwardRef(InputBase)
                                                    aria-activedescendant={null}
                                                    aria-autocomplete="list"
                                                    aria-controls={null}
                                                    aria-labelledby="autosuggest-label"
                                                    autoComplete="off"
                                                    autoFocus={false}
                                                    classes={
                                                      Object {
                                                        "adornedEnd": "MuiInputBase-adornedEnd",
                                                        "adornedStart": "MuiInputBase-adornedStart",
                                                        "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                        "disabled": "Mui-disabled Mui-disabled",
                                                        "error": "Mui-error Mui-error",
                                                        "focused": "Mui-focused Mui-focused",
                                                        "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                        "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                        "input": "MuiInputBase-input MuiInput-input",
                                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                        "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                        "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                        "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                        "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                        "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                        "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                                      }
                                                    }
                                                    endAdornment={
                                                      <ForwardRef(WithStyles)
                                                        position="end"
                                                      >
                                                        <ForwardRef(WithStyles)
                                                          aria-label="Clear"
                                                          id="clear-input"
                                                          onClick={[Function]}
                                                        >
                                                          <Memo(ClearIcon) />
                                                        </ForwardRef(WithStyles)>
                                                      </ForwardRef(WithStyles)>
                                                    }
                                                    fullWidth={true}
                                                    id="autosuggest-input"
                                                    inputComponent="input"
                                                    inputProps={
                                                      Object {
                                                        "aria-label": "autosuggest",
                                                        "aria-labelledby": "autosuggest-input-label",
                                                        "id": "autosuggest-input",
                                                        "label": "autosuggest",
                                                      }
                                                    }
                                                    inputRef={[Function]}
                                                    multiline={false}
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    placeholder={null}
                                                    startAdornment={
                                                      Array [
                                                        <ForwardRef(WithStyles)
                                                          label="Test"
                                                          onDelete={[Function]}
                                                          tabIndex={-1}
                                                        />,
                                                      ]
                                                    }
                                                    type="text"
                                                    value=""
                                                  >
                                                    <div
                                                      aria-activedescendant={null}
                                                      aria-autocomplete="list"
                                                      aria-controls={null}
                                                      aria-labelledby="autosuggest-label"
                                                      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedStart MuiInputBase-adornedEnd"
                                                      onClick={[Function]}
                                                    >
                                                      <WithStyles(ForwardRef(Chip))
                                                        key="1"
                                                        label="Test"
                                                        onDelete={[Function]}
                                                        tabIndex={-1}
                                                      >
                                                        <ForwardRef(Chip)
                                                          classes={
                                                            Object {
                                                              "avatar": "MuiChip-avatar",
                                                              "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                                                              "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                                                              "avatarSmall": "MuiChip-avatarSmall",
                                                              "clickable": "MuiChip-clickable",
                                                              "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                                                              "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                                                              "colorPrimary": "MuiChip-colorPrimary",
                                                              "colorSecondary": "MuiChip-colorSecondary",
                                                              "deletable": "MuiChip-deletable",
                                                              "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                                                              "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                                                              "deleteIcon": "MuiChip-deleteIcon",
                                                              "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                                                              "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                                                              "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                                                              "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                                                              "deleteIconSmall": "MuiChip-deleteIconSmall",
                                                              "disabled": "Mui-disabled",
                                                              "icon": "MuiChip-icon",
                                                              "iconColorPrimary": "MuiChip-iconColorPrimary",
                                                              "iconColorSecondary": "MuiChip-iconColorSecondary",
                                                              "iconSmall": "MuiChip-iconSmall",
                                                              "label": "MuiChip-label",
                                                              "labelSmall": "MuiChip-labelSmall",
                                                              "outlined": "MuiChip-outlined",
                                                              "outlinedPrimary": "MuiChip-outlinedPrimary",
                                                              "outlinedSecondary": "MuiChip-outlinedSecondary",
                                                              "root": "MuiChip-root",
                                                              "sizeSmall": "MuiChip-sizeSmall",
                                                            }
                                                          }
                                                          label="Test"
                                                          onDelete={[Function]}
                                                          tabIndex={-1}
                                                        >
                                                          <div
                                                            className="MuiChip-root MuiChip-deletable"
                                                            onKeyUp={[Function]}
                                                            role="button"
                                                            tabIndex={-1}
                                                          >
                                                            <span
                                                              className="MuiChip-label"
                                                            >
                                                              Test
                                                            </span>
                                                            <ForwardRef
                                                              className="MuiChip-deleteIcon"
                                                              onClick={[Function]}
                                                            >
                                                              <WithStyles(ForwardRef(SvgIcon))
                                                                className="MuiChip-deleteIcon"
                                                                onClick={[Function]}
                                                              >
                                                                <ForwardRef(SvgIcon)
                                                                  className="MuiChip-deleteIcon"
                                                                  classes={
                                                                    Object {
                                                                      "colorAction": "MuiSvgIcon-colorAction",
                                                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                      "colorError": "MuiSvgIcon-colorError",
                                                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                      "root": "MuiSvgIcon-root",
                                                                    }
                                                                  }
                                                                  onClick={[Function]}
                                                                >
                                                                  <svg
                                                                    aria-hidden="true"
                                                                    className="MuiSvgIcon-root MuiChip-deleteIcon"
                                                                    focusable="false"
                                                                    onClick={[Function]}
                                                                    role="presentation"
                                                                    viewBox="0 0 24 24"
                                                                  >
                                                                    <path
                                                                      d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
                                                                    />
                                                                  </svg>
                                                                </ForwardRef(SvgIcon)>
                                                              </WithStyles(ForwardRef(SvgIcon))>
                                                            </ForwardRef>
                                                          </div>
                                                        </ForwardRef(Chip)>
                                                      </WithStyles(ForwardRef(Chip))>
                                                      <input
                                                        aria-invalid={false}
                                                        aria-label="autosuggest"
                                                        aria-labelledby="autosuggest-input-label"
                                                        autoComplete="off"
                                                        autoFocus={false}
                                                        className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart MuiInputBase-inputAdornedEnd"
                                                        disabled={false}
                                                        id="autosuggest-input"
                                                        label="autosuggest"
                                                        onAnimationStart={[Function]}
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        placeholder={null}
                                                        required={true}
                                                        type="text"
                                                        value=""
                                                      />
                                                      <WithStyles(ForwardRef(InputAdornment))
                                                        position="end"
                                                      >
                                                        <ForwardRef(InputAdornment)
                                                          classes={
                                                            Object {
                                                              "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                              "filled": "MuiInputAdornment-filled",
                                                              "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                              "marginDense": "MuiInputAdornment-marginDense",
                                                              "positionEnd": "MuiInputAdornment-positionEnd",
                                                              "positionStart": "MuiInputAdornment-positionStart",
                                                              "root": "MuiInputAdornment-root",
                                                            }
                                                          }
                                                          position="end"
                                                        >
                                                          <div
                                                            className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                                          >
                                                            <WithStyles(ForwardRef(IconButton))
                                                              aria-label="Clear"
                                                              id="clear-input"
                                                              onClick={[Function]}
                                                            >
                                                              <ForwardRef(IconButton)
                                                                aria-label="Clear"
                                                                classes={
                                                                  Object {
                                                                    "colorInherit": "MuiIconButton-colorInherit",
                                                                    "colorPrimary": "MuiIconButton-colorPrimary",
                                                                    "colorSecondary": "MuiIconButton-colorSecondary",
                                                                    "disabled": "Mui-disabled",
                                                                    "edgeEnd": "MuiIconButton-edgeEnd",
                                                                    "edgeStart": "MuiIconButton-edgeStart",
                                                                    "label": "MuiIconButton-label",
                                                                    "root": "MuiIconButton-root",
                                                                    "sizeSmall": "MuiIconButton-sizeSmall",
                                                                  }
                                                                }
                                                                id="clear-input"
                                                                onClick={[Function]}
                                                              >
                                                                <WithStyles(ForwardRef(ButtonBase))
                                                                  aria-label="Clear"
                                                                  centerRipple={true}
                                                                  className="MuiIconButton-root"
                                                                  disabled={false}
                                                                  focusRipple={true}
                                                                  id="clear-input"
                                                                  onClick={[Function]}
                                                                >
                                                                  <ForwardRef(ButtonBase)
                                                                    aria-label="Clear"
                                                                    centerRipple={true}
                                                                    className="MuiIconButton-root"
                                                                    classes={
                                                                      Object {
                                                                        "disabled": "Mui-disabled",
                                                                        "focusVisible": "Mui-focusVisible",
                                                                        "root": "MuiButtonBase-root",
                                                                      }
                                                                    }
                                                                    disabled={false}
                                                                    focusRipple={true}
                                                                    id="clear-input"
                                                                    onClick={[Function]}
                                                                  >
                                                                    <button
                                                                      aria-label="Clear"
                                                                      className="MuiButtonBase-root MuiIconButton-root"
                                                                      disabled={false}
                                                                      id="clear-input"
                                                                      onBlur={[Function]}
                                                                      onClick={[Function]}
                                                                      onDragLeave={[Function]}
                                                                      onFocus={[Function]}
                                                                      onKeyDown={[Function]}
                                                                      onKeyUp={[Function]}
                                                                      onMouseDown={[Function]}
                                                                      onMouseLeave={[Function]}
                                                                      onMouseUp={[Function]}
                                                                      onTouchEnd={[Function]}
                                                                      onTouchMove={[Function]}
                                                                      onTouchStart={[Function]}
                                                                      tabIndex={0}
                                                                      type="button"
                                                                    >
                                                                      <span
                                                                        className="MuiIconButton-label"
                                                                      >
                                                                        <ForwardRef>
                                                                          <WithStyles(ForwardRef(SvgIcon))>
                                                                            <ForwardRef(SvgIcon)
                                                                              classes={
                                                                                Object {
                                                                                  "colorAction": "MuiSvgIcon-colorAction",
                                                                                  "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                                  "colorError": "MuiSvgIcon-colorError",
                                                                                  "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                                  "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                                  "root": "MuiSvgIcon-root",
                                                                                }
                                                                              }
                                                                            >
                                                                              <svg
                                                                                aria-hidden="true"
                                                                                className="MuiSvgIcon-root"
                                                                                focusable="false"
                                                                                role="presentation"
                                                                                viewBox="0 0 24 24"
                                                                              >
                                                                                <path
                                                                                  d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                                                                                />
                                                                              </svg>
                                                                            </ForwardRef(SvgIcon)>
                                                                          </WithStyles(ForwardRef(SvgIcon))>
                                                                        </ForwardRef>
                                                                      </span>
                                                                      <NoSsr>
                                                                        <WithStyles(undefined)
                                                                          center={true}
                                                                        >
                                                                          <ForwardRef(TouchRipple)
                                                                            center={true}
                                                                            classes={
                                                                              Object {
                                                                                "child": "MuiTouchRipple-child",
                                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                "ripple": "MuiTouchRipple-ripple",
                                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                "root": "MuiTouchRipple-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <span
                                                                              className="MuiTouchRipple-root"
                                                                            >
                                                                              <TransitionGroup
                                                                                childFactory={[Function]}
                                                                                component={null}
                                                                                exit={true}
                                                                              />
                                                                            </span>
                                                                          </ForwardRef(TouchRipple)>
                                                                        </WithStyles(undefined)>
                                                                      </NoSsr>
                                                                    </button>
                                                                  </ForwardRef(ButtonBase)>
                                                                </WithStyles(ForwardRef(ButtonBase))>
                                                              </ForwardRef(IconButton)>
                                                            </WithStyles(ForwardRef(IconButton))>
                                                          </div>
                                                        </ForwardRef(InputAdornment)>
                                                      </WithStyles(ForwardRef(InputAdornment))>
                                                    </div>
                                                  </ForwardRef(InputBase)>
                                                </WithStyles(ForwardRef(InputBase))>
                                              </ForwardRef(Input)>
                                            </WithStyles(ForwardRef(Input))>
                                          </div>
                                        </ForwardRef(FormControl)>
                                      </WithStyles(ForwardRef(FormControl))>
                                    </ForwardRef(TextField)>
                                  </WithStyles(ForwardRef(TextField))>
                                </TextFieldWrapper>
                              </WithStyles(TextFieldWrapper)>
                            </div>
                          </ForwardRef(Grid)>
                        </WithStyles(ForwardRef(Grid))>
                      </div>
                    </ForwardRef(Grid)>
                  </WithStyles(ForwardRef(Grid))>
                </div>
              </Downshift>
            </div>
          </AutoCompleteAsyncField>
        </MuiPickersUtilsProvider>
      </ThemeProvider>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`AutoCompleteAsyncField component should render autosuggest field and call action creator 1`] = `
<Provider
  store={
    Object {
      "dispatch": [MockFunction],
      "getState": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
        ],
      },
      "subscribe": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ThemeProvider
        theme={
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "up": [Function],
              "values": Object {
                "lg": 1280,
                "md": 960,
                "sm": 600,
                "xl": 1920,
                "xs": 0,
              },
              "width": [Function],
            },
            "direction": "ltr",
            "graphs": Object {
              "color1": "#d72865",
              "color2": "#1e7d94",
              "color3": "#49075E",
              "color4": "#468fcc",
              "color5": "#f28620",
              "color6": "#333333",
              "color7": "#595959",
            },
            "hexToRGBA": [Function],
            "mixins": Object {
              "gutters": [Function],
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "overrides": Object {
              "MUIDataTable": Object {
                "paper": Object {
                  "boxShadow": "none",
                  "margin": 0,
                  "padding": 0,
                },
              },
              "MuiFormLabel": Object {
                "root": Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                  "whiteSpace": "nowrap",
                  "width": "100%",
                },
              },
              "MuiMenuItem": Object {
                "root": Object {
                  "&$selected": Object {
                    "backgroundColor": "#4085C6 !important",
                    "color": "#FFFFFF",
                  },
                },
              },
            },
            "palette": Object {
              "accent": Object {
                "dark": "#2a557d",
                "light": "#54acff",
                "main": "#316799",
              },
              "action": Object {
                "activatedOpacity": 0.12,
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "disabledOpacity": 0.38,
                "focus": "rgba(0, 0, 0, 0.12)",
                "focusOpacity": 0.12,
                "hover": "rgba(0, 0, 0, 0.04)",
                "hoverOpacity": 0.04,
                "selected": "rgba(0, 0, 0, 0.08)",
                "selectedOpacity": 0.08,
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fafafa",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "#790000",
                "light": "#ff0000",
                "main": "#c80000",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#f5f5f5",
                "200": "#eeeeee",
                "300": "#e0e0e0",
                "400": "#bdbdbd",
                "50": "#fafafa",
                "500": "#9e9e9e",
                "600": "#757575",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#d5d5d5",
                "A200": "#aaaaaa",
                "A400": "#303030",
                "A700": "#616161",
              },
              "info": Object {
                "contrastText": "#fff",
                "dark": "#1976d2",
                "light": "#64b5f6",
                "main": "#2196f3",
              },
              "primary": Object {
                "contrastText": "#fff",
                "dark": "#3b1a59",
                "gradient": Object {
                  "diagonal": Object {
                    "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                  "horizontal": Object {
                    "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                },
                "light": "#962A8B",
                "main": "#51247A",
              },
              "secondary": Object {
                "contrastText": "#fff",
                "dark": "#333333",
                "light": "#f2f2f2",
                "main": "#595959",
              },
              "success": Object {
                "contrastText": "#fff",
                "dark": "#005000",
                "light": "#00a700",
                "main": "#007200",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "hint": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.54)",
              },
              "tonalOffset": 0.2,
              "type": "light",
              "warning": Object {
                "contrastText": "#fff",
                "dark": "#542400",
                "light": "#ff9a57",
                "main": "#bf5000",
              },
              "white": Object {
                "main": "#FFFFFF",
              },
            },
            "props": Object {},
            "shadows": Array [
              "none",
              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": [Function],
            "status": Object {
              "danger": "#f44336",
              "warning": "#ff9800",
            },
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.5,
              },
              "body2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 300,
                "letterSpacing": "0.01071em",
                "lineHeight": 1.43,
              },
              "button": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.02857em",
                "lineHeight": 1.75,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.03333em",
                "lineHeight": 1.66,
              },
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": 14,
              "fontWeightBold": 700,
              "fontWeightLight": 200,
              "fontWeightMedium": 400,
              "fontWeightRegular": 300,
              "h1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "6rem",
                "fontWeight": 200,
                "letterSpacing": "-0.01562em",
                "lineHeight": 1.167,
              },
              "h2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 200,
                "letterSpacing": "-0.00833em",
                "lineHeight": 1.2,
              },
              "h3": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.167,
              },
              "h4": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 300,
                "letterSpacing": "0.00735em",
                "lineHeight": 1.235,
              },
              "h5": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.334,
              },
              "h6": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.25rem",
                "fontWeight": 400,
                "letterSpacing": "0.0075em",
                "lineHeight": 1.6,
              },
              "htmlFontSize": 16,
              "overline": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.08333em",
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "round": [Function],
              "subtitle1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.00714em",
                "lineHeight": 1.57,
              },
              "suppressDeprecationWarnings": true,
              "useNextVariants": true,
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "speedDial": 1050,
              "tooltip": 1500,
            },
            Symbol(mui.nested): false,
          }
        }
      >
        <MuiPickersUtilsProvider
          utils={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
        >
          <AutoCompleteAsyncField
            MenuItemComponent={[Function]}
            allowFreeText={false}
            async={false}
            category={null}
            classes={
              Object {
                "container": "container",
                "inputRoot": "inputRoot",
                "paper": "paper",
                "root": "root",
              }
            }
            disabled={false}
            error={false}
            filter={[Function]}
            floatingLabelText=""
            hintText={null}
            itemToString={[MockFunction]}
            itemsList={Array []}
            itemsListLoading={false}
            loadSuggestions={
              [MockFunction] {
                "calls": Array [
                  Array [
                    null,
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              }
            }
            maxResults={7}
            onChange={[MockFunction]}
            openOnFocus={false}
            required={false}
            selectedValue={null}
            showClear={false}
          >
            <div
              className="root"
            >
              <label
                hidden={true}
                id="autosuggest-label"
              />
              <Downshift
                aria-label="autosuggest"
                defaultHighlightedIndex={null}
                defaultInputValue=""
                defaultIsOpen={false}
                defaultSelectedItem={null}
                environment={[Window]}
                getA11yStatusMessage={[Function]}
                id="autosuggest"
                itemToString={[MockFunction]}
                onChange={[MockFunction]}
                onInputValueChange={[Function]}
                onOuterClick={[Function]}
                onSelect={[Function]}
                onStateChange={[Function]}
                onUserAction={[Function]}
                scrollIntoView={[Function]}
                selectedItemChanged={[Function]}
                stateReducer={[Function]}
                suppressRefError={false}
              >
                <div
                  aria-expanded={false}
                  aria-haspopup="listbox"
                  aria-labelledby="autosuggest-label"
                  aria-owns={null}
                  className="container"
                  role="combobox"
                >
                  <WithStyles(ForwardRef(Grid))
                    alignContent="flex-end"
                    alignItems="flex-end"
                    container={true}
                    spacing={2}
                  >
                    <ForwardRef(Grid)
                      alignContent="flex-end"
                      alignItems="flex-end"
                      classes={
                        Object {
                          "align-content-xs-center": "MuiGrid-align-content-xs-center",
                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                          "align-items-xs-center": "MuiGrid-align-items-xs-center",
                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                          "container": "MuiGrid-container",
                          "direction-xs-column": "MuiGrid-direction-xs-column",
                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                          "grid-lg-1": "MuiGrid-grid-lg-1",
                          "grid-lg-10": "MuiGrid-grid-lg-10",
                          "grid-lg-11": "MuiGrid-grid-lg-11",
                          "grid-lg-12": "MuiGrid-grid-lg-12",
                          "grid-lg-2": "MuiGrid-grid-lg-2",
                          "grid-lg-3": "MuiGrid-grid-lg-3",
                          "grid-lg-4": "MuiGrid-grid-lg-4",
                          "grid-lg-5": "MuiGrid-grid-lg-5",
                          "grid-lg-6": "MuiGrid-grid-lg-6",
                          "grid-lg-7": "MuiGrid-grid-lg-7",
                          "grid-lg-8": "MuiGrid-grid-lg-8",
                          "grid-lg-9": "MuiGrid-grid-lg-9",
                          "grid-lg-auto": "MuiGrid-grid-lg-auto",
                          "grid-lg-true": "MuiGrid-grid-lg-true",
                          "grid-md-1": "MuiGrid-grid-md-1",
                          "grid-md-10": "MuiGrid-grid-md-10",
                          "grid-md-11": "MuiGrid-grid-md-11",
                          "grid-md-12": "MuiGrid-grid-md-12",
                          "grid-md-2": "MuiGrid-grid-md-2",
                          "grid-md-3": "MuiGrid-grid-md-3",
                          "grid-md-4": "MuiGrid-grid-md-4",
                          "grid-md-5": "MuiGrid-grid-md-5",
                          "grid-md-6": "MuiGrid-grid-md-6",
                          "grid-md-7": "MuiGrid-grid-md-7",
                          "grid-md-8": "MuiGrid-grid-md-8",
                          "grid-md-9": "MuiGrid-grid-md-9",
                          "grid-md-auto": "MuiGrid-grid-md-auto",
                          "grid-md-true": "MuiGrid-grid-md-true",
                          "grid-sm-1": "MuiGrid-grid-sm-1",
                          "grid-sm-10": "MuiGrid-grid-sm-10",
                          "grid-sm-11": "MuiGrid-grid-sm-11",
                          "grid-sm-12": "MuiGrid-grid-sm-12",
                          "grid-sm-2": "MuiGrid-grid-sm-2",
                          "grid-sm-3": "MuiGrid-grid-sm-3",
                          "grid-sm-4": "MuiGrid-grid-sm-4",
                          "grid-sm-5": "MuiGrid-grid-sm-5",
                          "grid-sm-6": "MuiGrid-grid-sm-6",
                          "grid-sm-7": "MuiGrid-grid-sm-7",
                          "grid-sm-8": "MuiGrid-grid-sm-8",
                          "grid-sm-9": "MuiGrid-grid-sm-9",
                          "grid-sm-auto": "MuiGrid-grid-sm-auto",
                          "grid-sm-true": "MuiGrid-grid-sm-true",
                          "grid-xl-1": "MuiGrid-grid-xl-1",
                          "grid-xl-10": "MuiGrid-grid-xl-10",
                          "grid-xl-11": "MuiGrid-grid-xl-11",
                          "grid-xl-12": "MuiGrid-grid-xl-12",
                          "grid-xl-2": "MuiGrid-grid-xl-2",
                          "grid-xl-3": "MuiGrid-grid-xl-3",
                          "grid-xl-4": "MuiGrid-grid-xl-4",
                          "grid-xl-5": "MuiGrid-grid-xl-5",
                          "grid-xl-6": "MuiGrid-grid-xl-6",
                          "grid-xl-7": "MuiGrid-grid-xl-7",
                          "grid-xl-8": "MuiGrid-grid-xl-8",
                          "grid-xl-9": "MuiGrid-grid-xl-9",
                          "grid-xl-auto": "MuiGrid-grid-xl-auto",
                          "grid-xl-true": "MuiGrid-grid-xl-true",
                          "grid-xs-1": "MuiGrid-grid-xs-1",
                          "grid-xs-10": "MuiGrid-grid-xs-10",
                          "grid-xs-11": "MuiGrid-grid-xs-11",
                          "grid-xs-12": "MuiGrid-grid-xs-12",
                          "grid-xs-2": "MuiGrid-grid-xs-2",
                          "grid-xs-3": "MuiGrid-grid-xs-3",
                          "grid-xs-4": "MuiGrid-grid-xs-4",
                          "grid-xs-5": "MuiGrid-grid-xs-5",
                          "grid-xs-6": "MuiGrid-grid-xs-6",
                          "grid-xs-7": "MuiGrid-grid-xs-7",
                          "grid-xs-8": "MuiGrid-grid-xs-8",
                          "grid-xs-9": "MuiGrid-grid-xs-9",
                          "grid-xs-auto": "MuiGrid-grid-xs-auto",
                          "grid-xs-true": "MuiGrid-grid-xs-true",
                          "item": "MuiGrid-item",
                          "justify-xs-center": "MuiGrid-justify-xs-center",
                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                          "root": "MuiGrid-root",
                          "spacing-xs-1": "MuiGrid-spacing-xs-1",
                          "spacing-xs-10": "MuiGrid-spacing-xs-10",
                          "spacing-xs-2": "MuiGrid-spacing-xs-2",
                          "spacing-xs-3": "MuiGrid-spacing-xs-3",
                          "spacing-xs-4": "MuiGrid-spacing-xs-4",
                          "spacing-xs-5": "MuiGrid-spacing-xs-5",
                          "spacing-xs-6": "MuiGrid-spacing-xs-6",
                          "spacing-xs-7": "MuiGrid-spacing-xs-7",
                          "spacing-xs-8": "MuiGrid-spacing-xs-8",
                          "spacing-xs-9": "MuiGrid-spacing-xs-9",
                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                          "zeroMinWidth": "MuiGrid-zeroMinWidth",
                        }
                      }
                      container={true}
                      spacing={2}
                    >
                      <div
                        className="MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-2 MuiGrid-align-items-xs-flex-end MuiGrid-align-content-xs-flex-end"
                      >
                        <WithStyles(ForwardRef(Grid))
                          item={true}
                          xs={true}
                        >
                          <ForwardRef(Grid)
                            classes={
                              Object {
                                "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                "container": "MuiGrid-container",
                                "direction-xs-column": "MuiGrid-direction-xs-column",
                                "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                "grid-lg-1": "MuiGrid-grid-lg-1",
                                "grid-lg-10": "MuiGrid-grid-lg-10",
                                "grid-lg-11": "MuiGrid-grid-lg-11",
                                "grid-lg-12": "MuiGrid-grid-lg-12",
                                "grid-lg-2": "MuiGrid-grid-lg-2",
                                "grid-lg-3": "MuiGrid-grid-lg-3",
                                "grid-lg-4": "MuiGrid-grid-lg-4",
                                "grid-lg-5": "MuiGrid-grid-lg-5",
                                "grid-lg-6": "MuiGrid-grid-lg-6",
                                "grid-lg-7": "MuiGrid-grid-lg-7",
                                "grid-lg-8": "MuiGrid-grid-lg-8",
                                "grid-lg-9": "MuiGrid-grid-lg-9",
                                "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                "grid-lg-true": "MuiGrid-grid-lg-true",
                                "grid-md-1": "MuiGrid-grid-md-1",
                                "grid-md-10": "MuiGrid-grid-md-10",
                                "grid-md-11": "MuiGrid-grid-md-11",
                                "grid-md-12": "MuiGrid-grid-md-12",
                                "grid-md-2": "MuiGrid-grid-md-2",
                                "grid-md-3": "MuiGrid-grid-md-3",
                                "grid-md-4": "MuiGrid-grid-md-4",
                                "grid-md-5": "MuiGrid-grid-md-5",
                                "grid-md-6": "MuiGrid-grid-md-6",
                                "grid-md-7": "MuiGrid-grid-md-7",
                                "grid-md-8": "MuiGrid-grid-md-8",
                                "grid-md-9": "MuiGrid-grid-md-9",
                                "grid-md-auto": "MuiGrid-grid-md-auto",
                                "grid-md-true": "MuiGrid-grid-md-true",
                                "grid-sm-1": "MuiGrid-grid-sm-1",
                                "grid-sm-10": "MuiGrid-grid-sm-10",
                                "grid-sm-11": "MuiGrid-grid-sm-11",
                                "grid-sm-12": "MuiGrid-grid-sm-12",
                                "grid-sm-2": "MuiGrid-grid-sm-2",
                                "grid-sm-3": "MuiGrid-grid-sm-3",
                                "grid-sm-4": "MuiGrid-grid-sm-4",
                                "grid-sm-5": "MuiGrid-grid-sm-5",
                                "grid-sm-6": "MuiGrid-grid-sm-6",
                                "grid-sm-7": "MuiGrid-grid-sm-7",
                                "grid-sm-8": "MuiGrid-grid-sm-8",
                                "grid-sm-9": "MuiGrid-grid-sm-9",
                                "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                "grid-sm-true": "MuiGrid-grid-sm-true",
                                "grid-xl-1": "MuiGrid-grid-xl-1",
                                "grid-xl-10": "MuiGrid-grid-xl-10",
                                "grid-xl-11": "MuiGrid-grid-xl-11",
                                "grid-xl-12": "MuiGrid-grid-xl-12",
                                "grid-xl-2": "MuiGrid-grid-xl-2",
                                "grid-xl-3": "MuiGrid-grid-xl-3",
                                "grid-xl-4": "MuiGrid-grid-xl-4",
                                "grid-xl-5": "MuiGrid-grid-xl-5",
                                "grid-xl-6": "MuiGrid-grid-xl-6",
                                "grid-xl-7": "MuiGrid-grid-xl-7",
                                "grid-xl-8": "MuiGrid-grid-xl-8",
                                "grid-xl-9": "MuiGrid-grid-xl-9",
                                "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                "grid-xl-true": "MuiGrid-grid-xl-true",
                                "grid-xs-1": "MuiGrid-grid-xs-1",
                                "grid-xs-10": "MuiGrid-grid-xs-10",
                                "grid-xs-11": "MuiGrid-grid-xs-11",
                                "grid-xs-12": "MuiGrid-grid-xs-12",
                                "grid-xs-2": "MuiGrid-grid-xs-2",
                                "grid-xs-3": "MuiGrid-grid-xs-3",
                                "grid-xs-4": "MuiGrid-grid-xs-4",
                                "grid-xs-5": "MuiGrid-grid-xs-5",
                                "grid-xs-6": "MuiGrid-grid-xs-6",
                                "grid-xs-7": "MuiGrid-grid-xs-7",
                                "grid-xs-8": "MuiGrid-grid-xs-8",
                                "grid-xs-9": "MuiGrid-grid-xs-9",
                                "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                "grid-xs-true": "MuiGrid-grid-xs-true",
                                "item": "MuiGrid-item",
                                "justify-xs-center": "MuiGrid-justify-xs-center",
                                "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                "root": "MuiGrid-root",
                                "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                "zeroMinWidth": "MuiGrid-zeroMinWidth",
                              }
                            }
                            item={true}
                            xs={true}
                          >
                            <div
                              className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-true"
                            >
                              <WithStyles(TextFieldWrapper)
                                InputProps={
                                  Object {
                                    "aria-activedescendant": null,
                                    "aria-autocomplete": "list",
                                    "aria-controls": null,
                                    "aria-labelledby": "autosuggest-label",
                                    "autoComplete": "off",
                                    "classes": Object {
                                      "root": "inputRoot",
                                    },
                                    "id": "autosuggest-input",
                                    "inputRef": [Function],
                                    "onBlur": [Function],
                                    "onChange": [Function],
                                    "onKeyDown": [Function],
                                    "value": "",
                                  }
                                }
                                disabled={false}
                                error={false}
                                errorText=""
                                fullWidth={true}
                                id="autosuggest-input"
                                label="autosuggest"
                                placeholder={null}
                                required={false}
                                value=""
                              >
                                <TextFieldWrapper
                                  InputProps={
                                    Object {
                                      "aria-activedescendant": null,
                                      "aria-autocomplete": "list",
                                      "aria-controls": null,
                                      "aria-labelledby": "autosuggest-label",
                                      "autoComplete": "off",
                                      "classes": Object {
                                        "root": "inputRoot",
                                      },
                                      "id": "autosuggest-input",
                                      "inputRef": [Function],
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onKeyDown": [Function],
                                      "value": "",
                                    }
                                  }
                                  classes={Object {}}
                                  disabled={false}
                                  error={false}
                                  errorText=""
                                  fullWidth={true}
                                  id="autosuggest-input"
                                  label="autosuggest"
                                  placeholder={null}
                                  required={false}
                                  value=""
                                >
                                  <WithStyles(ForwardRef(TextField))
                                    InputLabelProps={
                                      Object {
                                        "hidden": false,
                                        "htmlFor": "autosuggest-input",
                                        "id": "autosuggest-input-label",
                                        "shrink": undefined,
                                      }
                                    }
                                    InputProps={
                                      Object {
                                        "aria-activedescendant": null,
                                        "aria-autocomplete": "list",
                                        "aria-controls": null,
                                        "aria-labelledby": "autosuggest-label",
                                        "autoComplete": "off",
                                        "classes": Object {
                                          "root": "inputRoot",
                                        },
                                        "id": "autosuggest-input",
                                        "inputRef": [Function],
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "onKeyDown": [Function],
                                        "value": "",
                                      }
                                    }
                                    classes={Object {}}
                                    disabled={false}
                                    error={false}
                                    fullWidth={true}
                                    id="autosuggest-input"
                                    inputProps={
                                      Object {
                                        "aria-label": "autosuggest",
                                        "aria-labelledby": "autosuggest-input-label",
                                        "id": "autosuggest-input",
                                        "label": "autosuggest",
                                      }
                                    }
                                    label="autosuggest"
                                    placeholder={null}
                                    required={false}
                                    value=""
                                  >
                                    <ForwardRef(TextField)
                                      InputLabelProps={
                                        Object {
                                          "hidden": false,
                                          "htmlFor": "autosuggest-input",
                                          "id": "autosuggest-input-label",
                                          "shrink": undefined,
                                        }
                                      }
                                      InputProps={
                                        Object {
                                          "aria-activedescendant": null,
                                          "aria-autocomplete": "list",
                                          "aria-controls": null,
                                          "aria-labelledby": "autosuggest-label",
                                          "autoComplete": "off",
                                          "classes": Object {
                                            "root": "inputRoot",
                                          },
                                          "id": "autosuggest-input",
                                          "inputRef": [Function],
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onKeyDown": [Function],
                                          "value": "",
                                        }
                                      }
                                      classes={
                                        Object {
                                          "root": "MuiTextField-root",
                                        }
                                      }
                                      disabled={false}
                                      error={false}
                                      fullWidth={true}
                                      id="autosuggest-input"
                                      inputProps={
                                        Object {
                                          "aria-label": "autosuggest",
                                          "aria-labelledby": "autosuggest-input-label",
                                          "id": "autosuggest-input",
                                          "label": "autosuggest",
                                        }
                                      }
                                      label="autosuggest"
                                      placeholder={null}
                                      required={false}
                                      value=""
                                    >
                                      <WithStyles(ForwardRef(FormControl))
                                        className="MuiTextField-root"
                                        color="primary"
                                        disabled={false}
                                        error={false}
                                        fullWidth={true}
                                        required={false}
                                        variant="standard"
                                      >
                                        <ForwardRef(FormControl)
                                          className="MuiTextField-root"
                                          classes={
                                            Object {
                                              "fullWidth": "MuiFormControl-fullWidth",
                                              "marginDense": "MuiFormControl-marginDense",
                                              "marginNormal": "MuiFormControl-marginNormal",
                                              "root": "MuiFormControl-root",
                                            }
                                          }
                                          color="primary"
                                          disabled={false}
                                          error={false}
                                          fullWidth={true}
                                          required={false}
                                          variant="standard"
                                        >
                                          <div
                                            className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                          >
                                            <WithStyles(ForwardRef(InputLabel))
                                              hidden={false}
                                              htmlFor="autosuggest-input"
                                              id="autosuggest-input-label"
                                            >
                                              <ForwardRef(InputLabel)
                                                classes={
                                                  Object {
                                                    "animated": "MuiInputLabel-animated",
                                                    "asterisk": "MuiInputLabel-asterisk",
                                                    "disabled": "Mui-disabled",
                                                    "error": "Mui-error",
                                                    "filled": "MuiInputLabel-filled",
                                                    "focused": "Mui-focused",
                                                    "formControl": "MuiInputLabel-formControl",
                                                    "marginDense": "MuiInputLabel-marginDense",
                                                    "outlined": "MuiInputLabel-outlined",
                                                    "required": "Mui-required",
                                                    "root": "MuiInputLabel-root",
                                                    "shrink": "MuiInputLabel-shrink",
                                                  }
                                                }
                                                hidden={false}
                                                htmlFor="autosuggest-input"
                                                id="autosuggest-input-label"
                                              >
                                                <WithStyles(ForwardRef(FormLabel))
                                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                  classes={
                                                    Object {
                                                      "asterisk": "MuiInputLabel-asterisk",
                                                      "disabled": "Mui-disabled",
                                                      "error": "Mui-error",
                                                      "focused": "Mui-focused",
                                                      "required": "Mui-required",
                                                    }
                                                  }
                                                  data-shrink={false}
                                                  hidden={false}
                                                  htmlFor="autosuggest-input"
                                                  id="autosuggest-input-label"
                                                >
                                                  <ForwardRef(FormLabel)
                                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                    classes={
                                                      Object {
                                                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                        "colorSecondary": "MuiFormLabel-colorSecondary",
                                                        "disabled": "Mui-disabled Mui-disabled",
                                                        "error": "Mui-error Mui-error",
                                                        "filled": "MuiFormLabel-filled",
                                                        "focused": "Mui-focused Mui-focused",
                                                        "required": "Mui-required Mui-required",
                                                        "root": "MuiFormLabel-root",
                                                      }
                                                    }
                                                    data-shrink={false}
                                                    hidden={false}
                                                    htmlFor="autosuggest-input"
                                                    id="autosuggest-input-label"
                                                  >
                                                    <label
                                                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                      data-shrink={false}
                                                      hidden={false}
                                                      htmlFor="autosuggest-input"
                                                      id="autosuggest-input-label"
                                                    >
                                                      autosuggest
                                                    </label>
                                                  </ForwardRef(FormLabel)>
                                                </WithStyles(ForwardRef(FormLabel))>
                                              </ForwardRef(InputLabel)>
                                            </WithStyles(ForwardRef(InputLabel))>
                                            <WithStyles(ForwardRef(Input))
                                              aria-activedescendant={null}
                                              aria-autocomplete="list"
                                              aria-controls={null}
                                              aria-labelledby="autosuggest-label"
                                              autoComplete="off"
                                              autoFocus={false}
                                              classes={
                                                Object {
                                                  "root": "inputRoot",
                                                }
                                              }
                                              fullWidth={true}
                                              id="autosuggest-input"
                                              inputProps={
                                                Object {
                                                  "aria-label": "autosuggest",
                                                  "aria-labelledby": "autosuggest-input-label",
                                                  "id": "autosuggest-input",
                                                  "label": "autosuggest",
                                                }
                                              }
                                              inputRef={[Function]}
                                              multiline={false}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder={null}
                                              value=""
                                            >
                                              <ForwardRef(Input)
                                                aria-activedescendant={null}
                                                aria-autocomplete="list"
                                                aria-controls={null}
                                                aria-labelledby="autosuggest-label"
                                                autoComplete="off"
                                                autoFocus={false}
                                                classes={
                                                  Object {
                                                    "colorSecondary": "MuiInput-colorSecondary",
                                                    "disabled": "Mui-disabled",
                                                    "error": "Mui-error",
                                                    "focused": "Mui-focused",
                                                    "formControl": "MuiInput-formControl",
                                                    "fullWidth": "MuiInput-fullWidth",
                                                    "input": "MuiInput-input",
                                                    "inputMarginDense": "MuiInput-inputMarginDense",
                                                    "inputMultiline": "MuiInput-inputMultiline",
                                                    "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                    "marginDense": "MuiInput-marginDense",
                                                    "multiline": "MuiInput-multiline",
                                                    "root": "MuiInput-root inputRoot",
                                                    "underline": "MuiInput-underline",
                                                  }
                                                }
                                                fullWidth={true}
                                                id="autosuggest-input"
                                                inputProps={
                                                  Object {
                                                    "aria-label": "autosuggest",
                                                    "aria-labelledby": "autosuggest-input-label",
                                                    "id": "autosuggest-input",
                                                    "label": "autosuggest",
                                                  }
                                                }
                                                inputRef={[Function]}
                                                multiline={false}
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder={null}
                                                value=""
                                              >
                                                <WithStyles(ForwardRef(InputBase))
                                                  aria-activedescendant={null}
                                                  aria-autocomplete="list"
                                                  aria-controls={null}
                                                  aria-labelledby="autosuggest-label"
                                                  autoComplete="off"
                                                  autoFocus={false}
                                                  classes={
                                                    Object {
                                                      "colorSecondary": "MuiInput-colorSecondary",
                                                      "disabled": "Mui-disabled",
                                                      "error": "Mui-error",
                                                      "focused": "Mui-focused",
                                                      "formControl": "MuiInput-formControl",
                                                      "fullWidth": "MuiInput-fullWidth",
                                                      "input": "MuiInput-input",
                                                      "inputMarginDense": "MuiInput-inputMarginDense",
                                                      "inputMultiline": "MuiInput-inputMultiline",
                                                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                      "marginDense": "MuiInput-marginDense",
                                                      "multiline": "MuiInput-multiline",
                                                      "root": "MuiInput-root inputRoot MuiInput-underline",
                                                      "underline": null,
                                                    }
                                                  }
                                                  fullWidth={true}
                                                  id="autosuggest-input"
                                                  inputComponent="input"
                                                  inputProps={
                                                    Object {
                                                      "aria-label": "autosuggest",
                                                      "aria-labelledby": "autosuggest-input-label",
                                                      "id": "autosuggest-input",
                                                      "label": "autosuggest",
                                                    }
                                                  }
                                                  inputRef={[Function]}
                                                  multiline={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder={null}
                                                  type="text"
                                                  value=""
                                                >
                                                  <ForwardRef(InputBase)
                                                    aria-activedescendant={null}
                                                    aria-autocomplete="list"
                                                    aria-controls={null}
                                                    aria-labelledby="autosuggest-label"
                                                    autoComplete="off"
                                                    autoFocus={false}
                                                    classes={
                                                      Object {
                                                        "adornedEnd": "MuiInputBase-adornedEnd",
                                                        "adornedStart": "MuiInputBase-adornedStart",
                                                        "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                        "disabled": "Mui-disabled Mui-disabled",
                                                        "error": "Mui-error Mui-error",
                                                        "focused": "Mui-focused Mui-focused",
                                                        "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                        "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                        "input": "MuiInputBase-input MuiInput-input",
                                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                        "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                        "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                        "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                        "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                        "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                        "root": "MuiInputBase-root MuiInput-root inputRoot MuiInput-underline",
                                                      }
                                                    }
                                                    fullWidth={true}
                                                    id="autosuggest-input"
                                                    inputComponent="input"
                                                    inputProps={
                                                      Object {
                                                        "aria-label": "autosuggest",
                                                        "aria-labelledby": "autosuggest-input-label",
                                                        "id": "autosuggest-input",
                                                        "label": "autosuggest",
                                                      }
                                                    }
                                                    inputRef={[Function]}
                                                    multiline={false}
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    placeholder={null}
                                                    type="text"
                                                    value=""
                                                  >
                                                    <div
                                                      aria-activedescendant={null}
                                                      aria-autocomplete="list"
                                                      aria-controls={null}
                                                      aria-labelledby="autosuggest-label"
                                                      className="MuiInputBase-root MuiInput-root inputRoot MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                                                      onClick={[Function]}
                                                    >
                                                      <input
                                                        aria-invalid={false}
                                                        aria-label="autosuggest"
                                                        aria-labelledby="autosuggest-input-label"
                                                        autoComplete="off"
                                                        autoFocus={false}
                                                        className="MuiInputBase-input MuiInput-input"
                                                        disabled={false}
                                                        id="autosuggest-input"
                                                        label="autosuggest"
                                                        onAnimationStart={[Function]}
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        placeholder={null}
                                                        required={false}
                                                        type="text"
                                                        value=""
                                                      />
                                                    </div>
                                                  </ForwardRef(InputBase)>
                                                </WithStyles(ForwardRef(InputBase))>
                                              </ForwardRef(Input)>
                                            </WithStyles(ForwardRef(Input))>
                                          </div>
                                        </ForwardRef(FormControl)>
                                      </WithStyles(ForwardRef(FormControl))>
                                    </ForwardRef(TextField)>
                                  </WithStyles(ForwardRef(TextField))>
                                </TextFieldWrapper>
                              </WithStyles(TextFieldWrapper)>
                            </div>
                          </ForwardRef(Grid)>
                        </WithStyles(ForwardRef(Grid))>
                      </div>
                    </ForwardRef(Grid)>
                  </WithStyles(ForwardRef(Grid))>
                </div>
              </Downshift>
            </div>
          </AutoCompleteAsyncField>
        </MuiPickersUtilsProvider>
      </ThemeProvider>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`AutoCompleteAsyncField component should render default MenuItemComponent 1`] = `
<ForwardRef(WithStyles)
  button={true}
  selected={true}
  style={
    Object {
      "fontWeight": 400,
      "height": "auto",
      "whiteSpace": "normal",
    }
  }
>
  <MenuItemComponent
    suggestion={
      Object {
        "value": "Testing menu item",
      }
    }
  />
</ForwardRef(WithStyles)>
`;

exports[`AutoCompleteAsyncField component should render default MenuItemComponent 2`] = `
<div
  className="root"
>
  <label
    hidden={true}
    id="autosuggest-label"
  />
  <Downshift
    aria-label="autosuggest"
    defaultHighlightedIndex={null}
    defaultInputValue=""
    defaultIsOpen={false}
    defaultSelectedItem={null}
    environment={[Window]}
    getA11yStatusMessage={[Function]}
    id="autosuggest"
    itemToString={[MockFunction]}
    onChange={[MockFunction]}
    onInputValueChange={[Function]}
    onOuterClick={[Function]}
    onSelect={[Function]}
    onStateChange={[Function]}
    onUserAction={[Function]}
    scrollIntoView={[Function]}
    selectedItemChanged={[Function]}
    stateReducer={[Function]}
    suppressRefError={false}
  >
    <Component />
  </Downshift>
</div>
`;

exports[`AutoCompleteAsyncField component should render default MenuItemComponent with array 1`] = `
<ForwardRef(WithStyles)
  button={true}
  selected={true}
  style={
    Object {
      "fontWeight": 400,
      "height": "auto",
      "whiteSpace": "normal",
    }
  }
>
  <MenuItemComponent
    suggestion={
      Object {
        "value": "Testing menu item",
      }
    }
  />
</ForwardRef(WithStyles)>
`;

exports[`AutoCompleteAsyncField component should render default MenuItemComponent with array 2`] = `
<div
  className="root"
>
  <label
    hidden={true}
    id="autosuggest-label"
  />
  <Downshift
    aria-label="autosuggest"
    defaultHighlightedIndex={null}
    defaultInputValue=""
    defaultIsOpen={false}
    defaultSelectedItem={null}
    environment={[Window]}
    getA11yStatusMessage={[Function]}
    id="autosuggest"
    itemToString={[MockFunction]}
    onChange={[MockFunction]}
    onInputValueChange={[Function]}
    onOuterClick={[Function]}
    onSelect={[Function]}
    onStateChange={[Function]}
    onUserAction={[Function]}
    scrollIntoView={[Function]}
    selectedItemChanged={[Function]}
    stateReducer={[Function]}
    suppressRefError={false}
  >
    <Component />
  </Downshift>
</div>
`;

exports[`AutoCompleteAsyncField component should render items list on focusing on input 1`] = `
<Provider
  store={
    Object {
      "dispatch": [MockFunction],
      "getState": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
        ],
      },
      "subscribe": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ThemeProvider
        theme={
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "up": [Function],
              "values": Object {
                "lg": 1280,
                "md": 960,
                "sm": 600,
                "xl": 1920,
                "xs": 0,
              },
              "width": [Function],
            },
            "direction": "ltr",
            "graphs": Object {
              "color1": "#d72865",
              "color2": "#1e7d94",
              "color3": "#49075E",
              "color4": "#468fcc",
              "color5": "#f28620",
              "color6": "#333333",
              "color7": "#595959",
            },
            "hexToRGBA": [Function],
            "mixins": Object {
              "gutters": [Function],
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "overrides": Object {
              "MUIDataTable": Object {
                "paper": Object {
                  "boxShadow": "none",
                  "margin": 0,
                  "padding": 0,
                },
              },
              "MuiFormLabel": Object {
                "root": Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                  "whiteSpace": "nowrap",
                  "width": "100%",
                },
              },
              "MuiMenuItem": Object {
                "root": Object {
                  "&$selected": Object {
                    "backgroundColor": "#4085C6 !important",
                    "color": "#FFFFFF",
                  },
                },
              },
            },
            "palette": Object {
              "accent": Object {
                "dark": "#2a557d",
                "light": "#54acff",
                "main": "#316799",
              },
              "action": Object {
                "activatedOpacity": 0.12,
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "disabledOpacity": 0.38,
                "focus": "rgba(0, 0, 0, 0.12)",
                "focusOpacity": 0.12,
                "hover": "rgba(0, 0, 0, 0.04)",
                "hoverOpacity": 0.04,
                "selected": "rgba(0, 0, 0, 0.08)",
                "selectedOpacity": 0.08,
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fafafa",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "#790000",
                "light": "#ff0000",
                "main": "#c80000",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#f5f5f5",
                "200": "#eeeeee",
                "300": "#e0e0e0",
                "400": "#bdbdbd",
                "50": "#fafafa",
                "500": "#9e9e9e",
                "600": "#757575",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#d5d5d5",
                "A200": "#aaaaaa",
                "A400": "#303030",
                "A700": "#616161",
              },
              "info": Object {
                "contrastText": "#fff",
                "dark": "#1976d2",
                "light": "#64b5f6",
                "main": "#2196f3",
              },
              "primary": Object {
                "contrastText": "#fff",
                "dark": "#3b1a59",
                "gradient": Object {
                  "diagonal": Object {
                    "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                  "horizontal": Object {
                    "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                },
                "light": "#962A8B",
                "main": "#51247A",
              },
              "secondary": Object {
                "contrastText": "#fff",
                "dark": "#333333",
                "light": "#f2f2f2",
                "main": "#595959",
              },
              "success": Object {
                "contrastText": "#fff",
                "dark": "#005000",
                "light": "#00a700",
                "main": "#007200",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "hint": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.54)",
              },
              "tonalOffset": 0.2,
              "type": "light",
              "warning": Object {
                "contrastText": "#fff",
                "dark": "#542400",
                "light": "#ff9a57",
                "main": "#bf5000",
              },
              "white": Object {
                "main": "#FFFFFF",
              },
            },
            "props": Object {},
            "shadows": Array [
              "none",
              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": [Function],
            "status": Object {
              "danger": "#f44336",
              "warning": "#ff9800",
            },
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.5,
              },
              "body2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 300,
                "letterSpacing": "0.01071em",
                "lineHeight": 1.43,
              },
              "button": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.02857em",
                "lineHeight": 1.75,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.03333em",
                "lineHeight": 1.66,
              },
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": 14,
              "fontWeightBold": 700,
              "fontWeightLight": 200,
              "fontWeightMedium": 400,
              "fontWeightRegular": 300,
              "h1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "6rem",
                "fontWeight": 200,
                "letterSpacing": "-0.01562em",
                "lineHeight": 1.167,
              },
              "h2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 200,
                "letterSpacing": "-0.00833em",
                "lineHeight": 1.2,
              },
              "h3": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.167,
              },
              "h4": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 300,
                "letterSpacing": "0.00735em",
                "lineHeight": 1.235,
              },
              "h5": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.334,
              },
              "h6": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.25rem",
                "fontWeight": 400,
                "letterSpacing": "0.0075em",
                "lineHeight": 1.6,
              },
              "htmlFontSize": 16,
              "overline": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.08333em",
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "round": [Function],
              "subtitle1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.00714em",
                "lineHeight": 1.57,
              },
              "suppressDeprecationWarnings": true,
              "useNextVariants": true,
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "speedDial": 1050,
              "tooltip": 1500,
            },
            Symbol(mui.nested): false,
          }
        }
      >
        <MuiPickersUtilsProvider
          utils={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
        >
          <AutoCompleteAsyncField
            MenuItemComponent={[Function]}
            allowFreeText={false}
            async={false}
            category={null}
            classes={
              Object {
                "container": "container",
                "inputRoot": "inputRoot",
                "paper": "paper",
                "root": "root",
              }
            }
            disabled={false}
            error={false}
            filter={[Function]}
            floatingLabelText="Test"
            hideLabel={true}
            hintText={null}
            itemToString={[MockFunction]}
            itemsList={
              Array [
                Object {
                  "id": 1,
                  "value": "test",
                },
                Object {
                  "id": 2,
                  "value": "testing",
                },
                Object {
                  "id": 3,
                  "value": "tested",
                },
              ]
            }
            itemsListLoading={false}
            loadSuggestions={
              [MockFunction] {
                "calls": Array [
                  Array [
                    null,
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              }
            }
            maxResults={7}
            onChange={[MockFunction]}
            openOnFocus={true}
            required={false}
            selectedValue={null}
            showClear={false}
          >
            <div
              className="root"
            >
              <label
                hidden={true}
                id="Test-label"
              >
                Test
              </label>
              <Downshift
                aria-label="Test"
                defaultHighlightedIndex={null}
                defaultInputValue=""
                defaultIsOpen={false}
                defaultSelectedItem={null}
                environment={[Window]}
                getA11yStatusMessage={[Function]}
                id="Test"
                itemToString={[MockFunction]}
                onChange={[MockFunction]}
                onInputValueChange={[Function]}
                onOuterClick={[Function]}
                onSelect={[Function]}
                onStateChange={[Function]}
                onUserAction={[Function]}
                scrollIntoView={[Function]}
                selectedItemChanged={[Function]}
                stateReducer={[Function]}
                suppressRefError={false}
              >
                <div
                  aria-expanded={false}
                  aria-haspopup="listbox"
                  aria-labelledby="Test-label"
                  aria-owns={null}
                  className="container"
                  role="combobox"
                >
                  <WithStyles(ForwardRef(Grid))
                    alignContent="flex-end"
                    alignItems="flex-end"
                    container={true}
                    spacing={2}
                  >
                    <ForwardRef(Grid)
                      alignContent="flex-end"
                      alignItems="flex-end"
                      classes={
                        Object {
                          "align-content-xs-center": "MuiGrid-align-content-xs-center",
                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                          "align-items-xs-center": "MuiGrid-align-items-xs-center",
                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                          "container": "MuiGrid-container",
                          "direction-xs-column": "MuiGrid-direction-xs-column",
                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                          "grid-lg-1": "MuiGrid-grid-lg-1",
                          "grid-lg-10": "MuiGrid-grid-lg-10",
                          "grid-lg-11": "MuiGrid-grid-lg-11",
                          "grid-lg-12": "MuiGrid-grid-lg-12",
                          "grid-lg-2": "MuiGrid-grid-lg-2",
                          "grid-lg-3": "MuiGrid-grid-lg-3",
                          "grid-lg-4": "MuiGrid-grid-lg-4",
                          "grid-lg-5": "MuiGrid-grid-lg-5",
                          "grid-lg-6": "MuiGrid-grid-lg-6",
                          "grid-lg-7": "MuiGrid-grid-lg-7",
                          "grid-lg-8": "MuiGrid-grid-lg-8",
                          "grid-lg-9": "MuiGrid-grid-lg-9",
                          "grid-lg-auto": "MuiGrid-grid-lg-auto",
                          "grid-lg-true": "MuiGrid-grid-lg-true",
                          "grid-md-1": "MuiGrid-grid-md-1",
                          "grid-md-10": "MuiGrid-grid-md-10",
                          "grid-md-11": "MuiGrid-grid-md-11",
                          "grid-md-12": "MuiGrid-grid-md-12",
                          "grid-md-2": "MuiGrid-grid-md-2",
                          "grid-md-3": "MuiGrid-grid-md-3",
                          "grid-md-4": "MuiGrid-grid-md-4",
                          "grid-md-5": "MuiGrid-grid-md-5",
                          "grid-md-6": "MuiGrid-grid-md-6",
                          "grid-md-7": "MuiGrid-grid-md-7",
                          "grid-md-8": "MuiGrid-grid-md-8",
                          "grid-md-9": "MuiGrid-grid-md-9",
                          "grid-md-auto": "MuiGrid-grid-md-auto",
                          "grid-md-true": "MuiGrid-grid-md-true",
                          "grid-sm-1": "MuiGrid-grid-sm-1",
                          "grid-sm-10": "MuiGrid-grid-sm-10",
                          "grid-sm-11": "MuiGrid-grid-sm-11",
                          "grid-sm-12": "MuiGrid-grid-sm-12",
                          "grid-sm-2": "MuiGrid-grid-sm-2",
                          "grid-sm-3": "MuiGrid-grid-sm-3",
                          "grid-sm-4": "MuiGrid-grid-sm-4",
                          "grid-sm-5": "MuiGrid-grid-sm-5",
                          "grid-sm-6": "MuiGrid-grid-sm-6",
                          "grid-sm-7": "MuiGrid-grid-sm-7",
                          "grid-sm-8": "MuiGrid-grid-sm-8",
                          "grid-sm-9": "MuiGrid-grid-sm-9",
                          "grid-sm-auto": "MuiGrid-grid-sm-auto",
                          "grid-sm-true": "MuiGrid-grid-sm-true",
                          "grid-xl-1": "MuiGrid-grid-xl-1",
                          "grid-xl-10": "MuiGrid-grid-xl-10",
                          "grid-xl-11": "MuiGrid-grid-xl-11",
                          "grid-xl-12": "MuiGrid-grid-xl-12",
                          "grid-xl-2": "MuiGrid-grid-xl-2",
                          "grid-xl-3": "MuiGrid-grid-xl-3",
                          "grid-xl-4": "MuiGrid-grid-xl-4",
                          "grid-xl-5": "MuiGrid-grid-xl-5",
                          "grid-xl-6": "MuiGrid-grid-xl-6",
                          "grid-xl-7": "MuiGrid-grid-xl-7",
                          "grid-xl-8": "MuiGrid-grid-xl-8",
                          "grid-xl-9": "MuiGrid-grid-xl-9",
                          "grid-xl-auto": "MuiGrid-grid-xl-auto",
                          "grid-xl-true": "MuiGrid-grid-xl-true",
                          "grid-xs-1": "MuiGrid-grid-xs-1",
                          "grid-xs-10": "MuiGrid-grid-xs-10",
                          "grid-xs-11": "MuiGrid-grid-xs-11",
                          "grid-xs-12": "MuiGrid-grid-xs-12",
                          "grid-xs-2": "MuiGrid-grid-xs-2",
                          "grid-xs-3": "MuiGrid-grid-xs-3",
                          "grid-xs-4": "MuiGrid-grid-xs-4",
                          "grid-xs-5": "MuiGrid-grid-xs-5",
                          "grid-xs-6": "MuiGrid-grid-xs-6",
                          "grid-xs-7": "MuiGrid-grid-xs-7",
                          "grid-xs-8": "MuiGrid-grid-xs-8",
                          "grid-xs-9": "MuiGrid-grid-xs-9",
                          "grid-xs-auto": "MuiGrid-grid-xs-auto",
                          "grid-xs-true": "MuiGrid-grid-xs-true",
                          "item": "MuiGrid-item",
                          "justify-xs-center": "MuiGrid-justify-xs-center",
                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                          "root": "MuiGrid-root",
                          "spacing-xs-1": "MuiGrid-spacing-xs-1",
                          "spacing-xs-10": "MuiGrid-spacing-xs-10",
                          "spacing-xs-2": "MuiGrid-spacing-xs-2",
                          "spacing-xs-3": "MuiGrid-spacing-xs-3",
                          "spacing-xs-4": "MuiGrid-spacing-xs-4",
                          "spacing-xs-5": "MuiGrid-spacing-xs-5",
                          "spacing-xs-6": "MuiGrid-spacing-xs-6",
                          "spacing-xs-7": "MuiGrid-spacing-xs-7",
                          "spacing-xs-8": "MuiGrid-spacing-xs-8",
                          "spacing-xs-9": "MuiGrid-spacing-xs-9",
                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                          "zeroMinWidth": "MuiGrid-zeroMinWidth",
                        }
                      }
                      container={true}
                      spacing={2}
                    >
                      <div
                        className="MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-2 MuiGrid-align-items-xs-flex-end MuiGrid-align-content-xs-flex-end"
                      >
                        <WithStyles(ForwardRef(Grid))
                          item={true}
                          xs={true}
                        >
                          <ForwardRef(Grid)
                            classes={
                              Object {
                                "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                "container": "MuiGrid-container",
                                "direction-xs-column": "MuiGrid-direction-xs-column",
                                "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                "grid-lg-1": "MuiGrid-grid-lg-1",
                                "grid-lg-10": "MuiGrid-grid-lg-10",
                                "grid-lg-11": "MuiGrid-grid-lg-11",
                                "grid-lg-12": "MuiGrid-grid-lg-12",
                                "grid-lg-2": "MuiGrid-grid-lg-2",
                                "grid-lg-3": "MuiGrid-grid-lg-3",
                                "grid-lg-4": "MuiGrid-grid-lg-4",
                                "grid-lg-5": "MuiGrid-grid-lg-5",
                                "grid-lg-6": "MuiGrid-grid-lg-6",
                                "grid-lg-7": "MuiGrid-grid-lg-7",
                                "grid-lg-8": "MuiGrid-grid-lg-8",
                                "grid-lg-9": "MuiGrid-grid-lg-9",
                                "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                "grid-lg-true": "MuiGrid-grid-lg-true",
                                "grid-md-1": "MuiGrid-grid-md-1",
                                "grid-md-10": "MuiGrid-grid-md-10",
                                "grid-md-11": "MuiGrid-grid-md-11",
                                "grid-md-12": "MuiGrid-grid-md-12",
                                "grid-md-2": "MuiGrid-grid-md-2",
                                "grid-md-3": "MuiGrid-grid-md-3",
                                "grid-md-4": "MuiGrid-grid-md-4",
                                "grid-md-5": "MuiGrid-grid-md-5",
                                "grid-md-6": "MuiGrid-grid-md-6",
                                "grid-md-7": "MuiGrid-grid-md-7",
                                "grid-md-8": "MuiGrid-grid-md-8",
                                "grid-md-9": "MuiGrid-grid-md-9",
                                "grid-md-auto": "MuiGrid-grid-md-auto",
                                "grid-md-true": "MuiGrid-grid-md-true",
                                "grid-sm-1": "MuiGrid-grid-sm-1",
                                "grid-sm-10": "MuiGrid-grid-sm-10",
                                "grid-sm-11": "MuiGrid-grid-sm-11",
                                "grid-sm-12": "MuiGrid-grid-sm-12",
                                "grid-sm-2": "MuiGrid-grid-sm-2",
                                "grid-sm-3": "MuiGrid-grid-sm-3",
                                "grid-sm-4": "MuiGrid-grid-sm-4",
                                "grid-sm-5": "MuiGrid-grid-sm-5",
                                "grid-sm-6": "MuiGrid-grid-sm-6",
                                "grid-sm-7": "MuiGrid-grid-sm-7",
                                "grid-sm-8": "MuiGrid-grid-sm-8",
                                "grid-sm-9": "MuiGrid-grid-sm-9",
                                "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                "grid-sm-true": "MuiGrid-grid-sm-true",
                                "grid-xl-1": "MuiGrid-grid-xl-1",
                                "grid-xl-10": "MuiGrid-grid-xl-10",
                                "grid-xl-11": "MuiGrid-grid-xl-11",
                                "grid-xl-12": "MuiGrid-grid-xl-12",
                                "grid-xl-2": "MuiGrid-grid-xl-2",
                                "grid-xl-3": "MuiGrid-grid-xl-3",
                                "grid-xl-4": "MuiGrid-grid-xl-4",
                                "grid-xl-5": "MuiGrid-grid-xl-5",
                                "grid-xl-6": "MuiGrid-grid-xl-6",
                                "grid-xl-7": "MuiGrid-grid-xl-7",
                                "grid-xl-8": "MuiGrid-grid-xl-8",
                                "grid-xl-9": "MuiGrid-grid-xl-9",
                                "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                "grid-xl-true": "MuiGrid-grid-xl-true",
                                "grid-xs-1": "MuiGrid-grid-xs-1",
                                "grid-xs-10": "MuiGrid-grid-xs-10",
                                "grid-xs-11": "MuiGrid-grid-xs-11",
                                "grid-xs-12": "MuiGrid-grid-xs-12",
                                "grid-xs-2": "MuiGrid-grid-xs-2",
                                "grid-xs-3": "MuiGrid-grid-xs-3",
                                "grid-xs-4": "MuiGrid-grid-xs-4",
                                "grid-xs-5": "MuiGrid-grid-xs-5",
                                "grid-xs-6": "MuiGrid-grid-xs-6",
                                "grid-xs-7": "MuiGrid-grid-xs-7",
                                "grid-xs-8": "MuiGrid-grid-xs-8",
                                "grid-xs-9": "MuiGrid-grid-xs-9",
                                "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                "grid-xs-true": "MuiGrid-grid-xs-true",
                                "item": "MuiGrid-item",
                                "justify-xs-center": "MuiGrid-justify-xs-center",
                                "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                "root": "MuiGrid-root",
                                "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                "zeroMinWidth": "MuiGrid-zeroMinWidth",
                              }
                            }
                            item={true}
                            xs={true}
                          >
                            <div
                              className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-true"
                            >
                              <WithStyles(TextFieldWrapper)
                                InputProps={
                                  Object {
                                    "aria-activedescendant": null,
                                    "aria-autocomplete": "list",
                                    "aria-controls": null,
                                    "aria-labelledby": "Test-label",
                                    "autoComplete": "off",
                                    "classes": Object {
                                      "root": "inputRoot",
                                    },
                                    "id": "Test-input",
                                    "inputRef": [Function],
                                    "onBlur": [Function],
                                    "onChange": [Function],
                                    "onKeyDown": [Function],
                                    "value": "",
                                  }
                                }
                                disabled={false}
                                error={false}
                                errorText=""
                                fullWidth={true}
                                id="Test-input"
                                placeholder={null}
                                required={false}
                                value=""
                              >
                                <TextFieldWrapper
                                  InputProps={
                                    Object {
                                      "aria-activedescendant": null,
                                      "aria-autocomplete": "list",
                                      "aria-controls": null,
                                      "aria-labelledby": "Test-label",
                                      "autoComplete": "off",
                                      "classes": Object {
                                        "root": "inputRoot",
                                      },
                                      "id": "Test-input",
                                      "inputRef": [Function],
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onKeyDown": [Function],
                                      "value": "",
                                    }
                                  }
                                  classes={Object {}}
                                  disabled={false}
                                  error={false}
                                  errorText=""
                                  fullWidth={true}
                                  id="Test-input"
                                  placeholder={null}
                                  required={false}
                                  value=""
                                >
                                  <WithStyles(ForwardRef(TextField))
                                    InputLabelProps={
                                      Object {
                                        "hidden": false,
                                        "htmlFor": "Test-input",
                                        "id": "Test-input-label",
                                        "shrink": undefined,
                                      }
                                    }
                                    InputProps={
                                      Object {
                                        "aria-activedescendant": null,
                                        "aria-autocomplete": "list",
                                        "aria-controls": null,
                                        "aria-labelledby": "Test-label",
                                        "autoComplete": "off",
                                        "classes": Object {
                                          "root": "inputRoot",
                                        },
                                        "id": "Test-input",
                                        "inputRef": [Function],
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "onKeyDown": [Function],
                                        "value": "",
                                      }
                                    }
                                    classes={Object {}}
                                    disabled={false}
                                    error={false}
                                    fullWidth={true}
                                    id="Test-input"
                                    inputProps={
                                      Object {
                                        "aria-label": undefined,
                                        "aria-labelledby": "Test-input-label",
                                        "id": "Test-input",
                                        "label": undefined,
                                      }
                                    }
                                    placeholder={null}
                                    required={false}
                                    value=""
                                  >
                                    <ForwardRef(TextField)
                                      InputLabelProps={
                                        Object {
                                          "hidden": false,
                                          "htmlFor": "Test-input",
                                          "id": "Test-input-label",
                                          "shrink": undefined,
                                        }
                                      }
                                      InputProps={
                                        Object {
                                          "aria-activedescendant": null,
                                          "aria-autocomplete": "list",
                                          "aria-controls": null,
                                          "aria-labelledby": "Test-label",
                                          "autoComplete": "off",
                                          "classes": Object {
                                            "root": "inputRoot",
                                          },
                                          "id": "Test-input",
                                          "inputRef": [Function],
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onKeyDown": [Function],
                                          "value": "",
                                        }
                                      }
                                      classes={
                                        Object {
                                          "root": "MuiTextField-root",
                                        }
                                      }
                                      disabled={false}
                                      error={false}
                                      fullWidth={true}
                                      id="Test-input"
                                      inputProps={
                                        Object {
                                          "aria-label": undefined,
                                          "aria-labelledby": "Test-input-label",
                                          "id": "Test-input",
                                          "label": undefined,
                                        }
                                      }
                                      placeholder={null}
                                      required={false}
                                      value=""
                                    >
                                      <WithStyles(ForwardRef(FormControl))
                                        className="MuiTextField-root"
                                        color="primary"
                                        disabled={false}
                                        error={false}
                                        fullWidth={true}
                                        required={false}
                                        variant="standard"
                                      >
                                        <ForwardRef(FormControl)
                                          className="MuiTextField-root"
                                          classes={
                                            Object {
                                              "fullWidth": "MuiFormControl-fullWidth",
                                              "marginDense": "MuiFormControl-marginDense",
                                              "marginNormal": "MuiFormControl-marginNormal",
                                              "root": "MuiFormControl-root",
                                            }
                                          }
                                          color="primary"
                                          disabled={false}
                                          error={false}
                                          fullWidth={true}
                                          required={false}
                                          variant="standard"
                                        >
                                          <div
                                            className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                          >
                                            <WithStyles(ForwardRef(Input))
                                              aria-activedescendant={null}
                                              aria-autocomplete="list"
                                              aria-controls={null}
                                              aria-labelledby="Test-label"
                                              autoComplete="off"
                                              autoFocus={false}
                                              classes={
                                                Object {
                                                  "root": "inputRoot",
                                                }
                                              }
                                              fullWidth={true}
                                              id="Test-input"
                                              inputProps={
                                                Object {
                                                  "aria-label": undefined,
                                                  "aria-labelledby": "Test-input-label",
                                                  "id": "Test-input",
                                                  "label": undefined,
                                                }
                                              }
                                              inputRef={[Function]}
                                              multiline={false}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder={null}
                                              value=""
                                            >
                                              <ForwardRef(Input)
                                                aria-activedescendant={null}
                                                aria-autocomplete="list"
                                                aria-controls={null}
                                                aria-labelledby="Test-label"
                                                autoComplete="off"
                                                autoFocus={false}
                                                classes={
                                                  Object {
                                                    "colorSecondary": "MuiInput-colorSecondary",
                                                    "disabled": "Mui-disabled",
                                                    "error": "Mui-error",
                                                    "focused": "Mui-focused",
                                                    "formControl": "MuiInput-formControl",
                                                    "fullWidth": "MuiInput-fullWidth",
                                                    "input": "MuiInput-input",
                                                    "inputMarginDense": "MuiInput-inputMarginDense",
                                                    "inputMultiline": "MuiInput-inputMultiline",
                                                    "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                    "marginDense": "MuiInput-marginDense",
                                                    "multiline": "MuiInput-multiline",
                                                    "root": "MuiInput-root inputRoot",
                                                    "underline": "MuiInput-underline",
                                                  }
                                                }
                                                fullWidth={true}
                                                id="Test-input"
                                                inputProps={
                                                  Object {
                                                    "aria-label": undefined,
                                                    "aria-labelledby": "Test-input-label",
                                                    "id": "Test-input",
                                                    "label": undefined,
                                                  }
                                                }
                                                inputRef={[Function]}
                                                multiline={false}
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder={null}
                                                value=""
                                              >
                                                <WithStyles(ForwardRef(InputBase))
                                                  aria-activedescendant={null}
                                                  aria-autocomplete="list"
                                                  aria-controls={null}
                                                  aria-labelledby="Test-label"
                                                  autoComplete="off"
                                                  autoFocus={false}
                                                  classes={
                                                    Object {
                                                      "colorSecondary": "MuiInput-colorSecondary",
                                                      "disabled": "Mui-disabled",
                                                      "error": "Mui-error",
                                                      "focused": "Mui-focused",
                                                      "formControl": "MuiInput-formControl",
                                                      "fullWidth": "MuiInput-fullWidth",
                                                      "input": "MuiInput-input",
                                                      "inputMarginDense": "MuiInput-inputMarginDense",
                                                      "inputMultiline": "MuiInput-inputMultiline",
                                                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                      "marginDense": "MuiInput-marginDense",
                                                      "multiline": "MuiInput-multiline",
                                                      "root": "MuiInput-root inputRoot MuiInput-underline",
                                                      "underline": null,
                                                    }
                                                  }
                                                  fullWidth={true}
                                                  id="Test-input"
                                                  inputComponent="input"
                                                  inputProps={
                                                    Object {
                                                      "aria-label": undefined,
                                                      "aria-labelledby": "Test-input-label",
                                                      "id": "Test-input",
                                                      "label": undefined,
                                                    }
                                                  }
                                                  inputRef={[Function]}
                                                  multiline={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder={null}
                                                  type="text"
                                                  value=""
                                                >
                                                  <ForwardRef(InputBase)
                                                    aria-activedescendant={null}
                                                    aria-autocomplete="list"
                                                    aria-controls={null}
                                                    aria-labelledby="Test-label"
                                                    autoComplete="off"
                                                    autoFocus={false}
                                                    classes={
                                                      Object {
                                                        "adornedEnd": "MuiInputBase-adornedEnd",
                                                        "adornedStart": "MuiInputBase-adornedStart",
                                                        "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                        "disabled": "Mui-disabled Mui-disabled",
                                                        "error": "Mui-error Mui-error",
                                                        "focused": "Mui-focused Mui-focused",
                                                        "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                        "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                        "input": "MuiInputBase-input MuiInput-input",
                                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                        "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                        "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                        "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                        "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                        "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                        "root": "MuiInputBase-root MuiInput-root inputRoot MuiInput-underline",
                                                      }
                                                    }
                                                    fullWidth={true}
                                                    id="Test-input"
                                                    inputComponent="input"
                                                    inputProps={
                                                      Object {
                                                        "aria-label": undefined,
                                                        "aria-labelledby": "Test-input-label",
                                                        "id": "Test-input",
                                                        "label": undefined,
                                                      }
                                                    }
                                                    inputRef={[Function]}
                                                    multiline={false}
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    placeholder={null}
                                                    type="text"
                                                    value=""
                                                  >
                                                    <div
                                                      aria-activedescendant={null}
                                                      aria-autocomplete="list"
                                                      aria-controls={null}
                                                      aria-labelledby="Test-label"
                                                      className="MuiInputBase-root MuiInput-root inputRoot MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                                                      onClick={[Function]}
                                                    >
                                                      <input
                                                        aria-invalid={false}
                                                        aria-labelledby="Test-input-label"
                                                        autoComplete="off"
                                                        autoFocus={false}
                                                        className="MuiInputBase-input MuiInput-input"
                                                        disabled={false}
                                                        id="Test-input"
                                                        onAnimationStart={[Function]}
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        placeholder={null}
                                                        required={false}
                                                        type="text"
                                                        value=""
                                                      />
                                                    </div>
                                                  </ForwardRef(InputBase)>
                                                </WithStyles(ForwardRef(InputBase))>
                                              </ForwardRef(Input)>
                                            </WithStyles(ForwardRef(Input))>
                                          </div>
                                        </ForwardRef(FormControl)>
                                      </WithStyles(ForwardRef(FormControl))>
                                    </ForwardRef(TextField)>
                                  </WithStyles(ForwardRef(TextField))>
                                </TextFieldWrapper>
                              </WithStyles(TextFieldWrapper)>
                            </div>
                          </ForwardRef(Grid)>
                        </WithStyles(ForwardRef(Grid))>
                      </div>
                    </ForwardRef(Grid)>
                  </WithStyles(ForwardRef(Grid))>
                </div>
              </Downshift>
            </div>
          </AutoCompleteAsyncField>
        </MuiPickersUtilsProvider>
      </ThemeProvider>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`AutoCompleteAsyncField component should render items list on focusing on input 2`] = `
<Provider
  store={
    Object {
      "dispatch": [MockFunction],
      "getState": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
        ],
      },
      "subscribe": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ThemeProvider
        theme={
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "up": [Function],
              "values": Object {
                "lg": 1280,
                "md": 960,
                "sm": 600,
                "xl": 1920,
                "xs": 0,
              },
              "width": [Function],
            },
            "direction": "ltr",
            "graphs": Object {
              "color1": "#d72865",
              "color2": "#1e7d94",
              "color3": "#49075E",
              "color4": "#468fcc",
              "color5": "#f28620",
              "color6": "#333333",
              "color7": "#595959",
            },
            "hexToRGBA": [Function],
            "mixins": Object {
              "gutters": [Function],
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "overrides": Object {
              "MUIDataTable": Object {
                "paper": Object {
                  "boxShadow": "none",
                  "margin": 0,
                  "padding": 0,
                },
              },
              "MuiFormLabel": Object {
                "root": Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                  "whiteSpace": "nowrap",
                  "width": "100%",
                },
              },
              "MuiMenuItem": Object {
                "root": Object {
                  "&$selected": Object {
                    "backgroundColor": "#4085C6 !important",
                    "color": "#FFFFFF",
                  },
                },
              },
            },
            "palette": Object {
              "accent": Object {
                "dark": "#2a557d",
                "light": "#54acff",
                "main": "#316799",
              },
              "action": Object {
                "activatedOpacity": 0.12,
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "disabledOpacity": 0.38,
                "focus": "rgba(0, 0, 0, 0.12)",
                "focusOpacity": 0.12,
                "hover": "rgba(0, 0, 0, 0.04)",
                "hoverOpacity": 0.04,
                "selected": "rgba(0, 0, 0, 0.08)",
                "selectedOpacity": 0.08,
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fafafa",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "#790000",
                "light": "#ff0000",
                "main": "#c80000",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#f5f5f5",
                "200": "#eeeeee",
                "300": "#e0e0e0",
                "400": "#bdbdbd",
                "50": "#fafafa",
                "500": "#9e9e9e",
                "600": "#757575",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#d5d5d5",
                "A200": "#aaaaaa",
                "A400": "#303030",
                "A700": "#616161",
              },
              "info": Object {
                "contrastText": "#fff",
                "dark": "#1976d2",
                "light": "#64b5f6",
                "main": "#2196f3",
              },
              "primary": Object {
                "contrastText": "#fff",
                "dark": "#3b1a59",
                "gradient": Object {
                  "diagonal": Object {
                    "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                  "horizontal": Object {
                    "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                },
                "light": "#962A8B",
                "main": "#51247A",
              },
              "secondary": Object {
                "contrastText": "#fff",
                "dark": "#333333",
                "light": "#f2f2f2",
                "main": "#595959",
              },
              "success": Object {
                "contrastText": "#fff",
                "dark": "#005000",
                "light": "#00a700",
                "main": "#007200",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "hint": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.54)",
              },
              "tonalOffset": 0.2,
              "type": "light",
              "warning": Object {
                "contrastText": "#fff",
                "dark": "#542400",
                "light": "#ff9a57",
                "main": "#bf5000",
              },
              "white": Object {
                "main": "#FFFFFF",
              },
            },
            "props": Object {},
            "shadows": Array [
              "none",
              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": [Function],
            "status": Object {
              "danger": "#f44336",
              "warning": "#ff9800",
            },
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.5,
              },
              "body2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 300,
                "letterSpacing": "0.01071em",
                "lineHeight": 1.43,
              },
              "button": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.02857em",
                "lineHeight": 1.75,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.03333em",
                "lineHeight": 1.66,
              },
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": 14,
              "fontWeightBold": 700,
              "fontWeightLight": 200,
              "fontWeightMedium": 400,
              "fontWeightRegular": 300,
              "h1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "6rem",
                "fontWeight": 200,
                "letterSpacing": "-0.01562em",
                "lineHeight": 1.167,
              },
              "h2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 200,
                "letterSpacing": "-0.00833em",
                "lineHeight": 1.2,
              },
              "h3": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.167,
              },
              "h4": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 300,
                "letterSpacing": "0.00735em",
                "lineHeight": 1.235,
              },
              "h5": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.334,
              },
              "h6": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.25rem",
                "fontWeight": 400,
                "letterSpacing": "0.0075em",
                "lineHeight": 1.6,
              },
              "htmlFontSize": 16,
              "overline": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.08333em",
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "round": [Function],
              "subtitle1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.00714em",
                "lineHeight": 1.57,
              },
              "suppressDeprecationWarnings": true,
              "useNextVariants": true,
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "speedDial": 1050,
              "tooltip": 1500,
            },
            Symbol(mui.nested): false,
          }
        }
      >
        <MuiPickersUtilsProvider
          utils={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
        >
          <AutoCompleteAsyncField
            MenuItemComponent={[Function]}
            allowFreeText={false}
            async={false}
            category={null}
            classes={
              Object {
                "container": "container",
                "inputRoot": "inputRoot",
                "paper": "paper",
                "root": "root",
              }
            }
            disabled={false}
            error={false}
            filter={[Function]}
            floatingLabelText="Test"
            hideLabel={true}
            hintText={null}
            itemToString={[MockFunction]}
            itemsList={
              Array [
                Object {
                  "id": 1,
                  "value": "test",
                },
                Object {
                  "id": 2,
                  "value": "testing",
                },
                Object {
                  "id": 3,
                  "value": "tested",
                },
              ]
            }
            itemsListLoading={false}
            loadSuggestions={
              [MockFunction] {
                "calls": Array [
                  Array [
                    null,
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              }
            }
            maxResults={7}
            onChange={[MockFunction]}
            openOnFocus={true}
            required={false}
            selectedValue={null}
            showClear={false}
          >
            <div
              className="root"
            >
              <label
                hidden={true}
                id="Test-label"
              >
                Test
              </label>
              <Downshift
                aria-label="Test"
                defaultHighlightedIndex={null}
                defaultInputValue=""
                defaultIsOpen={false}
                defaultSelectedItem={null}
                environment={[Window]}
                getA11yStatusMessage={[Function]}
                id="Test"
                itemToString={[MockFunction]}
                onChange={[MockFunction]}
                onInputValueChange={[Function]}
                onOuterClick={[Function]}
                onSelect={[Function]}
                onStateChange={[Function]}
                onUserAction={[Function]}
                scrollIntoView={[Function]}
                selectedItemChanged={[Function]}
                stateReducer={[Function]}
                suppressRefError={false}
              >
                <div
                  aria-expanded={false}
                  aria-haspopup="listbox"
                  aria-labelledby="Test-label"
                  aria-owns={null}
                  className="container"
                  role="combobox"
                >
                  <WithStyles(ForwardRef(Grid))
                    alignContent="flex-end"
                    alignItems="flex-end"
                    container={true}
                    spacing={2}
                  >
                    <ForwardRef(Grid)
                      alignContent="flex-end"
                      alignItems="flex-end"
                      classes={
                        Object {
                          "align-content-xs-center": "MuiGrid-align-content-xs-center",
                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                          "align-items-xs-center": "MuiGrid-align-items-xs-center",
                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                          "container": "MuiGrid-container",
                          "direction-xs-column": "MuiGrid-direction-xs-column",
                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                          "grid-lg-1": "MuiGrid-grid-lg-1",
                          "grid-lg-10": "MuiGrid-grid-lg-10",
                          "grid-lg-11": "MuiGrid-grid-lg-11",
                          "grid-lg-12": "MuiGrid-grid-lg-12",
                          "grid-lg-2": "MuiGrid-grid-lg-2",
                          "grid-lg-3": "MuiGrid-grid-lg-3",
                          "grid-lg-4": "MuiGrid-grid-lg-4",
                          "grid-lg-5": "MuiGrid-grid-lg-5",
                          "grid-lg-6": "MuiGrid-grid-lg-6",
                          "grid-lg-7": "MuiGrid-grid-lg-7",
                          "grid-lg-8": "MuiGrid-grid-lg-8",
                          "grid-lg-9": "MuiGrid-grid-lg-9",
                          "grid-lg-auto": "MuiGrid-grid-lg-auto",
                          "grid-lg-true": "MuiGrid-grid-lg-true",
                          "grid-md-1": "MuiGrid-grid-md-1",
                          "grid-md-10": "MuiGrid-grid-md-10",
                          "grid-md-11": "MuiGrid-grid-md-11",
                          "grid-md-12": "MuiGrid-grid-md-12",
                          "grid-md-2": "MuiGrid-grid-md-2",
                          "grid-md-3": "MuiGrid-grid-md-3",
                          "grid-md-4": "MuiGrid-grid-md-4",
                          "grid-md-5": "MuiGrid-grid-md-5",
                          "grid-md-6": "MuiGrid-grid-md-6",
                          "grid-md-7": "MuiGrid-grid-md-7",
                          "grid-md-8": "MuiGrid-grid-md-8",
                          "grid-md-9": "MuiGrid-grid-md-9",
                          "grid-md-auto": "MuiGrid-grid-md-auto",
                          "grid-md-true": "MuiGrid-grid-md-true",
                          "grid-sm-1": "MuiGrid-grid-sm-1",
                          "grid-sm-10": "MuiGrid-grid-sm-10",
                          "grid-sm-11": "MuiGrid-grid-sm-11",
                          "grid-sm-12": "MuiGrid-grid-sm-12",
                          "grid-sm-2": "MuiGrid-grid-sm-2",
                          "grid-sm-3": "MuiGrid-grid-sm-3",
                          "grid-sm-4": "MuiGrid-grid-sm-4",
                          "grid-sm-5": "MuiGrid-grid-sm-5",
                          "grid-sm-6": "MuiGrid-grid-sm-6",
                          "grid-sm-7": "MuiGrid-grid-sm-7",
                          "grid-sm-8": "MuiGrid-grid-sm-8",
                          "grid-sm-9": "MuiGrid-grid-sm-9",
                          "grid-sm-auto": "MuiGrid-grid-sm-auto",
                          "grid-sm-true": "MuiGrid-grid-sm-true",
                          "grid-xl-1": "MuiGrid-grid-xl-1",
                          "grid-xl-10": "MuiGrid-grid-xl-10",
                          "grid-xl-11": "MuiGrid-grid-xl-11",
                          "grid-xl-12": "MuiGrid-grid-xl-12",
                          "grid-xl-2": "MuiGrid-grid-xl-2",
                          "grid-xl-3": "MuiGrid-grid-xl-3",
                          "grid-xl-4": "MuiGrid-grid-xl-4",
                          "grid-xl-5": "MuiGrid-grid-xl-5",
                          "grid-xl-6": "MuiGrid-grid-xl-6",
                          "grid-xl-7": "MuiGrid-grid-xl-7",
                          "grid-xl-8": "MuiGrid-grid-xl-8",
                          "grid-xl-9": "MuiGrid-grid-xl-9",
                          "grid-xl-auto": "MuiGrid-grid-xl-auto",
                          "grid-xl-true": "MuiGrid-grid-xl-true",
                          "grid-xs-1": "MuiGrid-grid-xs-1",
                          "grid-xs-10": "MuiGrid-grid-xs-10",
                          "grid-xs-11": "MuiGrid-grid-xs-11",
                          "grid-xs-12": "MuiGrid-grid-xs-12",
                          "grid-xs-2": "MuiGrid-grid-xs-2",
                          "grid-xs-3": "MuiGrid-grid-xs-3",
                          "grid-xs-4": "MuiGrid-grid-xs-4",
                          "grid-xs-5": "MuiGrid-grid-xs-5",
                          "grid-xs-6": "MuiGrid-grid-xs-6",
                          "grid-xs-7": "MuiGrid-grid-xs-7",
                          "grid-xs-8": "MuiGrid-grid-xs-8",
                          "grid-xs-9": "MuiGrid-grid-xs-9",
                          "grid-xs-auto": "MuiGrid-grid-xs-auto",
                          "grid-xs-true": "MuiGrid-grid-xs-true",
                          "item": "MuiGrid-item",
                          "justify-xs-center": "MuiGrid-justify-xs-center",
                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                          "root": "MuiGrid-root",
                          "spacing-xs-1": "MuiGrid-spacing-xs-1",
                          "spacing-xs-10": "MuiGrid-spacing-xs-10",
                          "spacing-xs-2": "MuiGrid-spacing-xs-2",
                          "spacing-xs-3": "MuiGrid-spacing-xs-3",
                          "spacing-xs-4": "MuiGrid-spacing-xs-4",
                          "spacing-xs-5": "MuiGrid-spacing-xs-5",
                          "spacing-xs-6": "MuiGrid-spacing-xs-6",
                          "spacing-xs-7": "MuiGrid-spacing-xs-7",
                          "spacing-xs-8": "MuiGrid-spacing-xs-8",
                          "spacing-xs-9": "MuiGrid-spacing-xs-9",
                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                          "zeroMinWidth": "MuiGrid-zeroMinWidth",
                        }
                      }
                      container={true}
                      spacing={2}
                    >
                      <div
                        className="MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-2 MuiGrid-align-items-xs-flex-end MuiGrid-align-content-xs-flex-end"
                      >
                        <WithStyles(ForwardRef(Grid))
                          item={true}
                          xs={true}
                        >
                          <ForwardRef(Grid)
                            classes={
                              Object {
                                "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                "container": "MuiGrid-container",
                                "direction-xs-column": "MuiGrid-direction-xs-column",
                                "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                "grid-lg-1": "MuiGrid-grid-lg-1",
                                "grid-lg-10": "MuiGrid-grid-lg-10",
                                "grid-lg-11": "MuiGrid-grid-lg-11",
                                "grid-lg-12": "MuiGrid-grid-lg-12",
                                "grid-lg-2": "MuiGrid-grid-lg-2",
                                "grid-lg-3": "MuiGrid-grid-lg-3",
                                "grid-lg-4": "MuiGrid-grid-lg-4",
                                "grid-lg-5": "MuiGrid-grid-lg-5",
                                "grid-lg-6": "MuiGrid-grid-lg-6",
                                "grid-lg-7": "MuiGrid-grid-lg-7",
                                "grid-lg-8": "MuiGrid-grid-lg-8",
                                "grid-lg-9": "MuiGrid-grid-lg-9",
                                "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                "grid-lg-true": "MuiGrid-grid-lg-true",
                                "grid-md-1": "MuiGrid-grid-md-1",
                                "grid-md-10": "MuiGrid-grid-md-10",
                                "grid-md-11": "MuiGrid-grid-md-11",
                                "grid-md-12": "MuiGrid-grid-md-12",
                                "grid-md-2": "MuiGrid-grid-md-2",
                                "grid-md-3": "MuiGrid-grid-md-3",
                                "grid-md-4": "MuiGrid-grid-md-4",
                                "grid-md-5": "MuiGrid-grid-md-5",
                                "grid-md-6": "MuiGrid-grid-md-6",
                                "grid-md-7": "MuiGrid-grid-md-7",
                                "grid-md-8": "MuiGrid-grid-md-8",
                                "grid-md-9": "MuiGrid-grid-md-9",
                                "grid-md-auto": "MuiGrid-grid-md-auto",
                                "grid-md-true": "MuiGrid-grid-md-true",
                                "grid-sm-1": "MuiGrid-grid-sm-1",
                                "grid-sm-10": "MuiGrid-grid-sm-10",
                                "grid-sm-11": "MuiGrid-grid-sm-11",
                                "grid-sm-12": "MuiGrid-grid-sm-12",
                                "grid-sm-2": "MuiGrid-grid-sm-2",
                                "grid-sm-3": "MuiGrid-grid-sm-3",
                                "grid-sm-4": "MuiGrid-grid-sm-4",
                                "grid-sm-5": "MuiGrid-grid-sm-5",
                                "grid-sm-6": "MuiGrid-grid-sm-6",
                                "grid-sm-7": "MuiGrid-grid-sm-7",
                                "grid-sm-8": "MuiGrid-grid-sm-8",
                                "grid-sm-9": "MuiGrid-grid-sm-9",
                                "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                "grid-sm-true": "MuiGrid-grid-sm-true",
                                "grid-xl-1": "MuiGrid-grid-xl-1",
                                "grid-xl-10": "MuiGrid-grid-xl-10",
                                "grid-xl-11": "MuiGrid-grid-xl-11",
                                "grid-xl-12": "MuiGrid-grid-xl-12",
                                "grid-xl-2": "MuiGrid-grid-xl-2",
                                "grid-xl-3": "MuiGrid-grid-xl-3",
                                "grid-xl-4": "MuiGrid-grid-xl-4",
                                "grid-xl-5": "MuiGrid-grid-xl-5",
                                "grid-xl-6": "MuiGrid-grid-xl-6",
                                "grid-xl-7": "MuiGrid-grid-xl-7",
                                "grid-xl-8": "MuiGrid-grid-xl-8",
                                "grid-xl-9": "MuiGrid-grid-xl-9",
                                "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                "grid-xl-true": "MuiGrid-grid-xl-true",
                                "grid-xs-1": "MuiGrid-grid-xs-1",
                                "grid-xs-10": "MuiGrid-grid-xs-10",
                                "grid-xs-11": "MuiGrid-grid-xs-11",
                                "grid-xs-12": "MuiGrid-grid-xs-12",
                                "grid-xs-2": "MuiGrid-grid-xs-2",
                                "grid-xs-3": "MuiGrid-grid-xs-3",
                                "grid-xs-4": "MuiGrid-grid-xs-4",
                                "grid-xs-5": "MuiGrid-grid-xs-5",
                                "grid-xs-6": "MuiGrid-grid-xs-6",
                                "grid-xs-7": "MuiGrid-grid-xs-7",
                                "grid-xs-8": "MuiGrid-grid-xs-8",
                                "grid-xs-9": "MuiGrid-grid-xs-9",
                                "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                "grid-xs-true": "MuiGrid-grid-xs-true",
                                "item": "MuiGrid-item",
                                "justify-xs-center": "MuiGrid-justify-xs-center",
                                "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                "root": "MuiGrid-root",
                                "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                "zeroMinWidth": "MuiGrid-zeroMinWidth",
                              }
                            }
                            item={true}
                            xs={true}
                          >
                            <div
                              className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-true"
                            >
                              <WithStyles(TextFieldWrapper)
                                InputProps={
                                  Object {
                                    "aria-activedescendant": null,
                                    "aria-autocomplete": "list",
                                    "aria-controls": null,
                                    "aria-labelledby": "Test-label",
                                    "autoComplete": "off",
                                    "classes": Object {
                                      "root": "inputRoot",
                                    },
                                    "id": "Test-input",
                                    "inputRef": [Function],
                                    "onBlur": [Function],
                                    "onChange": [Function],
                                    "onKeyDown": [Function],
                                    "value": "",
                                  }
                                }
                                disabled={false}
                                error={false}
                                errorText=""
                                fullWidth={true}
                                id="Test-input"
                                placeholder={null}
                                required={false}
                                value=""
                              >
                                <TextFieldWrapper
                                  InputProps={
                                    Object {
                                      "aria-activedescendant": null,
                                      "aria-autocomplete": "list",
                                      "aria-controls": null,
                                      "aria-labelledby": "Test-label",
                                      "autoComplete": "off",
                                      "classes": Object {
                                        "root": "inputRoot",
                                      },
                                      "id": "Test-input",
                                      "inputRef": [Function],
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onKeyDown": [Function],
                                      "value": "",
                                    }
                                  }
                                  classes={Object {}}
                                  disabled={false}
                                  error={false}
                                  errorText=""
                                  fullWidth={true}
                                  id="Test-input"
                                  placeholder={null}
                                  required={false}
                                  value=""
                                >
                                  <WithStyles(ForwardRef(TextField))
                                    InputLabelProps={
                                      Object {
                                        "hidden": false,
                                        "htmlFor": "Test-input",
                                        "id": "Test-input-label",
                                        "shrink": undefined,
                                      }
                                    }
                                    InputProps={
                                      Object {
                                        "aria-activedescendant": null,
                                        "aria-autocomplete": "list",
                                        "aria-controls": null,
                                        "aria-labelledby": "Test-label",
                                        "autoComplete": "off",
                                        "classes": Object {
                                          "root": "inputRoot",
                                        },
                                        "id": "Test-input",
                                        "inputRef": [Function],
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "onKeyDown": [Function],
                                        "value": "",
                                      }
                                    }
                                    classes={Object {}}
                                    disabled={false}
                                    error={false}
                                    fullWidth={true}
                                    id="Test-input"
                                    inputProps={
                                      Object {
                                        "aria-label": undefined,
                                        "aria-labelledby": "Test-input-label",
                                        "id": "Test-input",
                                        "label": undefined,
                                      }
                                    }
                                    placeholder={null}
                                    required={false}
                                    value=""
                                  >
                                    <ForwardRef(TextField)
                                      InputLabelProps={
                                        Object {
                                          "hidden": false,
                                          "htmlFor": "Test-input",
                                          "id": "Test-input-label",
                                          "shrink": undefined,
                                        }
                                      }
                                      InputProps={
                                        Object {
                                          "aria-activedescendant": null,
                                          "aria-autocomplete": "list",
                                          "aria-controls": null,
                                          "aria-labelledby": "Test-label",
                                          "autoComplete": "off",
                                          "classes": Object {
                                            "root": "inputRoot",
                                          },
                                          "id": "Test-input",
                                          "inputRef": [Function],
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onKeyDown": [Function],
                                          "value": "",
                                        }
                                      }
                                      classes={
                                        Object {
                                          "root": "MuiTextField-root",
                                        }
                                      }
                                      disabled={false}
                                      error={false}
                                      fullWidth={true}
                                      id="Test-input"
                                      inputProps={
                                        Object {
                                          "aria-label": undefined,
                                          "aria-labelledby": "Test-input-label",
                                          "id": "Test-input",
                                          "label": undefined,
                                        }
                                      }
                                      placeholder={null}
                                      required={false}
                                      value=""
                                    >
                                      <WithStyles(ForwardRef(FormControl))
                                        className="MuiTextField-root"
                                        color="primary"
                                        disabled={false}
                                        error={false}
                                        fullWidth={true}
                                        required={false}
                                        variant="standard"
                                      >
                                        <ForwardRef(FormControl)
                                          className="MuiTextField-root"
                                          classes={
                                            Object {
                                              "fullWidth": "MuiFormControl-fullWidth",
                                              "marginDense": "MuiFormControl-marginDense",
                                              "marginNormal": "MuiFormControl-marginNormal",
                                              "root": "MuiFormControl-root",
                                            }
                                          }
                                          color="primary"
                                          disabled={false}
                                          error={false}
                                          fullWidth={true}
                                          required={false}
                                          variant="standard"
                                        >
                                          <div
                                            className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                          >
                                            <WithStyles(ForwardRef(Input))
                                              aria-activedescendant={null}
                                              aria-autocomplete="list"
                                              aria-controls={null}
                                              aria-labelledby="Test-label"
                                              autoComplete="off"
                                              autoFocus={false}
                                              classes={
                                                Object {
                                                  "root": "inputRoot",
                                                }
                                              }
                                              fullWidth={true}
                                              id="Test-input"
                                              inputProps={
                                                Object {
                                                  "aria-label": undefined,
                                                  "aria-labelledby": "Test-input-label",
                                                  "id": "Test-input",
                                                  "label": undefined,
                                                }
                                              }
                                              inputRef={[Function]}
                                              multiline={false}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder={null}
                                              value=""
                                            >
                                              <ForwardRef(Input)
                                                aria-activedescendant={null}
                                                aria-autocomplete="list"
                                                aria-controls={null}
                                                aria-labelledby="Test-label"
                                                autoComplete="off"
                                                autoFocus={false}
                                                classes={
                                                  Object {
                                                    "colorSecondary": "MuiInput-colorSecondary",
                                                    "disabled": "Mui-disabled",
                                                    "error": "Mui-error",
                                                    "focused": "Mui-focused",
                                                    "formControl": "MuiInput-formControl",
                                                    "fullWidth": "MuiInput-fullWidth",
                                                    "input": "MuiInput-input",
                                                    "inputMarginDense": "MuiInput-inputMarginDense",
                                                    "inputMultiline": "MuiInput-inputMultiline",
                                                    "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                    "marginDense": "MuiInput-marginDense",
                                                    "multiline": "MuiInput-multiline",
                                                    "root": "MuiInput-root inputRoot",
                                                    "underline": "MuiInput-underline",
                                                  }
                                                }
                                                fullWidth={true}
                                                id="Test-input"
                                                inputProps={
                                                  Object {
                                                    "aria-label": undefined,
                                                    "aria-labelledby": "Test-input-label",
                                                    "id": "Test-input",
                                                    "label": undefined,
                                                  }
                                                }
                                                inputRef={[Function]}
                                                multiline={false}
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder={null}
                                                value=""
                                              >
                                                <WithStyles(ForwardRef(InputBase))
                                                  aria-activedescendant={null}
                                                  aria-autocomplete="list"
                                                  aria-controls={null}
                                                  aria-labelledby="Test-label"
                                                  autoComplete="off"
                                                  autoFocus={false}
                                                  classes={
                                                    Object {
                                                      "colorSecondary": "MuiInput-colorSecondary",
                                                      "disabled": "Mui-disabled",
                                                      "error": "Mui-error",
                                                      "focused": "Mui-focused",
                                                      "formControl": "MuiInput-formControl",
                                                      "fullWidth": "MuiInput-fullWidth",
                                                      "input": "MuiInput-input",
                                                      "inputMarginDense": "MuiInput-inputMarginDense",
                                                      "inputMultiline": "MuiInput-inputMultiline",
                                                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                      "marginDense": "MuiInput-marginDense",
                                                      "multiline": "MuiInput-multiline",
                                                      "root": "MuiInput-root inputRoot MuiInput-underline",
                                                      "underline": null,
                                                    }
                                                  }
                                                  fullWidth={true}
                                                  id="Test-input"
                                                  inputComponent="input"
                                                  inputProps={
                                                    Object {
                                                      "aria-label": undefined,
                                                      "aria-labelledby": "Test-input-label",
                                                      "id": "Test-input",
                                                      "label": undefined,
                                                    }
                                                  }
                                                  inputRef={[Function]}
                                                  multiline={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder={null}
                                                  type="text"
                                                  value=""
                                                >
                                                  <ForwardRef(InputBase)
                                                    aria-activedescendant={null}
                                                    aria-autocomplete="list"
                                                    aria-controls={null}
                                                    aria-labelledby="Test-label"
                                                    autoComplete="off"
                                                    autoFocus={false}
                                                    classes={
                                                      Object {
                                                        "adornedEnd": "MuiInputBase-adornedEnd",
                                                        "adornedStart": "MuiInputBase-adornedStart",
                                                        "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                        "disabled": "Mui-disabled Mui-disabled",
                                                        "error": "Mui-error Mui-error",
                                                        "focused": "Mui-focused Mui-focused",
                                                        "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                        "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                        "input": "MuiInputBase-input MuiInput-input",
                                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                        "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                        "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                        "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                        "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                        "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                        "root": "MuiInputBase-root MuiInput-root inputRoot MuiInput-underline",
                                                      }
                                                    }
                                                    fullWidth={true}
                                                    id="Test-input"
                                                    inputComponent="input"
                                                    inputProps={
                                                      Object {
                                                        "aria-label": undefined,
                                                        "aria-labelledby": "Test-input-label",
                                                        "id": "Test-input",
                                                        "label": undefined,
                                                      }
                                                    }
                                                    inputRef={[Function]}
                                                    multiline={false}
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    placeholder={null}
                                                    type="text"
                                                    value=""
                                                  >
                                                    <div
                                                      aria-activedescendant={null}
                                                      aria-autocomplete="list"
                                                      aria-controls={null}
                                                      aria-labelledby="Test-label"
                                                      className="MuiInputBase-root MuiInput-root inputRoot MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth Mui-focused Mui-focused MuiInputBase-formControl MuiInput-formControl"
                                                      onClick={[Function]}
                                                    >
                                                      <input
                                                        aria-invalid={false}
                                                        aria-labelledby="Test-input-label"
                                                        autoComplete="off"
                                                        autoFocus={false}
                                                        className="MuiInputBase-input MuiInput-input"
                                                        disabled={false}
                                                        id="Test-input"
                                                        onAnimationStart={[Function]}
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        placeholder={null}
                                                        required={false}
                                                        type="text"
                                                        value=""
                                                      />
                                                    </div>
                                                  </ForwardRef(InputBase)>
                                                </WithStyles(ForwardRef(InputBase))>
                                              </ForwardRef(Input)>
                                            </WithStyles(ForwardRef(Input))>
                                          </div>
                                        </ForwardRef(FormControl)>
                                      </WithStyles(ForwardRef(FormControl))>
                                    </ForwardRef(TextField)>
                                  </WithStyles(ForwardRef(TextField))>
                                </TextFieldWrapper>
                              </WithStyles(TextFieldWrapper)>
                            </div>
                          </ForwardRef(Grid)>
                        </WithStyles(ForwardRef(Grid))>
                      </div>
                    </ForwardRef(Grid)>
                  </WithStyles(ForwardRef(Grid))>
                </div>
              </Downshift>
            </div>
          </AutoCompleteAsyncField>
        </MuiPickersUtilsProvider>
      </ThemeProvider>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`AutoCompleteAsyncField component should render with an input which allows free text input 1`] = `
<div
  className="root"
>
  <label
    hidden={true}
    id="autosuggest-label"
  />
  <Downshift
    aria-label="autosuggest"
    defaultHighlightedIndex={null}
    defaultInputValue=""
    defaultIsOpen={false}
    defaultSelectedItem={null}
    environment={[Window]}
    getA11yStatusMessage={[Function]}
    id="autosuggest"
    itemToString={[MockFunction]}
    onChange={[MockFunction]}
    onInputValueChange={[Function]}
    onOuterClick={[Function]}
    onSelect={[Function]}
    onStateChange={[Function]}
    onUserAction={[Function]}
    scrollIntoView={[Function]}
    selectedItemChanged={[Function]}
    stateReducer={[Function]}
    suppressRefError={false}
  >
    <Component />
  </Downshift>
</div>
`;

exports[`AutoCompleteAsyncField component should render with disabled flag set to true 1`] = `
<Provider
  store={
    Object {
      "dispatch": [MockFunction],
      "getState": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
        ],
      },
      "subscribe": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ThemeProvider
        theme={
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "up": [Function],
              "values": Object {
                "lg": 1280,
                "md": 960,
                "sm": 600,
                "xl": 1920,
                "xs": 0,
              },
              "width": [Function],
            },
            "direction": "ltr",
            "graphs": Object {
              "color1": "#d72865",
              "color2": "#1e7d94",
              "color3": "#49075E",
              "color4": "#468fcc",
              "color5": "#f28620",
              "color6": "#333333",
              "color7": "#595959",
            },
            "hexToRGBA": [Function],
            "mixins": Object {
              "gutters": [Function],
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "overrides": Object {
              "MUIDataTable": Object {
                "paper": Object {
                  "boxShadow": "none",
                  "margin": 0,
                  "padding": 0,
                },
              },
              "MuiFormLabel": Object {
                "root": Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                  "whiteSpace": "nowrap",
                  "width": "100%",
                },
              },
              "MuiMenuItem": Object {
                "root": Object {
                  "&$selected": Object {
                    "backgroundColor": "#4085C6 !important",
                    "color": "#FFFFFF",
                  },
                },
              },
            },
            "palette": Object {
              "accent": Object {
                "dark": "#2a557d",
                "light": "#54acff",
                "main": "#316799",
              },
              "action": Object {
                "activatedOpacity": 0.12,
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "disabledOpacity": 0.38,
                "focus": "rgba(0, 0, 0, 0.12)",
                "focusOpacity": 0.12,
                "hover": "rgba(0, 0, 0, 0.04)",
                "hoverOpacity": 0.04,
                "selected": "rgba(0, 0, 0, 0.08)",
                "selectedOpacity": 0.08,
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fafafa",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "#790000",
                "light": "#ff0000",
                "main": "#c80000",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#f5f5f5",
                "200": "#eeeeee",
                "300": "#e0e0e0",
                "400": "#bdbdbd",
                "50": "#fafafa",
                "500": "#9e9e9e",
                "600": "#757575",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#d5d5d5",
                "A200": "#aaaaaa",
                "A400": "#303030",
                "A700": "#616161",
              },
              "info": Object {
                "contrastText": "#fff",
                "dark": "#1976d2",
                "light": "#64b5f6",
                "main": "#2196f3",
              },
              "primary": Object {
                "contrastText": "#fff",
                "dark": "#3b1a59",
                "gradient": Object {
                  "diagonal": Object {
                    "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                  "horizontal": Object {
                    "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                },
                "light": "#962A8B",
                "main": "#51247A",
              },
              "secondary": Object {
                "contrastText": "#fff",
                "dark": "#333333",
                "light": "#f2f2f2",
                "main": "#595959",
              },
              "success": Object {
                "contrastText": "#fff",
                "dark": "#005000",
                "light": "#00a700",
                "main": "#007200",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "hint": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.54)",
              },
              "tonalOffset": 0.2,
              "type": "light",
              "warning": Object {
                "contrastText": "#fff",
                "dark": "#542400",
                "light": "#ff9a57",
                "main": "#bf5000",
              },
              "white": Object {
                "main": "#FFFFFF",
              },
            },
            "props": Object {},
            "shadows": Array [
              "none",
              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": [Function],
            "status": Object {
              "danger": "#f44336",
              "warning": "#ff9800",
            },
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.5,
              },
              "body2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 300,
                "letterSpacing": "0.01071em",
                "lineHeight": 1.43,
              },
              "button": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.02857em",
                "lineHeight": 1.75,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.03333em",
                "lineHeight": 1.66,
              },
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": 14,
              "fontWeightBold": 700,
              "fontWeightLight": 200,
              "fontWeightMedium": 400,
              "fontWeightRegular": 300,
              "h1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "6rem",
                "fontWeight": 200,
                "letterSpacing": "-0.01562em",
                "lineHeight": 1.167,
              },
              "h2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 200,
                "letterSpacing": "-0.00833em",
                "lineHeight": 1.2,
              },
              "h3": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.167,
              },
              "h4": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 300,
                "letterSpacing": "0.00735em",
                "lineHeight": 1.235,
              },
              "h5": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.334,
              },
              "h6": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.25rem",
                "fontWeight": 400,
                "letterSpacing": "0.0075em",
                "lineHeight": 1.6,
              },
              "htmlFontSize": 16,
              "overline": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.08333em",
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "round": [Function],
              "subtitle1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.00714em",
                "lineHeight": 1.57,
              },
              "suppressDeprecationWarnings": true,
              "useNextVariants": true,
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "speedDial": 1050,
              "tooltip": 1500,
            },
            Symbol(mui.nested): false,
          }
        }
      >
        <MuiPickersUtilsProvider
          utils={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "instance": undefined,
                    "locale": undefined,
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
        >
          <AutoCompleteAsyncField
            MenuItemComponent={[Function]}
            allowFreeText={false}
            async={true}
            category={null}
            classes={
              Object {
                "container": "container",
                "inputRoot": "inputRoot",
                "paper": "paper",
                "root": "root",
              }
            }
            disabled={true}
            error={false}
            filter={[Function]}
            floatingLabelText=""
            hintText={null}
            itemToString={[MockFunction]}
            itemsList={Array []}
            itemsListLoading={false}
            loadSuggestions={[MockFunction]}
            maxResults={7}
            onChange={[MockFunction]}
            openOnFocus={false}
            required={false}
            selectedValue={null}
            showClear={false}
          >
            <div
              className="root"
            >
              <label
                hidden={true}
                id="autosuggest-label"
              />
              <Downshift
                aria-label="autosuggest"
                defaultHighlightedIndex={null}
                defaultInputValue=""
                defaultIsOpen={false}
                defaultSelectedItem={null}
                environment={[Window]}
                getA11yStatusMessage={[Function]}
                id="autosuggest"
                itemToString={[MockFunction]}
                onChange={[MockFunction]}
                onInputValueChange={[Function]}
                onOuterClick={[Function]}
                onSelect={[Function]}
                onStateChange={[Function]}
                onUserAction={[Function]}
                scrollIntoView={[Function]}
                selectedItemChanged={[Function]}
                stateReducer={[Function]}
                suppressRefError={false}
              >
                <div
                  aria-expanded={false}
                  aria-haspopup="listbox"
                  aria-labelledby="autosuggest-label"
                  aria-owns={null}
                  className="container"
                  role="combobox"
                >
                  <WithStyles(ForwardRef(Grid))
                    alignContent="flex-end"
                    alignItems="flex-end"
                    container={true}
                    spacing={2}
                  >
                    <ForwardRef(Grid)
                      alignContent="flex-end"
                      alignItems="flex-end"
                      classes={
                        Object {
                          "align-content-xs-center": "MuiGrid-align-content-xs-center",
                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                          "align-items-xs-center": "MuiGrid-align-items-xs-center",
                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                          "container": "MuiGrid-container",
                          "direction-xs-column": "MuiGrid-direction-xs-column",
                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                          "grid-lg-1": "MuiGrid-grid-lg-1",
                          "grid-lg-10": "MuiGrid-grid-lg-10",
                          "grid-lg-11": "MuiGrid-grid-lg-11",
                          "grid-lg-12": "MuiGrid-grid-lg-12",
                          "grid-lg-2": "MuiGrid-grid-lg-2",
                          "grid-lg-3": "MuiGrid-grid-lg-3",
                          "grid-lg-4": "MuiGrid-grid-lg-4",
                          "grid-lg-5": "MuiGrid-grid-lg-5",
                          "grid-lg-6": "MuiGrid-grid-lg-6",
                          "grid-lg-7": "MuiGrid-grid-lg-7",
                          "grid-lg-8": "MuiGrid-grid-lg-8",
                          "grid-lg-9": "MuiGrid-grid-lg-9",
                          "grid-lg-auto": "MuiGrid-grid-lg-auto",
                          "grid-lg-true": "MuiGrid-grid-lg-true",
                          "grid-md-1": "MuiGrid-grid-md-1",
                          "grid-md-10": "MuiGrid-grid-md-10",
                          "grid-md-11": "MuiGrid-grid-md-11",
                          "grid-md-12": "MuiGrid-grid-md-12",
                          "grid-md-2": "MuiGrid-grid-md-2",
                          "grid-md-3": "MuiGrid-grid-md-3",
                          "grid-md-4": "MuiGrid-grid-md-4",
                          "grid-md-5": "MuiGrid-grid-md-5",
                          "grid-md-6": "MuiGrid-grid-md-6",
                          "grid-md-7": "MuiGrid-grid-md-7",
                          "grid-md-8": "MuiGrid-grid-md-8",
                          "grid-md-9": "MuiGrid-grid-md-9",
                          "grid-md-auto": "MuiGrid-grid-md-auto",
                          "grid-md-true": "MuiGrid-grid-md-true",
                          "grid-sm-1": "MuiGrid-grid-sm-1",
                          "grid-sm-10": "MuiGrid-grid-sm-10",
                          "grid-sm-11": "MuiGrid-grid-sm-11",
                          "grid-sm-12": "MuiGrid-grid-sm-12",
                          "grid-sm-2": "MuiGrid-grid-sm-2",
                          "grid-sm-3": "MuiGrid-grid-sm-3",
                          "grid-sm-4": "MuiGrid-grid-sm-4",
                          "grid-sm-5": "MuiGrid-grid-sm-5",
                          "grid-sm-6": "MuiGrid-grid-sm-6",
                          "grid-sm-7": "MuiGrid-grid-sm-7",
                          "grid-sm-8": "MuiGrid-grid-sm-8",
                          "grid-sm-9": "MuiGrid-grid-sm-9",
                          "grid-sm-auto": "MuiGrid-grid-sm-auto",
                          "grid-sm-true": "MuiGrid-grid-sm-true",
                          "grid-xl-1": "MuiGrid-grid-xl-1",
                          "grid-xl-10": "MuiGrid-grid-xl-10",
                          "grid-xl-11": "MuiGrid-grid-xl-11",
                          "grid-xl-12": "MuiGrid-grid-xl-12",
                          "grid-xl-2": "MuiGrid-grid-xl-2",
                          "grid-xl-3": "MuiGrid-grid-xl-3",
                          "grid-xl-4": "MuiGrid-grid-xl-4",
                          "grid-xl-5": "MuiGrid-grid-xl-5",
                          "grid-xl-6": "MuiGrid-grid-xl-6",
                          "grid-xl-7": "MuiGrid-grid-xl-7",
                          "grid-xl-8": "MuiGrid-grid-xl-8",
                          "grid-xl-9": "MuiGrid-grid-xl-9",
                          "grid-xl-auto": "MuiGrid-grid-xl-auto",
                          "grid-xl-true": "MuiGrid-grid-xl-true",
                          "grid-xs-1": "MuiGrid-grid-xs-1",
                          "grid-xs-10": "MuiGrid-grid-xs-10",
                          "grid-xs-11": "MuiGrid-grid-xs-11",
                          "grid-xs-12": "MuiGrid-grid-xs-12",
                          "grid-xs-2": "MuiGrid-grid-xs-2",
                          "grid-xs-3": "MuiGrid-grid-xs-3",
                          "grid-xs-4": "MuiGrid-grid-xs-4",
                          "grid-xs-5": "MuiGrid-grid-xs-5",
                          "grid-xs-6": "MuiGrid-grid-xs-6",
                          "grid-xs-7": "MuiGrid-grid-xs-7",
                          "grid-xs-8": "MuiGrid-grid-xs-8",
                          "grid-xs-9": "MuiGrid-grid-xs-9",
                          "grid-xs-auto": "MuiGrid-grid-xs-auto",
                          "grid-xs-true": "MuiGrid-grid-xs-true",
                          "item": "MuiGrid-item",
                          "justify-xs-center": "MuiGrid-justify-xs-center",
                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                          "root": "MuiGrid-root",
                          "spacing-xs-1": "MuiGrid-spacing-xs-1",
                          "spacing-xs-10": "MuiGrid-spacing-xs-10",
                          "spacing-xs-2": "MuiGrid-spacing-xs-2",
                          "spacing-xs-3": "MuiGrid-spacing-xs-3",
                          "spacing-xs-4": "MuiGrid-spacing-xs-4",
                          "spacing-xs-5": "MuiGrid-spacing-xs-5",
                          "spacing-xs-6": "MuiGrid-spacing-xs-6",
                          "spacing-xs-7": "MuiGrid-spacing-xs-7",
                          "spacing-xs-8": "MuiGrid-spacing-xs-8",
                          "spacing-xs-9": "MuiGrid-spacing-xs-9",
                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                          "zeroMinWidth": "MuiGrid-zeroMinWidth",
                        }
                      }
                      container={true}
                      spacing={2}
                    >
                      <div
                        className="MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-2 MuiGrid-align-items-xs-flex-end MuiGrid-align-content-xs-flex-end"
                      >
                        <WithStyles(ForwardRef(Grid))
                          item={true}
                          xs={true}
                        >
                          <ForwardRef(Grid)
                            classes={
                              Object {
                                "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                "container": "MuiGrid-container",
                                "direction-xs-column": "MuiGrid-direction-xs-column",
                                "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                "grid-lg-1": "MuiGrid-grid-lg-1",
                                "grid-lg-10": "MuiGrid-grid-lg-10",
                                "grid-lg-11": "MuiGrid-grid-lg-11",
                                "grid-lg-12": "MuiGrid-grid-lg-12",
                                "grid-lg-2": "MuiGrid-grid-lg-2",
                                "grid-lg-3": "MuiGrid-grid-lg-3",
                                "grid-lg-4": "MuiGrid-grid-lg-4",
                                "grid-lg-5": "MuiGrid-grid-lg-5",
                                "grid-lg-6": "MuiGrid-grid-lg-6",
                                "grid-lg-7": "MuiGrid-grid-lg-7",
                                "grid-lg-8": "MuiGrid-grid-lg-8",
                                "grid-lg-9": "MuiGrid-grid-lg-9",
                                "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                "grid-lg-true": "MuiGrid-grid-lg-true",
                                "grid-md-1": "MuiGrid-grid-md-1",
                                "grid-md-10": "MuiGrid-grid-md-10",
                                "grid-md-11": "MuiGrid-grid-md-11",
                                "grid-md-12": "MuiGrid-grid-md-12",
                                "grid-md-2": "MuiGrid-grid-md-2",
                                "grid-md-3": "MuiGrid-grid-md-3",
                                "grid-md-4": "MuiGrid-grid-md-4",
                                "grid-md-5": "MuiGrid-grid-md-5",
                                "grid-md-6": "MuiGrid-grid-md-6",
                                "grid-md-7": "MuiGrid-grid-md-7",
                                "grid-md-8": "MuiGrid-grid-md-8",
                                "grid-md-9": "MuiGrid-grid-md-9",
                                "grid-md-auto": "MuiGrid-grid-md-auto",
                                "grid-md-true": "MuiGrid-grid-md-true",
                                "grid-sm-1": "MuiGrid-grid-sm-1",
                                "grid-sm-10": "MuiGrid-grid-sm-10",
                                "grid-sm-11": "MuiGrid-grid-sm-11",
                                "grid-sm-12": "MuiGrid-grid-sm-12",
                                "grid-sm-2": "MuiGrid-grid-sm-2",
                                "grid-sm-3": "MuiGrid-grid-sm-3",
                                "grid-sm-4": "MuiGrid-grid-sm-4",
                                "grid-sm-5": "MuiGrid-grid-sm-5",
                                "grid-sm-6": "MuiGrid-grid-sm-6",
                                "grid-sm-7": "MuiGrid-grid-sm-7",
                                "grid-sm-8": "MuiGrid-grid-sm-8",
                                "grid-sm-9": "MuiGrid-grid-sm-9",
                                "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                "grid-sm-true": "MuiGrid-grid-sm-true",
                                "grid-xl-1": "MuiGrid-grid-xl-1",
                                "grid-xl-10": "MuiGrid-grid-xl-10",
                                "grid-xl-11": "MuiGrid-grid-xl-11",
                                "grid-xl-12": "MuiGrid-grid-xl-12",
                                "grid-xl-2": "MuiGrid-grid-xl-2",
                                "grid-xl-3": "MuiGrid-grid-xl-3",
                                "grid-xl-4": "MuiGrid-grid-xl-4",
                                "grid-xl-5": "MuiGrid-grid-xl-5",
                                "grid-xl-6": "MuiGrid-grid-xl-6",
                                "grid-xl-7": "MuiGrid-grid-xl-7",
                                "grid-xl-8": "MuiGrid-grid-xl-8",
                                "grid-xl-9": "MuiGrid-grid-xl-9",
                                "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                "grid-xl-true": "MuiGrid-grid-xl-true",
                                "grid-xs-1": "MuiGrid-grid-xs-1",
                                "grid-xs-10": "MuiGrid-grid-xs-10",
                                "grid-xs-11": "MuiGrid-grid-xs-11",
                                "grid-xs-12": "MuiGrid-grid-xs-12",
                                "grid-xs-2": "MuiGrid-grid-xs-2",
                                "grid-xs-3": "MuiGrid-grid-xs-3",
                                "grid-xs-4": "MuiGrid-grid-xs-4",
                                "grid-xs-5": "MuiGrid-grid-xs-5",
                                "grid-xs-6": "MuiGrid-grid-xs-6",
                                "grid-xs-7": "MuiGrid-grid-xs-7",
                                "grid-xs-8": "MuiGrid-grid-xs-8",
                                "grid-xs-9": "MuiGrid-grid-xs-9",
                                "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                "grid-xs-true": "MuiGrid-grid-xs-true",
                                "item": "MuiGrid-item",
                                "justify-xs-center": "MuiGrid-justify-xs-center",
                                "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                "root": "MuiGrid-root",
                                "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                "zeroMinWidth": "MuiGrid-zeroMinWidth",
                              }
                            }
                            item={true}
                            xs={true}
                          >
                            <div
                              className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-true"
                            >
                              <WithStyles(TextFieldWrapper)
                                InputProps={
                                  Object {
                                    "aria-activedescendant": null,
                                    "aria-autocomplete": "list",
                                    "aria-controls": null,
                                    "aria-labelledby": "autosuggest-label",
                                    "autoComplete": "off",
                                    "classes": Object {
                                      "root": "inputRoot",
                                    },
                                    "id": "autosuggest-input",
                                    "inputRef": [Function],
                                    "onBlur": [Function],
                                    "onChange": [Function],
                                    "onKeyDown": [Function],
                                    "value": "",
                                  }
                                }
                                disabled={true}
                                error={false}
                                errorText=""
                                fullWidth={true}
                                id="autosuggest-input"
                                label="autosuggest"
                                placeholder={null}
                                required={false}
                                value=""
                              >
                                <TextFieldWrapper
                                  InputProps={
                                    Object {
                                      "aria-activedescendant": null,
                                      "aria-autocomplete": "list",
                                      "aria-controls": null,
                                      "aria-labelledby": "autosuggest-label",
                                      "autoComplete": "off",
                                      "classes": Object {
                                        "root": "inputRoot",
                                      },
                                      "id": "autosuggest-input",
                                      "inputRef": [Function],
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onKeyDown": [Function],
                                      "value": "",
                                    }
                                  }
                                  classes={Object {}}
                                  disabled={true}
                                  error={false}
                                  errorText=""
                                  fullWidth={true}
                                  id="autosuggest-input"
                                  label="autosuggest"
                                  placeholder={null}
                                  required={false}
                                  value=""
                                >
                                  <WithStyles(ForwardRef(TextField))
                                    InputLabelProps={
                                      Object {
                                        "hidden": false,
                                        "htmlFor": "autosuggest-input",
                                        "id": "autosuggest-input-label",
                                        "shrink": undefined,
                                      }
                                    }
                                    InputProps={
                                      Object {
                                        "aria-activedescendant": null,
                                        "aria-autocomplete": "list",
                                        "aria-controls": null,
                                        "aria-labelledby": "autosuggest-label",
                                        "autoComplete": "off",
                                        "classes": Object {
                                          "root": "inputRoot",
                                        },
                                        "id": "autosuggest-input",
                                        "inputRef": [Function],
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "onKeyDown": [Function],
                                        "value": "",
                                      }
                                    }
                                    classes={Object {}}
                                    disabled={true}
                                    error={false}
                                    fullWidth={true}
                                    id="autosuggest-input"
                                    inputProps={
                                      Object {
                                        "aria-label": "autosuggest",
                                        "aria-labelledby": "autosuggest-input-label",
                                        "id": "autosuggest-input",
                                        "label": "autosuggest",
                                      }
                                    }
                                    label="autosuggest"
                                    placeholder={null}
                                    required={false}
                                    value=""
                                  >
                                    <ForwardRef(TextField)
                                      InputLabelProps={
                                        Object {
                                          "hidden": false,
                                          "htmlFor": "autosuggest-input",
                                          "id": "autosuggest-input-label",
                                          "shrink": undefined,
                                        }
                                      }
                                      InputProps={
                                        Object {
                                          "aria-activedescendant": null,
                                          "aria-autocomplete": "list",
                                          "aria-controls": null,
                                          "aria-labelledby": "autosuggest-label",
                                          "autoComplete": "off",
                                          "classes": Object {
                                            "root": "inputRoot",
                                          },
                                          "id": "autosuggest-input",
                                          "inputRef": [Function],
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onKeyDown": [Function],
                                          "value": "",
                                        }
                                      }
                                      classes={
                                        Object {
                                          "root": "MuiTextField-root",
                                        }
                                      }
                                      disabled={true}
                                      error={false}
                                      fullWidth={true}
                                      id="autosuggest-input"
                                      inputProps={
                                        Object {
                                          "aria-label": "autosuggest",
                                          "aria-labelledby": "autosuggest-input-label",
                                          "id": "autosuggest-input",
                                          "label": "autosuggest",
                                        }
                                      }
                                      label="autosuggest"
                                      placeholder={null}
                                      required={false}
                                      value=""
                                    >
                                      <WithStyles(ForwardRef(FormControl))
                                        className="MuiTextField-root"
                                        color="primary"
                                        disabled={true}
                                        error={false}
                                        fullWidth={true}
                                        required={false}
                                        variant="standard"
                                      >
                                        <ForwardRef(FormControl)
                                          className="MuiTextField-root"
                                          classes={
                                            Object {
                                              "fullWidth": "MuiFormControl-fullWidth",
                                              "marginDense": "MuiFormControl-marginDense",
                                              "marginNormal": "MuiFormControl-marginNormal",
                                              "root": "MuiFormControl-root",
                                            }
                                          }
                                          color="primary"
                                          disabled={true}
                                          error={false}
                                          fullWidth={true}
                                          required={false}
                                          variant="standard"
                                        >
                                          <div
                                            className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                          >
                                            <WithStyles(ForwardRef(InputLabel))
                                              hidden={false}
                                              htmlFor="autosuggest-input"
                                              id="autosuggest-input-label"
                                            >
                                              <ForwardRef(InputLabel)
                                                classes={
                                                  Object {
                                                    "animated": "MuiInputLabel-animated",
                                                    "asterisk": "MuiInputLabel-asterisk",
                                                    "disabled": "Mui-disabled",
                                                    "error": "Mui-error",
                                                    "filled": "MuiInputLabel-filled",
                                                    "focused": "Mui-focused",
                                                    "formControl": "MuiInputLabel-formControl",
                                                    "marginDense": "MuiInputLabel-marginDense",
                                                    "outlined": "MuiInputLabel-outlined",
                                                    "required": "Mui-required",
                                                    "root": "MuiInputLabel-root",
                                                    "shrink": "MuiInputLabel-shrink",
                                                  }
                                                }
                                                hidden={false}
                                                htmlFor="autosuggest-input"
                                                id="autosuggest-input-label"
                                              >
                                                <WithStyles(ForwardRef(FormLabel))
                                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                  classes={
                                                    Object {
                                                      "asterisk": "MuiInputLabel-asterisk",
                                                      "disabled": "Mui-disabled",
                                                      "error": "Mui-error",
                                                      "focused": "Mui-focused",
                                                      "required": "Mui-required",
                                                    }
                                                  }
                                                  data-shrink={false}
                                                  hidden={false}
                                                  htmlFor="autosuggest-input"
                                                  id="autosuggest-input-label"
                                                >
                                                  <ForwardRef(FormLabel)
                                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                    classes={
                                                      Object {
                                                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                        "colorSecondary": "MuiFormLabel-colorSecondary",
                                                        "disabled": "Mui-disabled Mui-disabled",
                                                        "error": "Mui-error Mui-error",
                                                        "filled": "MuiFormLabel-filled",
                                                        "focused": "Mui-focused Mui-focused",
                                                        "required": "Mui-required Mui-required",
                                                        "root": "MuiFormLabel-root",
                                                      }
                                                    }
                                                    data-shrink={false}
                                                    hidden={false}
                                                    htmlFor="autosuggest-input"
                                                    id="autosuggest-input-label"
                                                  >
                                                    <label
                                                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-disabled Mui-disabled"
                                                      data-shrink={false}
                                                      hidden={false}
                                                      htmlFor="autosuggest-input"
                                                      id="autosuggest-input-label"
                                                    >
                                                      autosuggest
                                                    </label>
                                                  </ForwardRef(FormLabel)>
                                                </WithStyles(ForwardRef(FormLabel))>
                                              </ForwardRef(InputLabel)>
                                            </WithStyles(ForwardRef(InputLabel))>
                                            <WithStyles(ForwardRef(Input))
                                              aria-activedescendant={null}
                                              aria-autocomplete="list"
                                              aria-controls={null}
                                              aria-labelledby="autosuggest-label"
                                              autoComplete="off"
                                              autoFocus={false}
                                              classes={
                                                Object {
                                                  "root": "inputRoot",
                                                }
                                              }
                                              fullWidth={true}
                                              id="autosuggest-input"
                                              inputProps={
                                                Object {
                                                  "aria-label": "autosuggest",
                                                  "aria-labelledby": "autosuggest-input-label",
                                                  "id": "autosuggest-input",
                                                  "label": "autosuggest",
                                                }
                                              }
                                              inputRef={[Function]}
                                              multiline={false}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder={null}
                                              value=""
                                            >
                                              <ForwardRef(Input)
                                                aria-activedescendant={null}
                                                aria-autocomplete="list"
                                                aria-controls={null}
                                                aria-labelledby="autosuggest-label"
                                                autoComplete="off"
                                                autoFocus={false}
                                                classes={
                                                  Object {
                                                    "colorSecondary": "MuiInput-colorSecondary",
                                                    "disabled": "Mui-disabled",
                                                    "error": "Mui-error",
                                                    "focused": "Mui-focused",
                                                    "formControl": "MuiInput-formControl",
                                                    "fullWidth": "MuiInput-fullWidth",
                                                    "input": "MuiInput-input",
                                                    "inputMarginDense": "MuiInput-inputMarginDense",
                                                    "inputMultiline": "MuiInput-inputMultiline",
                                                    "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                    "marginDense": "MuiInput-marginDense",
                                                    "multiline": "MuiInput-multiline",
                                                    "root": "MuiInput-root inputRoot",
                                                    "underline": "MuiInput-underline",
                                                  }
                                                }
                                                fullWidth={true}
                                                id="autosuggest-input"
                                                inputProps={
                                                  Object {
                                                    "aria-label": "autosuggest",
                                                    "aria-labelledby": "autosuggest-input-label",
                                                    "id": "autosuggest-input",
                                                    "label": "autosuggest",
                                                  }
                                                }
                                                inputRef={[Function]}
                                                multiline={false}
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder={null}
                                                value=""
                                              >
                                                <WithStyles(ForwardRef(InputBase))
                                                  aria-activedescendant={null}
                                                  aria-autocomplete="list"
                                                  aria-controls={null}
                                                  aria-labelledby="autosuggest-label"
                                                  autoComplete="off"
                                                  autoFocus={false}
                                                  classes={
                                                    Object {
                                                      "colorSecondary": "MuiInput-colorSecondary",
                                                      "disabled": "Mui-disabled",
                                                      "error": "Mui-error",
                                                      "focused": "Mui-focused",
                                                      "formControl": "MuiInput-formControl",
                                                      "fullWidth": "MuiInput-fullWidth",
                                                      "input": "MuiInput-input",
                                                      "inputMarginDense": "MuiInput-inputMarginDense",
                                                      "inputMultiline": "MuiInput-inputMultiline",
                                                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                      "marginDense": "MuiInput-marginDense",
                                                      "multiline": "MuiInput-multiline",
                                                      "root": "MuiInput-root inputRoot MuiInput-underline",
                                                      "underline": null,
                                                    }
                                                  }
                                                  fullWidth={true}
                                                  id="autosuggest-input"
                                                  inputComponent="input"
                                                  inputProps={
                                                    Object {
                                                      "aria-label": "autosuggest",
                                                      "aria-labelledby": "autosuggest-input-label",
                                                      "id": "autosuggest-input",
                                                      "label": "autosuggest",
                                                    }
                                                  }
                                                  inputRef={[Function]}
                                                  multiline={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder={null}
                                                  type="text"
                                                  value=""
                                                >
                                                  <ForwardRef(InputBase)
                                                    aria-activedescendant={null}
                                                    aria-autocomplete="list"
                                                    aria-controls={null}
                                                    aria-labelledby="autosuggest-label"
                                                    autoComplete="off"
                                                    autoFocus={false}
                                                    classes={
                                                      Object {
                                                        "adornedEnd": "MuiInputBase-adornedEnd",
                                                        "adornedStart": "MuiInputBase-adornedStart",
                                                        "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                        "disabled": "Mui-disabled Mui-disabled",
                                                        "error": "Mui-error Mui-error",
                                                        "focused": "Mui-focused Mui-focused",
                                                        "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                        "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                        "input": "MuiInputBase-input MuiInput-input",
                                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                        "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                        "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                        "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                        "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                        "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                        "root": "MuiInputBase-root MuiInput-root inputRoot MuiInput-underline",
                                                      }
                                                    }
                                                    fullWidth={true}
                                                    id="autosuggest-input"
                                                    inputComponent="input"
                                                    inputProps={
                                                      Object {
                                                        "aria-label": "autosuggest",
                                                        "aria-labelledby": "autosuggest-input-label",
                                                        "id": "autosuggest-input",
                                                        "label": "autosuggest",
                                                      }
                                                    }
                                                    inputRef={[Function]}
                                                    multiline={false}
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    placeholder={null}
                                                    type="text"
                                                    value=""
                                                  >
                                                    <div
                                                      aria-activedescendant={null}
                                                      aria-autocomplete="list"
                                                      aria-controls={null}
                                                      aria-labelledby="autosuggest-label"
                                                      className="MuiInputBase-root MuiInput-root inputRoot MuiInput-underline Mui-disabled Mui-disabled MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                                                      onClick={[Function]}
                                                    >
                                                      <input
                                                        aria-invalid={false}
                                                        aria-label="autosuggest"
                                                        aria-labelledby="autosuggest-input-label"
                                                        autoComplete="off"
                                                        autoFocus={false}
                                                        className="MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled"
                                                        disabled={true}
                                                        id="autosuggest-input"
                                                        label="autosuggest"
                                                        onAnimationStart={[Function]}
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        placeholder={null}
                                                        required={false}
                                                        type="text"
                                                        value=""
                                                      />
                                                    </div>
                                                  </ForwardRef(InputBase)>
                                                </WithStyles(ForwardRef(InputBase))>
                                              </ForwardRef(Input)>
                                            </WithStyles(ForwardRef(Input))>
                                          </div>
                                        </ForwardRef(FormControl)>
                                      </WithStyles(ForwardRef(FormControl))>
                                    </ForwardRef(TextField)>
                                  </WithStyles(ForwardRef(TextField))>
                                </TextFieldWrapper>
                              </WithStyles(TextFieldWrapper)>
                            </div>
                          </ForwardRef(Grid)>
                        </WithStyles(ForwardRef(Grid))>
                      </div>
                    </ForwardRef(Grid)>
                  </WithStyles(ForwardRef(Grid))>
                </div>
              </Downshift>
            </div>
          </AutoCompleteAsyncField>
        </MuiPickersUtilsProvider>
      </ThemeProvider>
    </Router>
  </MemoryRouter>
</Provider>
`;
