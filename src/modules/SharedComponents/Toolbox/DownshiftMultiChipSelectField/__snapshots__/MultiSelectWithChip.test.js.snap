// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MultiSelectWithChip component should render properly 1`] = `
<div
  className="test1"
>
  <WithStyles(Grid)
    alignContent="flex-end"
    alignItems="flex-end"
    container={true}
  >
    <WithStyles(Grid)
      item={true}
      xs={true}
    >
      <TextField
        InputProps={
          Object {
            "classes": Object {
              "input": undefined,
              "root": undefined,
            },
            "inputRef": undefined,
          }
        }
        fullWidth={true}
        label="test4"
        required={false}
        select={false}
        variant="standard"
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      xs="auto"
    >
      <WithStyles(Tooltip)
        title="Clear all selections"
      >
        <WithStyles(IconButton)
          className="test2"
          color="secondary"
          component="span"
          onClick={[MockFunction]}
        >
          <pure(CloseIcon) />
        </WithStyles(IconButton)>
      </WithStyles(Tooltip)>
    </WithStyles(Grid)>
    <WithStyles(Paper)
      square={true}
    />
  </WithStyles(Grid)>
</div>
`;

exports[`MultiSelectWithChip component should render properly 2`] = `
<div
  className="test1"
>
  <WithStyles(Grid)
    alignContent="flex-end"
    alignItems="flex-end"
    container={true}
  >
    <WithStyles(Grid)
      item={true}
      xs={true}
    >
      <TextField
        InputProps={
          Object {
            "classes": Object {
              "input": undefined,
              "root": undefined,
            },
            "inputRef": undefined,
          }
        }
        fullWidth={true}
        label="test4"
        required={false}
        select={false}
        variant="standard"
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      xs="auto"
    >
      <WithStyles(Tooltip)
        title="Clear all selections"
      >
        <WithStyles(IconButton)
          className="test2"
          color="secondary"
          component="span"
          onClick={[MockFunction]}
        >
          <pure(CloseIcon) />
        </WithStyles(IconButton)>
      </WithStyles(Tooltip)>
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</div>
`;

exports[`MultiSelectWithChip component should render properly 3`] = `
<div
  className="test1"
>
  <WithStyles(Grid)
    alignContent="flex-end"
    alignItems="flex-end"
    container={true}
  >
    <WithStyles(Grid)
      item={true}
      xs={true}
    >
      <TextField
        InputProps={
          Object {
            "classes": Object {
              "input": undefined,
              "root": undefined,
            },
            "inputRef": undefined,
          }
        }
        fullWidth={true}
        label="test4"
        required={false}
        select={false}
        variant="standard"
      />
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</div>
`;

exports[`getSuggestions helper should return html as expected 1`] = `
Array [
  Object {
    "label": "test1",
  },
  Object {
    "label": "test2",
  },
  Object {
    "label": "test3",
  },
  Object {
    "label": "test4",
  },
  Object {
    "label": "test5",
  },
]
`;

exports[`getSuggestions helper should return html as expected 2`] = `Array []`;

exports[`renderInput helper should return html as expected 1`] = `
<TextField
  InputProps={
    Object {
      "classes": Object {
        "input": "test3",
        "root": "test2",
      },
      "inputRef": "test4",
      "testProp": "test1",
    }
  }
  required={false}
  select={false}
  testAttr="test5"
  variant="standard"
/>
`;

exports[`renderSuggestion helper should return html as expected 1`] = `
<WithStyles(MenuItem)
  component="div"
  prop1="test2"
  prop2="test3"
  selected={true}
  style={
    Object {
      "fontWeight": 400,
    }
  }
>
  test1
</WithStyles(MenuItem)>
`;

exports[`renderSuggestion helper should return html as expected 2`] = `
<WithStyles(MenuItem)
  component="div"
  prop1="test2"
  prop2="test3"
  selected={true}
  style={
    Object {
      "fontWeight": 500,
    }
  }
>
  test1
</WithStyles(MenuItem)>
`;

exports[`renderSuggestions helper should render properly 1`] = `
<div>
  <WithStyles(MenuItem)
    component="div"
    key="test1"
    selected={false}
    style={
      Object {
        "fontWeight": 400,
      }
    }
  >
    test1
  </WithStyles(MenuItem)>
  <WithStyles(MenuItem)
    component="div"
    key="test2"
    selected={true}
    style={
      Object {
        "fontWeight": 400,
      }
    }
  >
    test2
  </WithStyles(MenuItem)>
</div>
`;
