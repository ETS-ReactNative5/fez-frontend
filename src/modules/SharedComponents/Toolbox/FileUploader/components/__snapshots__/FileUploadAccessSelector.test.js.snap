// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component FileUploadAccessSelector should render access condition disabled if disabled flag is set 1`] = `
<Provider
  store={
    Object {
      "dispatch": [MockFunction],
      "getState": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
        ],
      },
      "subscribe": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ThemeProvider
        theme={
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "up": [Function],
              "values": Object {
                "lg": 1280,
                "md": 960,
                "sm": 600,
                "xl": 1920,
                "xs": 0,
              },
              "width": [Function],
            },
            "direction": "ltr",
            "graphs": Object {
              "color1": "#d72865",
              "color2": "#1e7d94",
              "color3": "#49075E",
              "color4": "#468fcc",
              "color5": "#f28620",
              "color6": "#333333",
              "color7": "#595959",
            },
            "hexToRGBA": [Function],
            "mixins": Object {
              "gutters": [Function],
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "overrides": Object {
              "MUIDataTable": Object {
                "paper": Object {
                  "boxShadow": "none",
                  "margin": 0,
                  "padding": 0,
                },
              },
              "MuiFormLabel": Object {
                "root": Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                  "whiteSpace": "nowrap",
                  "width": "100%",
                },
              },
              "MuiIconButton": Object {
                "colorInherit": Object {
                  "color": "none",
                },
              },
              "MuiMenuItem": Object {
                "root": Object {
                  "&$selected": Object {
                    "backgroundColor": "#4085C6 !important",
                    "color": "#FFFFFF",
                  },
                },
              },
            },
            "palette": Object {
              "accent": Object {
                "dark": "#2a557d",
                "light": "#54acff",
                "main": "#316799",
              },
              "action": Object {
                "activatedOpacity": 0.12,
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "disabledOpacity": 0.38,
                "focus": "rgba(0, 0, 0, 0.12)",
                "focusOpacity": 0.12,
                "hover": "rgba(0, 0, 0, 0.04)",
                "hoverOpacity": 0.04,
                "selected": "rgba(0, 0, 0, 0.08)",
                "selectedOpacity": 0.08,
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fafafa",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "#790000",
                "light": "#ff0000",
                "main": "#c80000",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#f5f5f5",
                "200": "#eeeeee",
                "300": "#e0e0e0",
                "400": "#bdbdbd",
                "50": "#fafafa",
                "500": "#9e9e9e",
                "600": "#757575",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#d5d5d5",
                "A200": "#aaaaaa",
                "A400": "#303030",
                "A700": "#616161",
              },
              "info": Object {
                "contrastText": "#fff",
                "dark": "#1976d2",
                "light": "#64b5f6",
                "main": "#2196f3",
              },
              "primary": Object {
                "contrastText": "#fff",
                "dark": "#3b1a59",
                "gradient": Object {
                  "diagonal": Object {
                    "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                  "horizontal": Object {
                    "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                },
                "light": "#962A8B",
                "main": "#51247A",
              },
              "secondary": Object {
                "contrastText": "#fff",
                "dark": "#333333",
                "light": "#f2f2f2",
                "main": "#595959",
              },
              "success": Object {
                "contrastText": "#fff",
                "dark": "#005000",
                "light": "#00a700",
                "main": "#007200",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "hint": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.54)",
              },
              "tonalOffset": 0.2,
              "type": "light",
              "warning": Object {
                "contrastText": "#fff",
                "dark": "#542400",
                "light": "#ff9a57",
                "main": "#bf5000",
              },
              "white": Object {
                "main": "#FFFFFF",
              },
            },
            "props": Object {},
            "shadows": Array [
              "none",
              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": [Function],
            "status": Object {
              "danger": "#f44336",
              "warning": "#ff9800",
            },
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.5,
              },
              "body2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 300,
                "letterSpacing": "0.01071em",
                "lineHeight": 1.43,
              },
              "button": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.02857em",
                "lineHeight": 1.75,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.03333em",
                "lineHeight": 1.66,
              },
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": 14,
              "fontWeightBold": 700,
              "fontWeightLight": 200,
              "fontWeightMedium": 400,
              "fontWeightRegular": 300,
              "h1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "6rem",
                "fontWeight": 200,
                "letterSpacing": "-0.01562em",
                "lineHeight": 1.167,
              },
              "h2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 200,
                "letterSpacing": "-0.00833em",
                "lineHeight": 1.2,
              },
              "h3": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.167,
              },
              "h4": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 300,
                "letterSpacing": "0.00735em",
                "lineHeight": 1.235,
              },
              "h5": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.334,
              },
              "h6": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.25rem",
                "fontWeight": 400,
                "letterSpacing": "0.0075em",
                "lineHeight": 1.6,
              },
              "htmlFontSize": 16,
              "overline": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.08333em",
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "round": [Function],
              "subtitle1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.00714em",
                "lineHeight": 1.57,
              },
              "suppressDeprecationWarnings": true,
              "useNextVariants": true,
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "speedDial": 1050,
              "tooltip": 1500,
            },
            Symbol(mui.nested): false,
          }
        }
      >
        <MuiPickersUtilsProvider
          utils={[Function]}
        >
          <FileUploadAccessSelector
            classes={
              Object {
                "selector": "",
              }
            }
            disabled={true}
            locale={
              Object {
                "accessSelectOptionsText": Object {
                  "8": "Closed Access",
                  "9": "Open Access",
                },
                "errorMessage": "This field is required",
                "initialValue": "Select access conditions",
              }
            }
            value=""
          >
            <WithStyles(ForwardRef(FormControl))
              error={true}
              fullWidth={true}
              required={true}
            >
              <ForwardRef(FormControl)
                classes={
                  Object {
                    "fullWidth": "MuiFormControl-fullWidth",
                    "marginDense": "MuiFormControl-marginDense",
                    "marginNormal": "MuiFormControl-marginNormal",
                    "root": "MuiFormControl-root",
                  }
                }
                error={true}
                fullWidth={true}
                required={true}
              >
                <div
                  className="MuiFormControl-root MuiFormControl-fullWidth"
                >
                  <WithStyles(ForwardRef(Select))
                    MenuProps={
                      Object {
                        "data-testid": "undefined-options",
                        "id": "undefined-options",
                      }
                    }
                    SelectDisplayProps={
                      Object {
                        "data-testid": "undefined-select",
                        "id": "undefined-select",
                      }
                    }
                    className=""
                    disabled={true}
                    displayEmpty={true}
                    input={
                      <WithStyles(ForwardRef(Input))
                        classes={
                          Object {
                            "root": undefined,
                          }
                        }
                        disableUnderline={true}
                        id="access-condition"
                        name="accessCondition"
                      />
                    }
                    inputProps={
                      Object {
                        "data-testid": "undefined-input",
                        "id": "undefined-input",
                      }
                    }
                    onChange={[Function]}
                    value=""
                  >
                    <ForwardRef(Select)
                      MenuProps={
                        Object {
                          "data-testid": "undefined-options",
                          "id": "undefined-options",
                        }
                      }
                      SelectDisplayProps={
                        Object {
                          "data-testid": "undefined-select",
                          "id": "undefined-select",
                        }
                      }
                      className=""
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "filled": "MuiSelect-filled",
                          "icon": "MuiSelect-icon",
                          "iconFilled": "MuiSelect-iconFilled",
                          "iconOpen": "MuiSelect-iconOpen",
                          "iconOutlined": "MuiSelect-iconOutlined",
                          "outlined": "MuiSelect-outlined",
                          "root": "MuiSelect-root",
                          "select": "MuiSelect-select",
                          "selectMenu": "MuiSelect-selectMenu",
                        }
                      }
                      disabled={true}
                      displayEmpty={true}
                      input={
                        <WithStyles(ForwardRef(Input))
                          classes={
                            Object {
                              "root": undefined,
                            }
                          }
                          disableUnderline={true}
                          id="access-condition"
                          name="accessCondition"
                        />
                      }
                      inputProps={
                        Object {
                          "data-testid": "undefined-input",
                          "id": "undefined-input",
                        }
                      }
                      onChange={[Function]}
                      value=""
                    >
                      <WithStyles(ForwardRef(Input))
                        className=""
                        classes={
                          Object {
                            "root": undefined,
                          }
                        }
                        disableUnderline={true}
                        disabled={true}
                        id="access-condition"
                        inputComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "propTypes": Object {
                              "IconComponent": [Function],
                              "MenuProps": [Function],
                              "SelectDisplayProps": [Function],
                              "aria-label": [Function],
                              "autoFocus": [Function],
                              "autoWidth": [Function],
                              "children": [Function],
                              "className": [Function],
                              "classes": [Function],
                              "defaultValue": [Function],
                              "disabled": [Function],
                              "displayEmpty": [Function],
                              "inputRef": [Function],
                              "labelId": [Function],
                              "multiple": [Function],
                              "name": [Function],
                              "onBlur": [Function],
                              "onChange": [Function],
                              "onClose": [Function],
                              "onFocus": [Function],
                              "onOpen": [Function],
                              "open": [Function],
                              "readOnly": [Function],
                              "renderValue": [Function],
                              "required": [Function],
                              "tabIndex": [Function],
                              "type": [Function],
                              "value": [Function],
                              "variant": [Function],
                            },
                            "render": [Function],
                          }
                        }
                        inputProps={
                          Object {
                            "IconComponent": Object {
                              "$$typeof": Symbol(react.memo),
                              "compare": null,
                              "displayName": "ArrowDropDownIcon",
                              "muiName": "SvgIcon",
                              "type": Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "render": [Function],
                              },
                            },
                            "MenuProps": Object {
                              "data-testid": "undefined-options",
                              "id": "undefined-options",
                            },
                            "SelectDisplayProps": Object {
                              "data-testid": "undefined-select",
                              "id": "undefined-select",
                            },
                            "autoWidth": false,
                            "children": Array [
                              <WithStyles(ForwardRef(MenuItem))
                                disabled={true}
                                value=""
                              >
                                Select access conditions
                              </WithStyles(ForwardRef(MenuItem))>,
                              Array [
                                <WithStyles(ForwardRef(MenuItem))
                                  value={9}
                                >
                                  Open Access
                                </WithStyles(ForwardRef(MenuItem))>,
                                <WithStyles(ForwardRef(MenuItem))
                                  value={8}
                                >
                                  Closed Access
                                </WithStyles(ForwardRef(MenuItem))>,
                              ],
                            ],
                            "classes": Object {
                              "disabled": "Mui-disabled",
                              "filled": "MuiSelect-filled",
                              "icon": "MuiSelect-icon",
                              "iconFilled": "MuiSelect-iconFilled",
                              "iconOpen": "MuiSelect-iconOpen",
                              "iconOutlined": "MuiSelect-iconOutlined",
                              "outlined": "MuiSelect-outlined",
                              "root": "MuiSelect-root",
                              "select": "MuiSelect-select",
                              "selectMenu": "MuiSelect-selectMenu",
                            },
                            "data-testid": "undefined-input",
                            "displayEmpty": true,
                            "id": "undefined-input",
                            "labelId": undefined,
                            "multiple": false,
                            "onClose": undefined,
                            "onOpen": undefined,
                            "open": undefined,
                            "renderValue": undefined,
                            "type": undefined,
                            "variant": "standard",
                          }
                        }
                        name="accessCondition"
                        onChange={[Function]}
                        value=""
                      >
                        <ForwardRef(Input)
                          className=""
                          classes={
                            Object {
                              "colorSecondary": "MuiInput-colorSecondary",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "formControl": "MuiInput-formControl",
                              "fullWidth": "MuiInput-fullWidth",
                              "input": "MuiInput-input",
                              "inputMarginDense": "MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInput-inputMultiline",
                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                              "marginDense": "MuiInput-marginDense",
                              "multiline": "MuiInput-multiline",
                              "root": "MuiInput-root",
                              "underline": "MuiInput-underline",
                            }
                          }
                          disableUnderline={true}
                          disabled={true}
                          id="access-condition"
                          inputComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "propTypes": Object {
                                "IconComponent": [Function],
                                "MenuProps": [Function],
                                "SelectDisplayProps": [Function],
                                "aria-label": [Function],
                                "autoFocus": [Function],
                                "autoWidth": [Function],
                                "children": [Function],
                                "className": [Function],
                                "classes": [Function],
                                "defaultValue": [Function],
                                "disabled": [Function],
                                "displayEmpty": [Function],
                                "inputRef": [Function],
                                "labelId": [Function],
                                "multiple": [Function],
                                "name": [Function],
                                "onBlur": [Function],
                                "onChange": [Function],
                                "onClose": [Function],
                                "onFocus": [Function],
                                "onOpen": [Function],
                                "open": [Function],
                                "readOnly": [Function],
                                "renderValue": [Function],
                                "required": [Function],
                                "tabIndex": [Function],
                                "type": [Function],
                                "value": [Function],
                                "variant": [Function],
                              },
                              "render": [Function],
                            }
                          }
                          inputProps={
                            Object {
                              "IconComponent": Object {
                                "$$typeof": Symbol(react.memo),
                                "compare": null,
                                "displayName": "ArrowDropDownIcon",
                                "muiName": "SvgIcon",
                                "type": Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "render": [Function],
                                },
                              },
                              "MenuProps": Object {
                                "data-testid": "undefined-options",
                                "id": "undefined-options",
                              },
                              "SelectDisplayProps": Object {
                                "data-testid": "undefined-select",
                                "id": "undefined-select",
                              },
                              "autoWidth": false,
                              "children": Array [
                                <WithStyles(ForwardRef(MenuItem))
                                  disabled={true}
                                  value=""
                                >
                                  Select access conditions
                                </WithStyles(ForwardRef(MenuItem))>,
                                Array [
                                  <WithStyles(ForwardRef(MenuItem))
                                    value={9}
                                  >
                                    Open Access
                                  </WithStyles(ForwardRef(MenuItem))>,
                                  <WithStyles(ForwardRef(MenuItem))
                                    value={8}
                                  >
                                    Closed Access
                                  </WithStyles(ForwardRef(MenuItem))>,
                                ],
                              ],
                              "classes": Object {
                                "disabled": "Mui-disabled",
                                "filled": "MuiSelect-filled",
                                "icon": "MuiSelect-icon",
                                "iconFilled": "MuiSelect-iconFilled",
                                "iconOpen": "MuiSelect-iconOpen",
                                "iconOutlined": "MuiSelect-iconOutlined",
                                "outlined": "MuiSelect-outlined",
                                "root": "MuiSelect-root",
                                "select": "MuiSelect-select",
                                "selectMenu": "MuiSelect-selectMenu",
                              },
                              "data-testid": "undefined-input",
                              "displayEmpty": true,
                              "id": "undefined-input",
                              "labelId": undefined,
                              "multiple": false,
                              "onClose": undefined,
                              "onOpen": undefined,
                              "open": undefined,
                              "renderValue": undefined,
                              "type": undefined,
                              "variant": "standard",
                            }
                          }
                          name="accessCondition"
                          onChange={[Function]}
                          value=""
                        >
                          <WithStyles(ForwardRef(InputBase))
                            className=""
                            classes={
                              Object {
                                "colorSecondary": "MuiInput-colorSecondary",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "focused": "Mui-focused",
                                "formControl": "MuiInput-formControl",
                                "fullWidth": "MuiInput-fullWidth",
                                "input": "MuiInput-input",
                                "inputMarginDense": "MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInput-inputMultiline",
                                "inputTypeSearch": "MuiInput-inputTypeSearch",
                                "marginDense": "MuiInput-marginDense",
                                "multiline": "MuiInput-multiline",
                                "root": "MuiInput-root",
                                "underline": null,
                              }
                            }
                            disabled={true}
                            fullWidth={false}
                            id="access-condition"
                            inputComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "propTypes": Object {
                                  "IconComponent": [Function],
                                  "MenuProps": [Function],
                                  "SelectDisplayProps": [Function],
                                  "aria-label": [Function],
                                  "autoFocus": [Function],
                                  "autoWidth": [Function],
                                  "children": [Function],
                                  "className": [Function],
                                  "classes": [Function],
                                  "defaultValue": [Function],
                                  "disabled": [Function],
                                  "displayEmpty": [Function],
                                  "inputRef": [Function],
                                  "labelId": [Function],
                                  "multiple": [Function],
                                  "name": [Function],
                                  "onBlur": [Function],
                                  "onChange": [Function],
                                  "onClose": [Function],
                                  "onFocus": [Function],
                                  "onOpen": [Function],
                                  "open": [Function],
                                  "readOnly": [Function],
                                  "renderValue": [Function],
                                  "required": [Function],
                                  "tabIndex": [Function],
                                  "type": [Function],
                                  "value": [Function],
                                  "variant": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            inputProps={
                              Object {
                                "IconComponent": Object {
                                  "$$typeof": Symbol(react.memo),
                                  "compare": null,
                                  "displayName": "ArrowDropDownIcon",
                                  "muiName": "SvgIcon",
                                  "type": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "render": [Function],
                                  },
                                },
                                "MenuProps": Object {
                                  "data-testid": "undefined-options",
                                  "id": "undefined-options",
                                },
                                "SelectDisplayProps": Object {
                                  "data-testid": "undefined-select",
                                  "id": "undefined-select",
                                },
                                "autoWidth": false,
                                "children": Array [
                                  <WithStyles(ForwardRef(MenuItem))
                                    disabled={true}
                                    value=""
                                  >
                                    Select access conditions
                                  </WithStyles(ForwardRef(MenuItem))>,
                                  Array [
                                    <WithStyles(ForwardRef(MenuItem))
                                      value={9}
                                    >
                                      Open Access
                                    </WithStyles(ForwardRef(MenuItem))>,
                                    <WithStyles(ForwardRef(MenuItem))
                                      value={8}
                                    >
                                      Closed Access
                                    </WithStyles(ForwardRef(MenuItem))>,
                                  ],
                                ],
                                "classes": Object {
                                  "disabled": "Mui-disabled",
                                  "filled": "MuiSelect-filled",
                                  "icon": "MuiSelect-icon",
                                  "iconFilled": "MuiSelect-iconFilled",
                                  "iconOpen": "MuiSelect-iconOpen",
                                  "iconOutlined": "MuiSelect-iconOutlined",
                                  "outlined": "MuiSelect-outlined",
                                  "root": "MuiSelect-root",
                                  "select": "MuiSelect-select",
                                  "selectMenu": "MuiSelect-selectMenu",
                                },
                                "data-testid": "undefined-input",
                                "displayEmpty": true,
                                "id": "undefined-input",
                                "labelId": undefined,
                                "multiple": false,
                                "onClose": undefined,
                                "onOpen": undefined,
                                "open": undefined,
                                "renderValue": undefined,
                                "type": undefined,
                                "variant": "standard",
                              }
                            }
                            multiline={false}
                            name="accessCondition"
                            onChange={[Function]}
                            type="text"
                            value=""
                          >
                            <ForwardRef(InputBase)
                              className=""
                              classes={
                                Object {
                                  "adornedEnd": "MuiInputBase-adornedEnd",
                                  "adornedStart": "MuiInputBase-adornedStart",
                                  "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                  "disabled": "Mui-disabled Mui-disabled",
                                  "error": "Mui-error Mui-error",
                                  "focused": "Mui-focused Mui-focused",
                                  "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                  "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                  "input": "MuiInputBase-input MuiInput-input",
                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                  "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                  "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                  "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                  "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                  "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                  "root": "MuiInputBase-root MuiInput-root",
                                }
                              }
                              disabled={true}
                              fullWidth={false}
                              id="access-condition"
                              inputComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "IconComponent": [Function],
                                    "MenuProps": [Function],
                                    "SelectDisplayProps": [Function],
                                    "aria-label": [Function],
                                    "autoFocus": [Function],
                                    "autoWidth": [Function],
                                    "children": [Function],
                                    "className": [Function],
                                    "classes": [Function],
                                    "defaultValue": [Function],
                                    "disabled": [Function],
                                    "displayEmpty": [Function],
                                    "inputRef": [Function],
                                    "labelId": [Function],
                                    "multiple": [Function],
                                    "name": [Function],
                                    "onBlur": [Function],
                                    "onChange": [Function],
                                    "onClose": [Function],
                                    "onFocus": [Function],
                                    "onOpen": [Function],
                                    "open": [Function],
                                    "readOnly": [Function],
                                    "renderValue": [Function],
                                    "required": [Function],
                                    "tabIndex": [Function],
                                    "type": [Function],
                                    "value": [Function],
                                    "variant": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              inputProps={
                                Object {
                                  "IconComponent": Object {
                                    "$$typeof": Symbol(react.memo),
                                    "compare": null,
                                    "displayName": "ArrowDropDownIcon",
                                    "muiName": "SvgIcon",
                                    "type": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "render": [Function],
                                    },
                                  },
                                  "MenuProps": Object {
                                    "data-testid": "undefined-options",
                                    "id": "undefined-options",
                                  },
                                  "SelectDisplayProps": Object {
                                    "data-testid": "undefined-select",
                                    "id": "undefined-select",
                                  },
                                  "autoWidth": false,
                                  "children": Array [
                                    <WithStyles(ForwardRef(MenuItem))
                                      disabled={true}
                                      value=""
                                    >
                                      Select access conditions
                                    </WithStyles(ForwardRef(MenuItem))>,
                                    Array [
                                      <WithStyles(ForwardRef(MenuItem))
                                        value={9}
                                      >
                                        Open Access
                                      </WithStyles(ForwardRef(MenuItem))>,
                                      <WithStyles(ForwardRef(MenuItem))
                                        value={8}
                                      >
                                        Closed Access
                                      </WithStyles(ForwardRef(MenuItem))>,
                                    ],
                                  ],
                                  "classes": Object {
                                    "disabled": "Mui-disabled",
                                    "filled": "MuiSelect-filled",
                                    "icon": "MuiSelect-icon",
                                    "iconFilled": "MuiSelect-iconFilled",
                                    "iconOpen": "MuiSelect-iconOpen",
                                    "iconOutlined": "MuiSelect-iconOutlined",
                                    "outlined": "MuiSelect-outlined",
                                    "root": "MuiSelect-root",
                                    "select": "MuiSelect-select",
                                    "selectMenu": "MuiSelect-selectMenu",
                                  },
                                  "data-testid": "undefined-input",
                                  "displayEmpty": true,
                                  "id": "undefined-input",
                                  "labelId": undefined,
                                  "multiple": false,
                                  "onClose": undefined,
                                  "onOpen": undefined,
                                  "open": undefined,
                                  "renderValue": undefined,
                                  "type": undefined,
                                  "variant": "standard",
                                }
                              }
                              multiline={false}
                              name="accessCondition"
                              onChange={[Function]}
                              type="text"
                              value=""
                            >
                              <div
                                className="MuiInputBase-root MuiInput-root Mui-disabled Mui-disabled Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
                                onClick={[Function]}
                              >
                                <ForwardRef(SelectInput)
                                  IconComponent={
                                    Object {
                                      "$$typeof": Symbol(react.memo),
                                      "compare": null,
                                      "displayName": "ArrowDropDownIcon",
                                      "muiName": "SvgIcon",
                                      "type": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      },
                                    }
                                  }
                                  MenuProps={
                                    Object {
                                      "data-testid": "undefined-options",
                                      "id": "undefined-options",
                                    }
                                  }
                                  SelectDisplayProps={
                                    Object {
                                      "data-testid": "undefined-select",
                                      "id": "undefined-select",
                                    }
                                  }
                                  aria-invalid={true}
                                  autoWidth={false}
                                  className="MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled"
                                  classes={
                                    Object {
                                      "disabled": "Mui-disabled",
                                      "filled": "MuiSelect-filled",
                                      "icon": "MuiSelect-icon",
                                      "iconFilled": "MuiSelect-iconFilled",
                                      "iconOpen": "MuiSelect-iconOpen",
                                      "iconOutlined": "MuiSelect-iconOutlined",
                                      "outlined": "MuiSelect-outlined",
                                      "root": "MuiSelect-root",
                                      "select": "MuiSelect-select",
                                      "selectMenu": "MuiSelect-selectMenu",
                                    }
                                  }
                                  data-testid="undefined-input"
                                  disabled={true}
                                  displayEmpty={true}
                                  id="undefined-input"
                                  inputRef={[Function]}
                                  multiple={false}
                                  name="accessCondition"
                                  onAnimationStart={[Function]}
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={true}
                                  value=""
                                  variant="standard"
                                >
                                  <div
                                    aria-disabled="true"
                                    aria-haspopup="listbox"
                                    aria-labelledby="undefined-select"
                                    className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled Mui-disabled"
                                    data-testid="undefined-select"
                                    id="undefined-select"
                                    onBlur={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onMouseDown={null}
                                    role="button"
                                    tabIndex={null}
                                  >
                                    Select access conditions
                                  </div>
                                  <input
                                    data-testid="undefined-input"
                                    id="undefined-input"
                                    name="accessCondition"
                                    onAnimationStart={[Function]}
                                    type="hidden"
                                    value=""
                                  />
                                  <ForwardRef
                                    className="MuiSelect-icon Mui-disabled"
                                  >
                                    <WithStyles(ForwardRef(SvgIcon))
                                      className="MuiSelect-icon Mui-disabled"
                                    >
                                      <ForwardRef(SvgIcon)
                                        className="MuiSelect-icon Mui-disabled"
                                        classes={
                                          Object {
                                            "colorAction": "MuiSvgIcon-colorAction",
                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                            "colorError": "MuiSvgIcon-colorError",
                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                            "root": "MuiSvgIcon-root",
                                          }
                                        }
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="MuiSvgIcon-root MuiSelect-icon Mui-disabled"
                                          focusable="false"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M7 10l5 5 5-5z"
                                          />
                                        </svg>
                                      </ForwardRef(SvgIcon)>
                                    </WithStyles(ForwardRef(SvgIcon))>
                                  </ForwardRef>
                                  <WithStyles(ForwardRef(Menu))
                                    MenuListProps={
                                      Object {
                                        "aria-labelledby": undefined,
                                        "disableListWrap": true,
                                        "role": "listbox",
                                      }
                                    }
                                    PaperProps={
                                      Object {
                                        "style": Object {
                                          "minWidth": undefined,
                                        },
                                      }
                                    }
                                    anchorEl={
                                      <div
                                        aria-disabled="true"
                                        aria-haspopup="listbox"
                                        aria-labelledby="undefined-select"
                                        class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled Mui-disabled"
                                        data-testid="undefined-select"
                                        id="undefined-select"
                                        role="button"
                                      >
                                        Select access conditions
                                      </div>
                                    }
                                    data-testid="undefined-options"
                                    id="undefined-options"
                                    onClose={[Function]}
                                    open={false}
                                  >
                                    <ForwardRef(Menu)
                                      MenuListProps={
                                        Object {
                                          "aria-labelledby": undefined,
                                          "disableListWrap": true,
                                          "role": "listbox",
                                        }
                                      }
                                      PaperProps={
                                        Object {
                                          "style": Object {
                                            "minWidth": undefined,
                                          },
                                        }
                                      }
                                      anchorEl={
                                        <div
                                          aria-disabled="true"
                                          aria-haspopup="listbox"
                                          aria-labelledby="undefined-select"
                                          class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled Mui-disabled"
                                          data-testid="undefined-select"
                                          id="undefined-select"
                                          role="button"
                                        >
                                          Select access conditions
                                        </div>
                                      }
                                      classes={
                                        Object {
                                          "list": "MuiMenu-list",
                                          "paper": "MuiMenu-paper",
                                        }
                                      }
                                      data-testid="undefined-options"
                                      id="undefined-options"
                                      onClose={[Function]}
                                      open={false}
                                    >
                                      <WithStyles(ForwardRef(Popover))
                                        PaperProps={
                                          Object {
                                            "classes": Object {
                                              "root": "MuiMenu-paper",
                                            },
                                            "style": Object {
                                              "minWidth": undefined,
                                            },
                                          }
                                        }
                                        anchorEl={
                                          <div
                                            aria-disabled="true"
                                            aria-haspopup="listbox"
                                            aria-labelledby="undefined-select"
                                            class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled Mui-disabled"
                                            data-testid="undefined-select"
                                            id="undefined-select"
                                            role="button"
                                          >
                                            Select access conditions
                                          </div>
                                        }
                                        anchorOrigin={
                                          Object {
                                            "horizontal": "left",
                                            "vertical": "top",
                                          }
                                        }
                                        data-testid="undefined-options"
                                        getContentAnchorEl={[Function]}
                                        id="undefined-options"
                                        onClose={[Function]}
                                        onEntering={[Function]}
                                        open={false}
                                        transformOrigin={
                                          Object {
                                            "horizontal": "left",
                                            "vertical": "top",
                                          }
                                        }
                                        transitionDuration="auto"
                                      >
                                        <ForwardRef(Popover)
                                          PaperProps={
                                            Object {
                                              "classes": Object {
                                                "root": "MuiMenu-paper",
                                              },
                                              "style": Object {
                                                "minWidth": undefined,
                                              },
                                            }
                                          }
                                          anchorEl={
                                            <div
                                              aria-disabled="true"
                                              aria-haspopup="listbox"
                                              aria-labelledby="undefined-select"
                                              class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled Mui-disabled"
                                              data-testid="undefined-select"
                                              id="undefined-select"
                                              role="button"
                                            >
                                              Select access conditions
                                            </div>
                                          }
                                          anchorOrigin={
                                            Object {
                                              "horizontal": "left",
                                              "vertical": "top",
                                            }
                                          }
                                          classes={
                                            Object {
                                              "paper": "MuiPopover-paper",
                                              "root": "MuiPopover-root",
                                            }
                                          }
                                          data-testid="undefined-options"
                                          getContentAnchorEl={[Function]}
                                          id="undefined-options"
                                          onClose={[Function]}
                                          onEntering={[Function]}
                                          open={false}
                                          transformOrigin={
                                            Object {
                                              "horizontal": "left",
                                              "vertical": "top",
                                            }
                                          }
                                          transitionDuration="auto"
                                        >
                                          <ForwardRef(Modal)
                                            BackdropProps={
                                              Object {
                                                "invisible": true,
                                              }
                                            }
                                            className="MuiPopover-root"
                                            container={<body />}
                                            data-testid="undefined-options"
                                            id="undefined-options"
                                            onClose={[Function]}
                                            open={false}
                                          />
                                        </ForwardRef(Popover)>
                                      </WithStyles(ForwardRef(Popover))>
                                    </ForwardRef(Menu)>
                                  </WithStyles(ForwardRef(Menu))>
                                </ForwardRef(SelectInput)>
                              </div>
                            </ForwardRef(InputBase)>
                          </WithStyles(ForwardRef(InputBase))>
                        </ForwardRef(Input)>
                      </WithStyles(ForwardRef(Input))>
                    </ForwardRef(Select)>
                  </WithStyles(ForwardRef(Select))>
                  <WithStyles(ForwardRef(FormHelperText))>
                    <ForwardRef(FormHelperText)
                      classes={
                        Object {
                          "contained": "MuiFormHelperText-contained",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "filled": "MuiFormHelperText-filled",
                          "focused": "Mui-focused",
                          "marginDense": "MuiFormHelperText-marginDense",
                          "required": "Mui-required",
                          "root": "MuiFormHelperText-root",
                        }
                      }
                    >
                      <p
                        className="MuiFormHelperText-root Mui-error Mui-required"
                      >
                        This field is required
                      </p>
                    </ForwardRef(FormHelperText)>
                  </WithStyles(ForwardRef(FormHelperText))>
                </div>
              </ForwardRef(FormControl)>
            </WithStyles(ForwardRef(FormControl))>
          </FileUploadAccessSelector>
        </MuiPickersUtilsProvider>
      </ThemeProvider>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`Component FileUploadAccessSelector should render access condition disabled if disabled flag is set and with value 1`] = `
<Provider
  store={
    Object {
      "dispatch": [MockFunction],
      "getState": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
        ],
      },
      "subscribe": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ThemeProvider
        theme={
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "up": [Function],
              "values": Object {
                "lg": 1280,
                "md": 960,
                "sm": 600,
                "xl": 1920,
                "xs": 0,
              },
              "width": [Function],
            },
            "direction": "ltr",
            "graphs": Object {
              "color1": "#d72865",
              "color2": "#1e7d94",
              "color3": "#49075E",
              "color4": "#468fcc",
              "color5": "#f28620",
              "color6": "#333333",
              "color7": "#595959",
            },
            "hexToRGBA": [Function],
            "mixins": Object {
              "gutters": [Function],
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "overrides": Object {
              "MUIDataTable": Object {
                "paper": Object {
                  "boxShadow": "none",
                  "margin": 0,
                  "padding": 0,
                },
              },
              "MuiFormLabel": Object {
                "root": Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                  "whiteSpace": "nowrap",
                  "width": "100%",
                },
              },
              "MuiIconButton": Object {
                "colorInherit": Object {
                  "color": "none",
                },
              },
              "MuiMenuItem": Object {
                "root": Object {
                  "&$selected": Object {
                    "backgroundColor": "#4085C6 !important",
                    "color": "#FFFFFF",
                  },
                },
              },
            },
            "palette": Object {
              "accent": Object {
                "dark": "#2a557d",
                "light": "#54acff",
                "main": "#316799",
              },
              "action": Object {
                "activatedOpacity": 0.12,
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "disabledOpacity": 0.38,
                "focus": "rgba(0, 0, 0, 0.12)",
                "focusOpacity": 0.12,
                "hover": "rgba(0, 0, 0, 0.04)",
                "hoverOpacity": 0.04,
                "selected": "rgba(0, 0, 0, 0.08)",
                "selectedOpacity": 0.08,
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fafafa",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "#790000",
                "light": "#ff0000",
                "main": "#c80000",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#f5f5f5",
                "200": "#eeeeee",
                "300": "#e0e0e0",
                "400": "#bdbdbd",
                "50": "#fafafa",
                "500": "#9e9e9e",
                "600": "#757575",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#d5d5d5",
                "A200": "#aaaaaa",
                "A400": "#303030",
                "A700": "#616161",
              },
              "info": Object {
                "contrastText": "#fff",
                "dark": "#1976d2",
                "light": "#64b5f6",
                "main": "#2196f3",
              },
              "primary": Object {
                "contrastText": "#fff",
                "dark": "#3b1a59",
                "gradient": Object {
                  "diagonal": Object {
                    "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                  "horizontal": Object {
                    "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                },
                "light": "#962A8B",
                "main": "#51247A",
              },
              "secondary": Object {
                "contrastText": "#fff",
                "dark": "#333333",
                "light": "#f2f2f2",
                "main": "#595959",
              },
              "success": Object {
                "contrastText": "#fff",
                "dark": "#005000",
                "light": "#00a700",
                "main": "#007200",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "hint": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.54)",
              },
              "tonalOffset": 0.2,
              "type": "light",
              "warning": Object {
                "contrastText": "#fff",
                "dark": "#542400",
                "light": "#ff9a57",
                "main": "#bf5000",
              },
              "white": Object {
                "main": "#FFFFFF",
              },
            },
            "props": Object {},
            "shadows": Array [
              "none",
              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": [Function],
            "status": Object {
              "danger": "#f44336",
              "warning": "#ff9800",
            },
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.5,
              },
              "body2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 300,
                "letterSpacing": "0.01071em",
                "lineHeight": 1.43,
              },
              "button": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.02857em",
                "lineHeight": 1.75,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.03333em",
                "lineHeight": 1.66,
              },
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": 14,
              "fontWeightBold": 700,
              "fontWeightLight": 200,
              "fontWeightMedium": 400,
              "fontWeightRegular": 300,
              "h1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "6rem",
                "fontWeight": 200,
                "letterSpacing": "-0.01562em",
                "lineHeight": 1.167,
              },
              "h2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 200,
                "letterSpacing": "-0.00833em",
                "lineHeight": 1.2,
              },
              "h3": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.167,
              },
              "h4": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 300,
                "letterSpacing": "0.00735em",
                "lineHeight": 1.235,
              },
              "h5": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.334,
              },
              "h6": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.25rem",
                "fontWeight": 400,
                "letterSpacing": "0.0075em",
                "lineHeight": 1.6,
              },
              "htmlFontSize": 16,
              "overline": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.08333em",
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "round": [Function],
              "subtitle1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.00714em",
                "lineHeight": 1.57,
              },
              "suppressDeprecationWarnings": true,
              "useNextVariants": true,
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "speedDial": 1050,
              "tooltip": 1500,
            },
            Symbol(mui.nested): false,
          }
        }
      >
        <MuiPickersUtilsProvider
          utils={[Function]}
        >
          <FileUploadAccessSelector
            classes={
              Object {
                "selector": "",
              }
            }
            disabled={true}
            locale={
              Object {
                "accessSelectOptionsText": Object {
                  "8": "Closed Access",
                  "9": "Open Access",
                },
                "errorMessage": "This field is required",
                "initialValue": "Select access conditions",
              }
            }
            value={8}
          >
            <WithStyles(ForwardRef(FormControl))
              fullWidth={true}
              required={true}
            >
              <ForwardRef(FormControl)
                classes={
                  Object {
                    "fullWidth": "MuiFormControl-fullWidth",
                    "marginDense": "MuiFormControl-marginDense",
                    "marginNormal": "MuiFormControl-marginNormal",
                    "root": "MuiFormControl-root",
                  }
                }
                fullWidth={true}
                required={true}
              >
                <div
                  className="MuiFormControl-root MuiFormControl-fullWidth"
                >
                  <WithStyles(ForwardRef(Select))
                    MenuProps={
                      Object {
                        "data-testid": "undefined-options",
                        "id": "undefined-options",
                      }
                    }
                    SelectDisplayProps={
                      Object {
                        "data-testid": "undefined-select",
                        "id": "undefined-select",
                      }
                    }
                    className=""
                    disabled={true}
                    displayEmpty={true}
                    input={
                      <WithStyles(ForwardRef(Input))
                        classes={
                          Object {
                            "root": undefined,
                          }
                        }
                        disableUnderline={true}
                        id="access-condition"
                        name="accessCondition"
                      />
                    }
                    inputProps={
                      Object {
                        "data-testid": "undefined-input",
                        "id": "undefined-input",
                      }
                    }
                    onChange={[Function]}
                    value={8}
                  >
                    <ForwardRef(Select)
                      MenuProps={
                        Object {
                          "data-testid": "undefined-options",
                          "id": "undefined-options",
                        }
                      }
                      SelectDisplayProps={
                        Object {
                          "data-testid": "undefined-select",
                          "id": "undefined-select",
                        }
                      }
                      className=""
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "filled": "MuiSelect-filled",
                          "icon": "MuiSelect-icon",
                          "iconFilled": "MuiSelect-iconFilled",
                          "iconOpen": "MuiSelect-iconOpen",
                          "iconOutlined": "MuiSelect-iconOutlined",
                          "outlined": "MuiSelect-outlined",
                          "root": "MuiSelect-root",
                          "select": "MuiSelect-select",
                          "selectMenu": "MuiSelect-selectMenu",
                        }
                      }
                      disabled={true}
                      displayEmpty={true}
                      input={
                        <WithStyles(ForwardRef(Input))
                          classes={
                            Object {
                              "root": undefined,
                            }
                          }
                          disableUnderline={true}
                          id="access-condition"
                          name="accessCondition"
                        />
                      }
                      inputProps={
                        Object {
                          "data-testid": "undefined-input",
                          "id": "undefined-input",
                        }
                      }
                      onChange={[Function]}
                      value={8}
                    >
                      <WithStyles(ForwardRef(Input))
                        className=""
                        classes={
                          Object {
                            "root": undefined,
                          }
                        }
                        disableUnderline={true}
                        disabled={true}
                        id="access-condition"
                        inputComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "propTypes": Object {
                              "IconComponent": [Function],
                              "MenuProps": [Function],
                              "SelectDisplayProps": [Function],
                              "aria-label": [Function],
                              "autoFocus": [Function],
                              "autoWidth": [Function],
                              "children": [Function],
                              "className": [Function],
                              "classes": [Function],
                              "defaultValue": [Function],
                              "disabled": [Function],
                              "displayEmpty": [Function],
                              "inputRef": [Function],
                              "labelId": [Function],
                              "multiple": [Function],
                              "name": [Function],
                              "onBlur": [Function],
                              "onChange": [Function],
                              "onClose": [Function],
                              "onFocus": [Function],
                              "onOpen": [Function],
                              "open": [Function],
                              "readOnly": [Function],
                              "renderValue": [Function],
                              "required": [Function],
                              "tabIndex": [Function],
                              "type": [Function],
                              "value": [Function],
                              "variant": [Function],
                            },
                            "render": [Function],
                          }
                        }
                        inputProps={
                          Object {
                            "IconComponent": Object {
                              "$$typeof": Symbol(react.memo),
                              "compare": null,
                              "displayName": "ArrowDropDownIcon",
                              "muiName": "SvgIcon",
                              "type": Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "render": [Function],
                              },
                            },
                            "MenuProps": Object {
                              "data-testid": "undefined-options",
                              "id": "undefined-options",
                            },
                            "SelectDisplayProps": Object {
                              "data-testid": "undefined-select",
                              "id": "undefined-select",
                            },
                            "autoWidth": false,
                            "children": Array [
                              <WithStyles(ForwardRef(MenuItem))
                                disabled={true}
                                value=""
                              >
                                Select access conditions
                              </WithStyles(ForwardRef(MenuItem))>,
                              Array [
                                <WithStyles(ForwardRef(MenuItem))
                                  value={9}
                                >
                                  Open Access
                                </WithStyles(ForwardRef(MenuItem))>,
                                <WithStyles(ForwardRef(MenuItem))
                                  value={8}
                                >
                                  Closed Access
                                </WithStyles(ForwardRef(MenuItem))>,
                              ],
                            ],
                            "classes": Object {
                              "disabled": "Mui-disabled",
                              "filled": "MuiSelect-filled",
                              "icon": "MuiSelect-icon",
                              "iconFilled": "MuiSelect-iconFilled",
                              "iconOpen": "MuiSelect-iconOpen",
                              "iconOutlined": "MuiSelect-iconOutlined",
                              "outlined": "MuiSelect-outlined",
                              "root": "MuiSelect-root",
                              "select": "MuiSelect-select",
                              "selectMenu": "MuiSelect-selectMenu",
                            },
                            "data-testid": "undefined-input",
                            "displayEmpty": true,
                            "id": "undefined-input",
                            "labelId": undefined,
                            "multiple": false,
                            "onClose": undefined,
                            "onOpen": undefined,
                            "open": undefined,
                            "renderValue": undefined,
                            "type": undefined,
                            "variant": "standard",
                          }
                        }
                        name="accessCondition"
                        onChange={[Function]}
                        value={8}
                      >
                        <ForwardRef(Input)
                          className=""
                          classes={
                            Object {
                              "colorSecondary": "MuiInput-colorSecondary",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "formControl": "MuiInput-formControl",
                              "fullWidth": "MuiInput-fullWidth",
                              "input": "MuiInput-input",
                              "inputMarginDense": "MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInput-inputMultiline",
                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                              "marginDense": "MuiInput-marginDense",
                              "multiline": "MuiInput-multiline",
                              "root": "MuiInput-root",
                              "underline": "MuiInput-underline",
                            }
                          }
                          disableUnderline={true}
                          disabled={true}
                          id="access-condition"
                          inputComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "propTypes": Object {
                                "IconComponent": [Function],
                                "MenuProps": [Function],
                                "SelectDisplayProps": [Function],
                                "aria-label": [Function],
                                "autoFocus": [Function],
                                "autoWidth": [Function],
                                "children": [Function],
                                "className": [Function],
                                "classes": [Function],
                                "defaultValue": [Function],
                                "disabled": [Function],
                                "displayEmpty": [Function],
                                "inputRef": [Function],
                                "labelId": [Function],
                                "multiple": [Function],
                                "name": [Function],
                                "onBlur": [Function],
                                "onChange": [Function],
                                "onClose": [Function],
                                "onFocus": [Function],
                                "onOpen": [Function],
                                "open": [Function],
                                "readOnly": [Function],
                                "renderValue": [Function],
                                "required": [Function],
                                "tabIndex": [Function],
                                "type": [Function],
                                "value": [Function],
                                "variant": [Function],
                              },
                              "render": [Function],
                            }
                          }
                          inputProps={
                            Object {
                              "IconComponent": Object {
                                "$$typeof": Symbol(react.memo),
                                "compare": null,
                                "displayName": "ArrowDropDownIcon",
                                "muiName": "SvgIcon",
                                "type": Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "render": [Function],
                                },
                              },
                              "MenuProps": Object {
                                "data-testid": "undefined-options",
                                "id": "undefined-options",
                              },
                              "SelectDisplayProps": Object {
                                "data-testid": "undefined-select",
                                "id": "undefined-select",
                              },
                              "autoWidth": false,
                              "children": Array [
                                <WithStyles(ForwardRef(MenuItem))
                                  disabled={true}
                                  value=""
                                >
                                  Select access conditions
                                </WithStyles(ForwardRef(MenuItem))>,
                                Array [
                                  <WithStyles(ForwardRef(MenuItem))
                                    value={9}
                                  >
                                    Open Access
                                  </WithStyles(ForwardRef(MenuItem))>,
                                  <WithStyles(ForwardRef(MenuItem))
                                    value={8}
                                  >
                                    Closed Access
                                  </WithStyles(ForwardRef(MenuItem))>,
                                ],
                              ],
                              "classes": Object {
                                "disabled": "Mui-disabled",
                                "filled": "MuiSelect-filled",
                                "icon": "MuiSelect-icon",
                                "iconFilled": "MuiSelect-iconFilled",
                                "iconOpen": "MuiSelect-iconOpen",
                                "iconOutlined": "MuiSelect-iconOutlined",
                                "outlined": "MuiSelect-outlined",
                                "root": "MuiSelect-root",
                                "select": "MuiSelect-select",
                                "selectMenu": "MuiSelect-selectMenu",
                              },
                              "data-testid": "undefined-input",
                              "displayEmpty": true,
                              "id": "undefined-input",
                              "labelId": undefined,
                              "multiple": false,
                              "onClose": undefined,
                              "onOpen": undefined,
                              "open": undefined,
                              "renderValue": undefined,
                              "type": undefined,
                              "variant": "standard",
                            }
                          }
                          name="accessCondition"
                          onChange={[Function]}
                          value={8}
                        >
                          <WithStyles(ForwardRef(InputBase))
                            className=""
                            classes={
                              Object {
                                "colorSecondary": "MuiInput-colorSecondary",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "focused": "Mui-focused",
                                "formControl": "MuiInput-formControl",
                                "fullWidth": "MuiInput-fullWidth",
                                "input": "MuiInput-input",
                                "inputMarginDense": "MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInput-inputMultiline",
                                "inputTypeSearch": "MuiInput-inputTypeSearch",
                                "marginDense": "MuiInput-marginDense",
                                "multiline": "MuiInput-multiline",
                                "root": "MuiInput-root",
                                "underline": null,
                              }
                            }
                            disabled={true}
                            fullWidth={false}
                            id="access-condition"
                            inputComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "propTypes": Object {
                                  "IconComponent": [Function],
                                  "MenuProps": [Function],
                                  "SelectDisplayProps": [Function],
                                  "aria-label": [Function],
                                  "autoFocus": [Function],
                                  "autoWidth": [Function],
                                  "children": [Function],
                                  "className": [Function],
                                  "classes": [Function],
                                  "defaultValue": [Function],
                                  "disabled": [Function],
                                  "displayEmpty": [Function],
                                  "inputRef": [Function],
                                  "labelId": [Function],
                                  "multiple": [Function],
                                  "name": [Function],
                                  "onBlur": [Function],
                                  "onChange": [Function],
                                  "onClose": [Function],
                                  "onFocus": [Function],
                                  "onOpen": [Function],
                                  "open": [Function],
                                  "readOnly": [Function],
                                  "renderValue": [Function],
                                  "required": [Function],
                                  "tabIndex": [Function],
                                  "type": [Function],
                                  "value": [Function],
                                  "variant": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            inputProps={
                              Object {
                                "IconComponent": Object {
                                  "$$typeof": Symbol(react.memo),
                                  "compare": null,
                                  "displayName": "ArrowDropDownIcon",
                                  "muiName": "SvgIcon",
                                  "type": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "render": [Function],
                                  },
                                },
                                "MenuProps": Object {
                                  "data-testid": "undefined-options",
                                  "id": "undefined-options",
                                },
                                "SelectDisplayProps": Object {
                                  "data-testid": "undefined-select",
                                  "id": "undefined-select",
                                },
                                "autoWidth": false,
                                "children": Array [
                                  <WithStyles(ForwardRef(MenuItem))
                                    disabled={true}
                                    value=""
                                  >
                                    Select access conditions
                                  </WithStyles(ForwardRef(MenuItem))>,
                                  Array [
                                    <WithStyles(ForwardRef(MenuItem))
                                      value={9}
                                    >
                                      Open Access
                                    </WithStyles(ForwardRef(MenuItem))>,
                                    <WithStyles(ForwardRef(MenuItem))
                                      value={8}
                                    >
                                      Closed Access
                                    </WithStyles(ForwardRef(MenuItem))>,
                                  ],
                                ],
                                "classes": Object {
                                  "disabled": "Mui-disabled",
                                  "filled": "MuiSelect-filled",
                                  "icon": "MuiSelect-icon",
                                  "iconFilled": "MuiSelect-iconFilled",
                                  "iconOpen": "MuiSelect-iconOpen",
                                  "iconOutlined": "MuiSelect-iconOutlined",
                                  "outlined": "MuiSelect-outlined",
                                  "root": "MuiSelect-root",
                                  "select": "MuiSelect-select",
                                  "selectMenu": "MuiSelect-selectMenu",
                                },
                                "data-testid": "undefined-input",
                                "displayEmpty": true,
                                "id": "undefined-input",
                                "labelId": undefined,
                                "multiple": false,
                                "onClose": undefined,
                                "onOpen": undefined,
                                "open": undefined,
                                "renderValue": undefined,
                                "type": undefined,
                                "variant": "standard",
                              }
                            }
                            multiline={false}
                            name="accessCondition"
                            onChange={[Function]}
                            type="text"
                            value={8}
                          >
                            <ForwardRef(InputBase)
                              className=""
                              classes={
                                Object {
                                  "adornedEnd": "MuiInputBase-adornedEnd",
                                  "adornedStart": "MuiInputBase-adornedStart",
                                  "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                  "disabled": "Mui-disabled Mui-disabled",
                                  "error": "Mui-error Mui-error",
                                  "focused": "Mui-focused Mui-focused",
                                  "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                  "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                  "input": "MuiInputBase-input MuiInput-input",
                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                  "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                  "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                  "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                  "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                  "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                  "root": "MuiInputBase-root MuiInput-root",
                                }
                              }
                              disabled={true}
                              fullWidth={false}
                              id="access-condition"
                              inputComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "IconComponent": [Function],
                                    "MenuProps": [Function],
                                    "SelectDisplayProps": [Function],
                                    "aria-label": [Function],
                                    "autoFocus": [Function],
                                    "autoWidth": [Function],
                                    "children": [Function],
                                    "className": [Function],
                                    "classes": [Function],
                                    "defaultValue": [Function],
                                    "disabled": [Function],
                                    "displayEmpty": [Function],
                                    "inputRef": [Function],
                                    "labelId": [Function],
                                    "multiple": [Function],
                                    "name": [Function],
                                    "onBlur": [Function],
                                    "onChange": [Function],
                                    "onClose": [Function],
                                    "onFocus": [Function],
                                    "onOpen": [Function],
                                    "open": [Function],
                                    "readOnly": [Function],
                                    "renderValue": [Function],
                                    "required": [Function],
                                    "tabIndex": [Function],
                                    "type": [Function],
                                    "value": [Function],
                                    "variant": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              inputProps={
                                Object {
                                  "IconComponent": Object {
                                    "$$typeof": Symbol(react.memo),
                                    "compare": null,
                                    "displayName": "ArrowDropDownIcon",
                                    "muiName": "SvgIcon",
                                    "type": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "render": [Function],
                                    },
                                  },
                                  "MenuProps": Object {
                                    "data-testid": "undefined-options",
                                    "id": "undefined-options",
                                  },
                                  "SelectDisplayProps": Object {
                                    "data-testid": "undefined-select",
                                    "id": "undefined-select",
                                  },
                                  "autoWidth": false,
                                  "children": Array [
                                    <WithStyles(ForwardRef(MenuItem))
                                      disabled={true}
                                      value=""
                                    >
                                      Select access conditions
                                    </WithStyles(ForwardRef(MenuItem))>,
                                    Array [
                                      <WithStyles(ForwardRef(MenuItem))
                                        value={9}
                                      >
                                        Open Access
                                      </WithStyles(ForwardRef(MenuItem))>,
                                      <WithStyles(ForwardRef(MenuItem))
                                        value={8}
                                      >
                                        Closed Access
                                      </WithStyles(ForwardRef(MenuItem))>,
                                    ],
                                  ],
                                  "classes": Object {
                                    "disabled": "Mui-disabled",
                                    "filled": "MuiSelect-filled",
                                    "icon": "MuiSelect-icon",
                                    "iconFilled": "MuiSelect-iconFilled",
                                    "iconOpen": "MuiSelect-iconOpen",
                                    "iconOutlined": "MuiSelect-iconOutlined",
                                    "outlined": "MuiSelect-outlined",
                                    "root": "MuiSelect-root",
                                    "select": "MuiSelect-select",
                                    "selectMenu": "MuiSelect-selectMenu",
                                  },
                                  "data-testid": "undefined-input",
                                  "displayEmpty": true,
                                  "id": "undefined-input",
                                  "labelId": undefined,
                                  "multiple": false,
                                  "onClose": undefined,
                                  "onOpen": undefined,
                                  "open": undefined,
                                  "renderValue": undefined,
                                  "type": undefined,
                                  "variant": "standard",
                                }
                              }
                              multiline={false}
                              name="accessCondition"
                              onChange={[Function]}
                              type="text"
                              value={8}
                            >
                              <div
                                className="MuiInputBase-root MuiInput-root Mui-disabled Mui-disabled MuiInputBase-formControl MuiInput-formControl"
                                onClick={[Function]}
                              >
                                <ForwardRef(SelectInput)
                                  IconComponent={
                                    Object {
                                      "$$typeof": Symbol(react.memo),
                                      "compare": null,
                                      "displayName": "ArrowDropDownIcon",
                                      "muiName": "SvgIcon",
                                      "type": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      },
                                    }
                                  }
                                  MenuProps={
                                    Object {
                                      "data-testid": "undefined-options",
                                      "id": "undefined-options",
                                    }
                                  }
                                  SelectDisplayProps={
                                    Object {
                                      "data-testid": "undefined-select",
                                      "id": "undefined-select",
                                    }
                                  }
                                  aria-invalid={false}
                                  autoWidth={false}
                                  className="MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled"
                                  classes={
                                    Object {
                                      "disabled": "Mui-disabled",
                                      "filled": "MuiSelect-filled",
                                      "icon": "MuiSelect-icon",
                                      "iconFilled": "MuiSelect-iconFilled",
                                      "iconOpen": "MuiSelect-iconOpen",
                                      "iconOutlined": "MuiSelect-iconOutlined",
                                      "outlined": "MuiSelect-outlined",
                                      "root": "MuiSelect-root",
                                      "select": "MuiSelect-select",
                                      "selectMenu": "MuiSelect-selectMenu",
                                    }
                                  }
                                  data-testid="undefined-input"
                                  disabled={true}
                                  displayEmpty={true}
                                  id="undefined-input"
                                  inputRef={[Function]}
                                  multiple={false}
                                  name="accessCondition"
                                  onAnimationStart={[Function]}
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={true}
                                  value={8}
                                  variant="standard"
                                >
                                  <div
                                    aria-disabled="true"
                                    aria-haspopup="listbox"
                                    aria-labelledby="undefined-select"
                                    className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled Mui-disabled"
                                    data-testid="undefined-select"
                                    id="undefined-select"
                                    onBlur={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onMouseDown={null}
                                    role="button"
                                    tabIndex={null}
                                  >
                                    Closed Access
                                  </div>
                                  <input
                                    data-testid="undefined-input"
                                    id="undefined-input"
                                    name="accessCondition"
                                    onAnimationStart={[Function]}
                                    type="hidden"
                                    value={8}
                                  />
                                  <ForwardRef
                                    className="MuiSelect-icon Mui-disabled"
                                  >
                                    <WithStyles(ForwardRef(SvgIcon))
                                      className="MuiSelect-icon Mui-disabled"
                                    >
                                      <ForwardRef(SvgIcon)
                                        className="MuiSelect-icon Mui-disabled"
                                        classes={
                                          Object {
                                            "colorAction": "MuiSvgIcon-colorAction",
                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                            "colorError": "MuiSvgIcon-colorError",
                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                            "root": "MuiSvgIcon-root",
                                          }
                                        }
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="MuiSvgIcon-root MuiSelect-icon Mui-disabled"
                                          focusable="false"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M7 10l5 5 5-5z"
                                          />
                                        </svg>
                                      </ForwardRef(SvgIcon)>
                                    </WithStyles(ForwardRef(SvgIcon))>
                                  </ForwardRef>
                                  <WithStyles(ForwardRef(Menu))
                                    MenuListProps={
                                      Object {
                                        "aria-labelledby": undefined,
                                        "disableListWrap": true,
                                        "role": "listbox",
                                      }
                                    }
                                    PaperProps={
                                      Object {
                                        "style": Object {
                                          "minWidth": undefined,
                                        },
                                      }
                                    }
                                    anchorEl={
                                      <div
                                        aria-disabled="true"
                                        aria-haspopup="listbox"
                                        aria-labelledby="undefined-select"
                                        class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled Mui-disabled"
                                        data-testid="undefined-select"
                                        id="undefined-select"
                                        role="button"
                                      >
                                        Closed Access
                                      </div>
                                    }
                                    data-testid="undefined-options"
                                    id="undefined-options"
                                    onClose={[Function]}
                                    open={false}
                                  >
                                    <ForwardRef(Menu)
                                      MenuListProps={
                                        Object {
                                          "aria-labelledby": undefined,
                                          "disableListWrap": true,
                                          "role": "listbox",
                                        }
                                      }
                                      PaperProps={
                                        Object {
                                          "style": Object {
                                            "minWidth": undefined,
                                          },
                                        }
                                      }
                                      anchorEl={
                                        <div
                                          aria-disabled="true"
                                          aria-haspopup="listbox"
                                          aria-labelledby="undefined-select"
                                          class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled Mui-disabled"
                                          data-testid="undefined-select"
                                          id="undefined-select"
                                          role="button"
                                        >
                                          Closed Access
                                        </div>
                                      }
                                      classes={
                                        Object {
                                          "list": "MuiMenu-list",
                                          "paper": "MuiMenu-paper",
                                        }
                                      }
                                      data-testid="undefined-options"
                                      id="undefined-options"
                                      onClose={[Function]}
                                      open={false}
                                    >
                                      <WithStyles(ForwardRef(Popover))
                                        PaperProps={
                                          Object {
                                            "classes": Object {
                                              "root": "MuiMenu-paper",
                                            },
                                            "style": Object {
                                              "minWidth": undefined,
                                            },
                                          }
                                        }
                                        anchorEl={
                                          <div
                                            aria-disabled="true"
                                            aria-haspopup="listbox"
                                            aria-labelledby="undefined-select"
                                            class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled Mui-disabled"
                                            data-testid="undefined-select"
                                            id="undefined-select"
                                            role="button"
                                          >
                                            Closed Access
                                          </div>
                                        }
                                        anchorOrigin={
                                          Object {
                                            "horizontal": "left",
                                            "vertical": "top",
                                          }
                                        }
                                        data-testid="undefined-options"
                                        getContentAnchorEl={[Function]}
                                        id="undefined-options"
                                        onClose={[Function]}
                                        onEntering={[Function]}
                                        open={false}
                                        transformOrigin={
                                          Object {
                                            "horizontal": "left",
                                            "vertical": "top",
                                          }
                                        }
                                        transitionDuration="auto"
                                      >
                                        <ForwardRef(Popover)
                                          PaperProps={
                                            Object {
                                              "classes": Object {
                                                "root": "MuiMenu-paper",
                                              },
                                              "style": Object {
                                                "minWidth": undefined,
                                              },
                                            }
                                          }
                                          anchorEl={
                                            <div
                                              aria-disabled="true"
                                              aria-haspopup="listbox"
                                              aria-labelledby="undefined-select"
                                              class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled Mui-disabled"
                                              data-testid="undefined-select"
                                              id="undefined-select"
                                              role="button"
                                            >
                                              Closed Access
                                            </div>
                                          }
                                          anchorOrigin={
                                            Object {
                                              "horizontal": "left",
                                              "vertical": "top",
                                            }
                                          }
                                          classes={
                                            Object {
                                              "paper": "MuiPopover-paper",
                                              "root": "MuiPopover-root",
                                            }
                                          }
                                          data-testid="undefined-options"
                                          getContentAnchorEl={[Function]}
                                          id="undefined-options"
                                          onClose={[Function]}
                                          onEntering={[Function]}
                                          open={false}
                                          transformOrigin={
                                            Object {
                                              "horizontal": "left",
                                              "vertical": "top",
                                            }
                                          }
                                          transitionDuration="auto"
                                        >
                                          <ForwardRef(Modal)
                                            BackdropProps={
                                              Object {
                                                "invisible": true,
                                              }
                                            }
                                            className="MuiPopover-root"
                                            container={<body />}
                                            data-testid="undefined-options"
                                            id="undefined-options"
                                            onClose={[Function]}
                                            open={false}
                                          />
                                        </ForwardRef(Popover)>
                                      </WithStyles(ForwardRef(Popover))>
                                    </ForwardRef(Menu)>
                                  </WithStyles(ForwardRef(Menu))>
                                </ForwardRef(SelectInput)>
                              </div>
                            </ForwardRef(InputBase)>
                          </WithStyles(ForwardRef(InputBase))>
                        </ForwardRef(Input)>
                      </WithStyles(ForwardRef(Input))>
                    </ForwardRef(Select)>
                  </WithStyles(ForwardRef(Select))>
                </div>
              </ForwardRef(FormControl)>
            </WithStyles(ForwardRef(FormControl))>
          </FileUploadAccessSelector>
        </MuiPickersUtilsProvider>
      </ThemeProvider>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`Component FileUploadAccessSelector should render with default setup 1`] = `
<WithStyles(ForwardRef(FormControl))
  error={true}
  fullWidth={true}
  required={true}
>
  <WithStyles(ForwardRef(Select))
    MenuProps={
      Object {
        "data-testid": "undefined-options",
        "id": "undefined-options",
      }
    }
    SelectDisplayProps={
      Object {
        "data-testid": "undefined-select",
        "id": "undefined-select",
      }
    }
    className=""
    displayEmpty={true}
    input={
      <WithStyles(ForwardRef(Input))
        classes={
          Object {
            "root": undefined,
          }
        }
        disableUnderline={true}
        id="access-condition"
        name="accessCondition"
      />
    }
    inputProps={
      Object {
        "data-testid": "undefined-input",
        "id": "undefined-input",
      }
    }
    onChange={[Function]}
    value=""
  >
    <WithStyles(ForwardRef(MenuItem))
      disabled={true}
      value=""
    >
      Select access conditions
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      key="access_option_key_0"
      value={9}
    >
      Open Access
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      key="access_option_key_1"
      value={8}
    >
      Closed Access
    </WithStyles(ForwardRef(MenuItem))>
  </WithStyles(ForwardRef(Select))>
  <WithStyles(ForwardRef(FormHelperText))>
    This field is required
  </WithStyles(ForwardRef(FormHelperText))>
</WithStyles(ForwardRef(FormControl))>
`;

exports[`Component FileUploadAccessSelector should render with styles 1`] = `
<FileUploadAccessSelector
  classes={
    Object {
      "error": "FileUploadAccessSelector-error-71",
      "placeholder": "FileUploadAccessSelector-placeholder-69",
      "selected": "FileUploadAccessSelector-selected-70",
      "selector": "FileUploadAccessSelector-selector-68",
    }
  }
  locale={
    Object {
      "accessSelectOptionsText": Object {
        "8": "Closed Access",
        "9": "Open Access",
      },
      "errorMessage": "This field is required",
      "initialValue": "Select access conditions",
    }
  }
  value=""
/>
`;

exports[`Component FileUploadAccessSelector should render with value 1`] = `
<WithStyles(ForwardRef(FormControl))
  fullWidth={true}
  required={true}
>
  <WithStyles(ForwardRef(Select))
    MenuProps={
      Object {
        "data-testid": "undefined-options",
        "id": "undefined-options",
      }
    }
    SelectDisplayProps={
      Object {
        "data-testid": "undefined-select",
        "id": "undefined-select",
      }
    }
    className=""
    displayEmpty={true}
    input={
      <WithStyles(ForwardRef(Input))
        classes={
          Object {
            "root": undefined,
          }
        }
        disableUnderline={true}
        id="access-condition"
        name="accessCondition"
      />
    }
    inputProps={
      Object {
        "data-testid": "undefined-input",
        "id": "undefined-input",
      }
    }
    onChange={[Function]}
    value={9}
  >
    <WithStyles(ForwardRef(MenuItem))
      disabled={true}
      value=""
    >
      Select access conditions
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      key="access_option_key_0"
      value={9}
    >
      Open Access
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      key="access_option_key_1"
      value={8}
    >
      Closed Access
    </WithStyles(ForwardRef(MenuItem))>
  </WithStyles(ForwardRef(Select))>
</WithStyles(ForwardRef(FormControl))>
`;
