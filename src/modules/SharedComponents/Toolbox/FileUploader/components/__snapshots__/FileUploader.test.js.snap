// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component FileUploader should accept terms and condition and reset back to not accepted state if access condition changed back to closed access 1`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={
      Array [
        "a.txt",
      ]
    }
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
  <Alert
    allowDismiss={false}
    dismissTitle="Click to dismiss this alert"
    message="Successfully added 1 file(s) to upload queue."
    showLoader={false}
    title="Success"
    type="done"
  />
  <div
    style={
      Object {
        "flexGrow": 1,
        "padding": 8,
      }
    }
  >
    <WithStyles(Grid)
      container={true}
      display="column"
      spacing={16}
    >
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadRowHeader)
          onDeleteAll={[Function]}
          requireOpenAccessStatus={true}
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={0}
          key="a.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={true}
          uploadedFile={
            Object {
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "a.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "a.txt",
              "size": 0,
            }
          }
        />
      </WithStyles(Grid)>
    </WithStyles(Grid)>
  </div>
</React.Fragment>
`;

exports[`Component FileUploader should accept terms and condition and reset back to not accepted state if access condition changed back to closed access 2`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={
      Array [
        "a.txt",
      ]
    }
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
  <Alert
    allowDismiss={false}
    dismissTitle="Click to dismiss this alert"
    message="Successfully added 1 file(s) to upload queue."
    showLoader={false}
    title="Success"
    type="done"
  />
  <div
    style={
      Object {
        "flexGrow": 1,
        "padding": 8,
      }
    }
  >
    <WithStyles(Grid)
      container={true}
      display="column"
      spacing={16}
    >
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadRowHeader)
          onDeleteAll={[Function]}
          requireOpenAccessStatus={true}
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={0}
          key="a.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={true}
          uploadedFile={
            Object {
              "access_condition_id": 9,
              "date": "2020-01-01T10:00:00-00:15",
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "a.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "a.txt",
              "size": 0,
            }
          }
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadTermsAndConditions)
          accessTermsAndConditions="I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators."
          isTermsAndConditionsAccepted={false}
          onAcceptTermsAndConditions={[Function]}
        />
      </WithStyles(Grid)>
    </WithStyles(Grid)>
  </div>
</React.Fragment>
`;

exports[`Component FileUploader should accept terms and condition and reset back to not accepted state if access condition changed back to closed access 3`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={
      Array [
        "a.txt",
      ]
    }
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
  <Alert
    allowDismiss={false}
    dismissTitle="Click to dismiss this alert"
    message="Successfully added 1 file(s) to upload queue."
    showLoader={false}
    title="Success"
    type="done"
  />
  <div
    style={
      Object {
        "flexGrow": 1,
        "padding": 8,
      }
    }
  >
    <WithStyles(Grid)
      container={true}
      display="column"
      spacing={16}
    >
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadRowHeader)
          onDeleteAll={[Function]}
          requireOpenAccessStatus={true}
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={0}
          key="a.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={true}
          uploadedFile={
            Object {
              "access_condition_id": 9,
              "date": "2020-01-01T10:00:00-00:15",
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "a.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "a.txt",
              "size": 0,
            }
          }
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadTermsAndConditions)
          accessTermsAndConditions="I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators."
          isTermsAndConditionsAccepted={true}
          onAcceptTermsAndConditions={[Function]}
        />
      </WithStyles(Grid)>
    </WithStyles(Grid)>
  </div>
</React.Fragment>
`;

exports[`Component FileUploader should accept terms and condition and reset back to not accepted state if access condition changed back to closed access 4`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={
      Array [
        "a.txt",
      ]
    }
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
  <Alert
    allowDismiss={false}
    dismissTitle="Click to dismiss this alert"
    message="Successfully added 1 file(s) to upload queue."
    showLoader={false}
    title="Success"
    type="done"
  />
  <div
    style={
      Object {
        "flexGrow": 1,
        "padding": 8,
      }
    }
  >
    <WithStyles(Grid)
      container={true}
      display="column"
      spacing={16}
    >
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadRowHeader)
          onDeleteAll={[Function]}
          requireOpenAccessStatus={true}
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={0}
          key="a.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={true}
          uploadedFile={
            Object {
              "access_condition_id": 8,
              "date": null,
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "a.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "a.txt",
              "size": 0,
            }
          }
        />
      </WithStyles(Grid)>
    </WithStyles(Grid)>
  </div>
</React.Fragment>
`;

exports[`Component FileUploader should not reset file access or embargo date info when second lot of files dropped 1`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={
      Array [
        "a.txt",
        "b.txt",
      ]
    }
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
  <Alert
    allowDismiss={false}
    dismissTitle="Click to dismiss this alert"
    message="Successfully added 2 file(s) to upload queue."
    showLoader={false}
    title="Success"
    type="done"
  />
  <div
    style={
      Object {
        "flexGrow": 1,
        "padding": 8,
      }
    }
  >
    <WithStyles(Grid)
      container={true}
      display="column"
      spacing={16}
    >
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadRowHeader)
          onDeleteAll={[Function]}
          requireOpenAccessStatus={false}
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={0}
          key="a.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "a.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "a.txt",
              "size": 0,
            }
          }
        />
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={1}
          key="b.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "b.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "b.txt",
              "size": 0,
            }
          }
        />
      </WithStyles(Grid)>
    </WithStyles(Grid)>
  </div>
</React.Fragment>
`;

exports[`Component FileUploader should not reset file access or embargo date info when second lot of files dropped 2`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={
      Array [
        "a.txt",
        "b.txt",
      ]
    }
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
  <Alert
    allowDismiss={false}
    dismissTitle="Click to dismiss this alert"
    message="Successfully added 2 file(s) to upload queue."
    showLoader={false}
    title="Success"
    type="done"
  />
  <div
    style={
      Object {
        "flexGrow": 1,
        "padding": 8,
      }
    }
  >
    <WithStyles(Grid)
      container={true}
      display="column"
      spacing={16}
    >
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadRowHeader)
          onDeleteAll={[Function]}
          requireOpenAccessStatus={false}
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={0}
          key="a.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "access_condition_id": 9,
              "date": "2020-01-01T10:00:00-00:15",
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "a.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "a.txt",
              "size": 0,
            }
          }
        />
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={1}
          key="b.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "b.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "b.txt",
              "size": 0,
            }
          }
        />
      </WithStyles(Grid)>
    </WithStyles(Grid)>
  </div>
</React.Fragment>
`;

exports[`Component FileUploader should not reset file access or embargo date info when second lot of files dropped 3`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={
      Array [
        "a.txt",
        "b.txt",
      ]
    }
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
  <Alert
    allowDismiss={false}
    dismissTitle="Click to dismiss this alert"
    message="Successfully added 2 file(s) to upload queue."
    showLoader={false}
    title="Success"
    type="done"
  />
  <div
    style={
      Object {
        "flexGrow": 1,
        "padding": 8,
      }
    }
  >
    <WithStyles(Grid)
      container={true}
      display="column"
      spacing={16}
    >
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadRowHeader)
          onDeleteAll={[Function]}
          requireOpenAccessStatus={false}
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={0}
          key="a.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "access_condition_id": 9,
              "date": "2020-01-01T10:00:00-00:15",
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "a.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "a.txt",
              "size": 0,
            }
          }
        />
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={1}
          key="b.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "access_condition_id": 8,
              "date": null,
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "b.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "b.txt",
              "size": 0,
            }
          }
        />
      </WithStyles(Grid)>
    </WithStyles(Grid)>
  </div>
</React.Fragment>
`;

exports[`Component FileUploader should not reset file access or embargo date info when second lot of files dropped 4`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={
      Array [
        "a.txt",
        "b.txt",
        "c.txt",
        "d.txt",
      ]
    }
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
  <Alert
    allowDismiss={false}
    dismissTitle="Click to dismiss this alert"
    message="Successfully added 4 file(s) to upload queue."
    showLoader={false}
    title="Success"
    type="done"
  />
  <div
    style={
      Object {
        "flexGrow": 1,
        "padding": 8,
      }
    }
  >
    <WithStyles(Grid)
      container={true}
      display="column"
      spacing={16}
    >
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadRowHeader)
          onDeleteAll={[Function]}
          requireOpenAccessStatus={false}
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={2}
          index={0}
          key="a.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "access_condition_id": 9,
              "date": "2020-01-01T10:00:00-00:15",
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "a.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "a.txt",
              "size": 0,
            }
          }
        />
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={2}
          index={1}
          key="b.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "access_condition_id": 8,
              "date": null,
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "b.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "b.txt",
              "size": 0,
            }
          }
        />
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={2}
          index={2}
          key="c.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "c.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "c.txt",
              "size": 0,
            }
          }
        />
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={2}
          index={3}
          key="d.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "d.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "d.txt",
              "size": 0,
            }
          }
        />
      </WithStyles(Grid)>
    </WithStyles(Grid)>
  </div>
</React.Fragment>
`;

exports[`Component FileUploader should render default component 1`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={Array []}
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
</React.Fragment>
`;

exports[`Component FileUploader should render disabled component 1`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    disabled={true}
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={Array []}
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
</React.Fragment>
`;

exports[`Component FileUploader should render rows for uploaded files 1`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={Array []}
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
</React.Fragment>
`;

exports[`Component FileUploader should render rows for uploaded files 2`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={
      Array [
        "a.txt",
        "b.txt",
      ]
    }
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
  <Alert
    allowDismiss={false}
    dismissTitle="Click to dismiss this alert"
    message="Successfully added 2 file(s) to upload queue."
    showLoader={false}
    title="Success"
    type="done"
  />
  <div
    style={
      Object {
        "flexGrow": 1,
        "padding": 8,
      }
    }
  >
    <WithStyles(Grid)
      container={true}
      display="column"
      spacing={16}
    >
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadRowHeader)
          onDeleteAll={[Function]}
          requireOpenAccessStatus={false}
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={0}
          key="a.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "a.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "a.txt",
              "size": 0,
            }
          }
        />
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={1}
          key="b.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "b.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "b.txt",
              "size": 0,
            }
          }
        />
      </WithStyles(Grid)>
    </WithStyles(Grid)>
  </div>
</React.Fragment>
`;

exports[`Component FileUploader should render rows for uploaded files 3`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={
      Array [
        "b.txt",
      ]
    }
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
  <Alert
    allowDismiss={false}
    dismissTitle="Click to dismiss this alert"
    message="Successfully added 1 file(s) to upload queue."
    showLoader={false}
    title="Success"
    type="done"
  />
  <div
    style={
      Object {
        "flexGrow": 1,
        "padding": 8,
      }
    }
  >
    <WithStyles(Grid)
      container={true}
      display="column"
      spacing={16}
    >
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadRowHeader)
          onDeleteAll={[Function]}
          requireOpenAccessStatus={false}
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={0}
          key="b.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "b.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "b.txt",
              "size": 0,
            }
          }
        />
      </WithStyles(Grid)>
    </WithStyles(Grid)>
  </div>
</React.Fragment>
`;

exports[`Component FileUploader should render rows for uploaded files 4`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={Array []}
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
</React.Fragment>
`;

exports[`Component FileUploader should render rows for uploaded files with access condition dropdown based on quick template Id and require open access 1`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={Array []}
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
</React.Fragment>
`;

exports[`Component FileUploader should render rows for uploaded files with access condition dropdown based on quick template Id and require open access 2`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={
      Array [
        "a.txt",
        "b.txt",
      ]
    }
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
  <Alert
    allowDismiss={false}
    dismissTitle="Click to dismiss this alert"
    message="Successfully added 2 file(s) to upload queue."
    showLoader={false}
    title="Success"
    type="done"
  />
  <div
    style={
      Object {
        "flexGrow": 1,
        "padding": 8,
      }
    }
  >
    <WithStyles(Grid)
      container={true}
      display="column"
      spacing={16}
    >
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadRowHeader)
          onDeleteAll={[Function]}
          requireOpenAccessStatus={false}
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithTheme(WithWidth(FileUploadRow))
          defaultAccessCondition={3}
          fileSizeUnit="K"
          focusOnIndex={0}
          index={0}
          key="a.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "access_condition_id": 3,
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "a.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "a.txt",
              "size": 0,
            }
          }
        />
        <WithTheme(WithWidth(FileUploadRow))
          defaultAccessCondition={3}
          fileSizeUnit="K"
          focusOnIndex={0}
          index={1}
          key="b.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "access_condition_id": 3,
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "b.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "b.txt",
              "size": 0,
            }
          }
        />
      </WithStyles(Grid)>
    </WithStyles(Grid)>
  </div>
</React.Fragment>
`;

exports[`Component FileUploader should render rows for uploaded files with access required 1`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={Array []}
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
</React.Fragment>
`;

exports[`Component FileUploader should render rows for uploaded files with access required 2`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={
      Array [
        "a.txt",
        "b.txt",
      ]
    }
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
  <Alert
    allowDismiss={false}
    dismissTitle="Click to dismiss this alert"
    message="Successfully added 2 file(s) to upload queue."
    showLoader={false}
    title="Success"
    type="done"
  />
  <div
    style={
      Object {
        "flexGrow": 1,
        "padding": 8,
      }
    }
  >
    <WithStyles(Grid)
      container={true}
      display="column"
      spacing={16}
    >
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadRowHeader)
          onDeleteAll={[Function]}
          requireOpenAccessStatus={true}
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={0}
          key="a.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={true}
          uploadedFile={
            Object {
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "a.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "a.txt",
              "size": 0,
            }
          }
        />
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={1}
          key="b.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={true}
          uploadedFile={
            Object {
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "b.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "b.txt",
              "size": 0,
            }
          }
        />
      </WithStyles(Grid)>
    </WithStyles(Grid)>
  </div>
</React.Fragment>
`;

exports[`Component FileUploader should render rows for uploaded files with access required 3`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={
      Array [
        "a.txt",
        "b.txt",
      ]
    }
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
  <Alert
    allowDismiss={false}
    dismissTitle="Click to dismiss this alert"
    message="Successfully added 2 file(s) to upload queue."
    showLoader={false}
    title="Success"
    type="done"
  />
  <div
    style={
      Object {
        "flexGrow": 1,
        "padding": 8,
      }
    }
  >
    <WithStyles(Grid)
      container={true}
      display="column"
      spacing={16}
    >
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadRowHeader)
          onDeleteAll={[Function]}
          requireOpenAccessStatus={true}
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={0}
          key="a.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={true}
          uploadedFile={
            Object {
              "access_condition_id": 8,
              "date": null,
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "a.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "a.txt",
              "size": 0,
            }
          }
        />
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={1}
          key="b.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={true}
          uploadedFile={
            Object {
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "b.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "b.txt",
              "size": 0,
            }
          }
        />
      </WithStyles(Grid)>
    </WithStyles(Grid)>
  </div>
</React.Fragment>
`;

exports[`Component FileUploader should render rows for uploaded files with access required 4`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={
      Array [
        "a.txt",
        "b.txt",
      ]
    }
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
  <Alert
    allowDismiss={false}
    dismissTitle="Click to dismiss this alert"
    message="Successfully added 2 file(s) to upload queue."
    showLoader={false}
    title="Success"
    type="done"
  />
  <div
    style={
      Object {
        "flexGrow": 1,
        "padding": 8,
      }
    }
  >
    <WithStyles(Grid)
      container={true}
      display="column"
      spacing={16}
    >
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadRowHeader)
          onDeleteAll={[Function]}
          requireOpenAccessStatus={true}
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={0}
          key="a.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={true}
          uploadedFile={
            Object {
              "access_condition_id": 9,
              "date": "2020-01-01T10:00:00-00:15",
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "a.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "a.txt",
              "size": 0,
            }
          }
        />
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={1}
          key="b.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={true}
          uploadedFile={
            Object {
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "b.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "b.txt",
              "size": 0,
            }
          }
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadTermsAndConditions)
          accessTermsAndConditions="I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators."
          isTermsAndConditionsAccepted={false}
          onAcceptTermsAndConditions={[Function]}
        />
      </WithStyles(Grid)>
    </WithStyles(Grid)>
  </div>
</React.Fragment>
`;

exports[`Component FileUploader should render rows for uploaded files with access required 5`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={
      Array [
        "a.txt",
        "b.txt",
      ]
    }
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
  <Alert
    allowDismiss={false}
    dismissTitle="Click to dismiss this alert"
    message="Successfully added 2 file(s) to upload queue."
    showLoader={false}
    title="Success"
    type="done"
  />
  <div
    style={
      Object {
        "flexGrow": 1,
        "padding": 8,
      }
    }
  >
    <WithStyles(Grid)
      container={true}
      display="column"
      spacing={16}
    >
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadRowHeader)
          onDeleteAll={[Function]}
          requireOpenAccessStatus={true}
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={0}
          key="a.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={true}
          uploadedFile={
            Object {
              "access_condition_id": 9,
              "date": "2017-10-10T00:00:00-00:15",
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "a.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "a.txt",
              "size": 0,
            }
          }
        />
        <WithTheme(WithWidth(FileUploadRow))
          fileSizeUnit="K"
          focusOnIndex={0}
          index={1}
          key="b.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={true}
          uploadedFile={
            Object {
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "b.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "b.txt",
              "size": 0,
            }
          }
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadTermsAndConditions)
          accessTermsAndConditions="I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators."
          isTermsAndConditionsAccepted={false}
          onAcceptTermsAndConditions={[Function]}
        />
      </WithStyles(Grid)>
    </WithStyles(Grid)>
  </div>
</React.Fragment>
`;

exports[`Component FileUploader should render rows for uploaded files with default access condition based on quick template Id 1`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={Array []}
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
</React.Fragment>
`;

exports[`Component FileUploader should render rows for uploaded files with default access condition based on quick template Id 2`] = `
<React.Fragment>
  <WithStyles(Typography)
    gutterBottom={true}
    variant="body1"
  >
    You may add up to 5 files (max 1KB each)
  </WithStyles(Typography)>
  <FileUploadDropzone
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[a-z\\\\d\\\\-_\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\|\\\\d\\)\\)\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    fileUploadLimit={5}
    filesInQueue={
      Array [
        "a.txt",
        "b.txt",
      ]
    }
    locale={
      Object {
        "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": <p>
          Click here to select files, or drag files into this area to upload
        </p>,
        "fileUploadRestrictionHeading": "File upload restrictions",
        "fileUploadRestrictions": <div>
          Please ensure your files:
          <ul>
            <li>
              begin with a letter and are less than 45 characters long
            </li>
            <li>
              contain only upper and lowercase alphanumeric characters, and underscores
            </li>
            <li>
              have only a single period which precedes the file extension: “.pdf”
            </li>
            <li>
              are uploaded individually and not inside a folder
            </li>
          </ul>
        </div>,
        "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
          "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
          "notFiles": "Invalid files ([fileNames])",
          "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
          "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
        },
      }
    }
    maxSize={1000}
    onDrop={[Function]}
  />
  <Alert
    allowDismiss={false}
    dismissTitle="Click to dismiss this alert"
    message="Successfully added 2 file(s) to upload queue."
    showLoader={false}
    title="Success"
    type="done"
  />
  <div
    style={
      Object {
        "flexGrow": 1,
        "padding": 8,
      }
    }
  >
    <WithStyles(Grid)
      container={true}
      display="column"
      spacing={16}
    >
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithStyles(FileUploadRowHeader)
          onDeleteAll={[Function]}
          requireOpenAccessStatus={false}
        />
      </WithStyles(Grid)>
      <WithStyles(Grid)
        item={true}
        xs={12}
      >
        <WithTheme(WithWidth(FileUploadRow))
          defaultAccessCondition={3}
          fileSizeUnit="K"
          focusOnIndex={0}
          index={0}
          key="a.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "access_condition_id": 3,
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "a.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "a.txt",
              "size": 0,
            }
          }
        />
        <WithTheme(WithWidth(FileUploadRow))
          defaultAccessCondition={3}
          fileSizeUnit="K"
          focusOnIndex={0}
          index={1}
          key="b.txt"
          onAccessConditionChange={[Function]}
          onDelete={[Function]}
          onEmbargoDateChange={[Function]}
          requireOpenAccessStatus={false}
          uploadedFile={
            Object {
              "access_condition_id": 3,
              "fileData": File {
                Symbol(impl): FileImpl {
                  "_buffer": Object {
                    "data": Array [],
                    "type": "Buffer",
                  },
                  "lastModified": 12345678912,
                  "name": "b.txt",
                  "type": "",
                  Symbol(wrapper): [Circular],
                },
              },
              "name": "b.txt",
              "size": 0,
            }
          }
        />
      </WithStyles(Grid)>
    </WithStyles(Grid)>
  </div>
</React.Fragment>
`;
