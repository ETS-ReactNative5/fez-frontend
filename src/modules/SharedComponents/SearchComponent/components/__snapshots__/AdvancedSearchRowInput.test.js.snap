// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AdvancedSearchRowInput should call onChange from input props for AuthorIdLookup for non-numeric value 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Immutable.Map {},
            },
          ],
        },
        "subscribe": [MockFunction],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Immutable.Map {},
              },
            ],
          },
          "subscribe": [MockFunction],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <Connect(Component)
    allowFreeText={true}
    authorIdFieldId="rek-author-id"
    error={true}
    errorText="This field is required"
    hideLabel={true}
    onChange={[Function]}
    value={
      Object {
        "id": null,
        "value": undefined,
      }
    }
  />
</ContextProvider>
`;

exports[`AdvancedSearchRowInput should call onChange from input props for AuthorIdLookup for non-numeric value 2`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Immutable.Map {},
            },
          ],
        },
        "subscribe": [MockFunction],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Immutable.Map {},
              },
            ],
          },
          "subscribe": [MockFunction],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <Connect(Component)
    allowFreeText={true}
    authorIdFieldId="rek-author-id"
    error={true}
    errorText="This field is required"
    hideLabel={true}
    onChange={[Function]}
    value={
      Object {
        "id": null,
        "value": undefined,
      }
    }
  />
</ContextProvider>
`;

exports[`AdvancedSearchRowInput should call onChange from input props for AuthorIdLookup for numeric value 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Immutable.Map {},
            },
          ],
        },
        "subscribe": [MockFunction],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Immutable.Map {},
              },
            ],
          },
          "subscribe": [MockFunction],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <Connect(Component)
    allowFreeText={true}
    authorIdFieldId="rek-author-id"
    error={true}
    errorText="This field is required"
    hideLabel={true}
    onChange={[Function]}
    value={
      Object {
        "id": null,
        "value": undefined,
      }
    }
  />
</ContextProvider>
`;

exports[`AdvancedSearchRowInput should call onChange from input props for AuthorIdLookup for numeric value 2`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Immutable.Map {},
            },
          ],
        },
        "subscribe": [MockFunction],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Immutable.Map {},
              },
            ],
          },
          "subscribe": [MockFunction],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <Connect(Component)
    allowFreeText={true}
    authorIdFieldId="rek-author-id"
    error={true}
    errorText="This field is required"
    hideLabel={true}
    onChange={[Function]}
    value={
      Object {
        "id": null,
        "value": undefined,
      }
    }
  />
</ContextProvider>
`;

exports[`AdvancedSearchRowInput should call onChange from input props for CollectionsLookup field 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Immutable.Map {},
            },
          ],
        },
        "subscribe": [MockFunction],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Immutable.Map {},
              },
            ],
          },
          "subscribe": [MockFunction],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <Connect(Component)
    disableClearable={true}
    error={false}
    onChange={[MockFunction]}
    selectedValue={Array []}
    style={
      Object {
        "marginTop": 0,
      }
    }
  />
</ContextProvider>
`;

exports[`AdvancedSearchRowInput should call onChange from input props for CollectionsLookup field 2`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Immutable.Map {},
            },
          ],
        },
        "subscribe": [MockFunction],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Immutable.Map {},
              },
            ],
          },
          "subscribe": [MockFunction],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <Connect(Component)
    disableClearable={true}
    error={false}
    onChange={
      [MockFunction] {
        "calls": Array [
          Array [
            "Test Value",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    selectedValue={Array []}
    style={
      Object {
        "marginTop": 0,
      }
    }
  />
</ContextProvider>
`;

exports[`AdvancedSearchRowInput should call onChange from input props for OrgUnitLookup field 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Immutable.Map {},
            },
          ],
        },
        "subscribe": [MockFunction],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Immutable.Map {},
              },
            ],
          },
          "subscribe": [MockFunction],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <Connect(Component)
    allowFreeText={true}
    error={true}
    errorText="This field is required"
    hideLabel={true}
    onChange={[Function]}
    value={null}
  />
</ContextProvider>
`;

exports[`AdvancedSearchRowInput should call onChange from input props for OrgUnitLookup field 2`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Immutable.Map {},
            },
          ],
        },
        "subscribe": [MockFunction],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Immutable.Map {},
              },
            ],
          },
          "subscribe": [MockFunction],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <Connect(Component)
    allowFreeText={true}
    error={true}
    errorText="This field is required"
    hideLabel={true}
    onChange={[Function]}
    value={null}
  />
</ContextProvider>
`;

exports[`AdvancedSearchRowInput should call onChange from input props for StatusLookup field 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Immutable.Map {},
            },
          ],
        },
        "subscribe": [MockFunction],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Immutable.Map {},
              },
            ],
          },
          "subscribe": [MockFunction],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <Connect(GenericSelectField)
    autoWidth={false}
    displayEmpty={false}
    error={true}
    errorText="This field is required"
    hideLabel={true}
    onChange={[Function]}
    selectedValue={null}
    style={
      Object {
        "marginTop": 0,
      }
    }
  />
</ContextProvider>
`;

exports[`AdvancedSearchRowInput should call onChange from input props for StatusLookup field 2`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Immutable.Map {},
            },
          ],
        },
        "subscribe": [MockFunction],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Immutable.Map {},
              },
            ],
          },
          "subscribe": [MockFunction],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <Connect(GenericSelectField)
    autoWidth={false}
    displayEmpty={false}
    error={true}
    errorText="This field is required"
    hideLabel={true}
    onChange={[Function]}
    selectedValue={null}
    style={
      Object {
        "marginTop": 0,
      }
    }
  />
</ContextProvider>
`;

exports[`AdvancedSearchRowInput should call onChange from input props for TextField 1`] = `
<Fragment>
  <WithStyles(ForwardRef(TextField))
    InputLabelProps={
      Object {
        "data-testid": "text-field-label",
        "hidden": true,
        "htmlFor": "text-field-input",
        "id": "text-field-label",
        "shrink": undefined,
      }
    }
    autoComplete="search"
    error={true}
    helperText="This field is required"
    id="text-field"
    inputProps={
      Object {
        "aria-label": undefined,
        "aria-labelledby": "text-field-label",
        "data-testid": "text-field-input",
        "id": "text-field-input",
        "label": undefined,
      }
    }
    onChange={[Function]}
  />
</Fragment>
`;

exports[`AdvancedSearchRowInput should call onChange from input props for TextField 2`] = `
<Fragment>
  <WithStyles(ForwardRef(TextField))
    InputLabelProps={
      Object {
        "data-testid": "text-field-label",
        "hidden": true,
        "htmlFor": "text-field-input",
        "id": "text-field-label",
        "shrink": undefined,
      }
    }
    autoComplete="search"
    error={true}
    helperText="This field is required"
    id="text-field"
    inputProps={
      Object {
        "aria-label": undefined,
        "aria-labelledby": "text-field-label",
        "data-testid": "text-field-input",
        "id": "text-field-input",
        "label": undefined,
      }
    }
    onChange={[Function]}
  />
</Fragment>
`;

exports[`AdvancedSearchRowInput should call onChange from input props from ThesisTypeLookup field 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Immutable.Map {},
            },
          ],
        },
        "subscribe": [MockFunction],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Immutable.Map {},
              },
            ],
          },
          "subscribe": [MockFunction],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <Connect(GenericSelectField)
    autoWidth={false}
    displayEmpty={true}
    error={false}
    hideLabel={true}
    onChange={[Function]}
    selectedValue={Array []}
    style={
      Object {
        "marginTop": 0,
      }
    }
  />
</ContextProvider>
`;

exports[`AdvancedSearchRowInput should call onChange from input props from ThesisTypeLookup field 2`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Immutable.Map {},
            },
          ],
        },
        "subscribe": [MockFunction],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Immutable.Map {},
              },
            ],
          },
          "subscribe": [MockFunction],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <Connect(GenericSelectField)
    autoWidth={false}
    displayEmpty={true}
    error={false}
    hideLabel={true}
    onChange={[Function]}
    selectedValue={Array []}
    style={
      Object {
        "marginTop": 0,
      }
    }
  />
</ContextProvider>
`;
