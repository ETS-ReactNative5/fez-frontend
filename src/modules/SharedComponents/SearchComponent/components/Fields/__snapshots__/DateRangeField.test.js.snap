// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DateRangeField component should render default view 1`] = `
<Fragment>
  <WithStyles(ForwardRef(Grid))
    container={true}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <WithStyles(ForwardRef(InputLabel))
        className="makeStyles-title-1"
        shrink={true}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
  <WithStyles(ForwardRef(Grid))
    container={true}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      style={
        Object {
          "flexGrow": 1,
          "width": 1,
        }
      }
      zeroMinWidth={true}
    >
      <PickerWithState
        allowKeyboardControl={true}
        autoOk={true}
        disableFuture={false}
        disableToolbar={true}
        disabled={false}
        error={false}
        format="DD/MM/YYYY"
        id="undefined-from-date"
        invalidDateMessage="Invalid Date Format"
        maxDate={2100-01-01T00:00:00.000Z}
        maxDateMessage="Date should not be after maximal date"
        minDate={1900-01-01T00:00:00.000Z}
        minDateMessage="Date should not be before minimal date"
        onChange={[Function]}
        openTo="date"
        value={null}
        variant="inline"
        views={
          Array [
            "year",
            "date",
          ]
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs="auto"
    >
      <WithStyles(ForwardRef(TextField))
        InputProps={
          Object {
            "disableUnderline": true,
          }
        }
        disabled={true}
        style={
          Object {
            "width": 24,
          }
        }
        value=" to "
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      style={
        Object {
          "flexGrow": 1,
          "width": 1,
        }
      }
      zeroMinWidth={true}
    >
      <PickerWithState
        allowKeyboardControl={true}
        autoOk={true}
        disableFuture={false}
        disableToolbar={true}
        disabled={false}
        error={false}
        format="DD/MM/YYYY"
        id="undefined-to-date"
        invalidDateMessage="Invalid Date Format"
        maxDate={2100-01-01T00:00:00.000Z}
        maxDateMessage="Date should not be after maximal date"
        minDate={1900-01-01T00:00:00.000Z}
        minDateMessage="Date should not be before minimal date"
        onChange={[Function]}
        openTo="date"
        value={null}
        variant="inline"
        views={
          Array [
            "year",
            "date",
          ]
        }
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</Fragment>
`;

exports[`DateRangeField component should render disabled view 1`] = `
<Fragment>
  <WithStyles(ForwardRef(Grid))
    container={true}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <WithStyles(ForwardRef(InputLabel))
        className="makeStyles-title-1"
        shrink={true}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
  <WithStyles(ForwardRef(Grid))
    container={true}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      style={
        Object {
          "flexGrow": 1,
          "width": 1,
        }
      }
      zeroMinWidth={true}
    >
      <PickerWithState
        allowKeyboardControl={true}
        autoOk={true}
        disableFuture={false}
        disableToolbar={true}
        disabled={true}
        error={false}
        format="DD/MM/YYYY"
        id="undefined-from-date"
        invalidDateMessage="Invalid Date Format"
        maxDate={2100-01-01T00:00:00.000Z}
        maxDateMessage="Date should not be after maximal date"
        minDate={1900-01-01T00:00:00.000Z}
        minDateMessage="Date should not be before minimal date"
        onChange={[Function]}
        openTo="date"
        value={null}
        variant="inline"
        views={
          Array [
            "year",
            "date",
          ]
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs="auto"
    >
      <WithStyles(ForwardRef(TextField))
        InputProps={
          Object {
            "disableUnderline": true,
          }
        }
        disabled={true}
        style={
          Object {
            "width": 24,
          }
        }
        value=" to "
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      style={
        Object {
          "flexGrow": 1,
          "width": 1,
        }
      }
      zeroMinWidth={true}
    >
      <PickerWithState
        allowKeyboardControl={true}
        autoOk={true}
        disableFuture={false}
        disableToolbar={true}
        disabled={true}
        error={false}
        format="DD/MM/YYYY"
        id="undefined-to-date"
        invalidDateMessage="Invalid Date Format"
        maxDate={2100-01-01T00:00:00.000Z}
        maxDateMessage="Date should not be after maximal date"
        minDate={1900-01-01T00:00:00.000Z}
        minDateMessage="Date should not be before minimal date"
        onChange={[Function]}
        openTo="date"
        value={null}
        variant="inline"
        views={
          Array [
            "year",
            "date",
          ]
        }
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</Fragment>
`;

exports[`DateRangeField component should render with future disabled 1`] = `
<Fragment>
  <WithStyles(ForwardRef(Grid))
    container={true}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <WithStyles(ForwardRef(InputLabel))
        className="makeStyles-title-1"
        shrink={true}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
  <WithStyles(ForwardRef(Grid))
    container={true}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      style={
        Object {
          "flexGrow": 1,
          "width": 1,
        }
      }
      zeroMinWidth={true}
    >
      <PickerWithState
        allowKeyboardControl={true}
        autoOk={true}
        disableFuture={true}
        disableToolbar={true}
        disabled={false}
        error={false}
        format="DD/MM/YYYY"
        id="undefined-from-date"
        invalidDateMessage="Invalid Date Format"
        maxDate={2100-01-01T00:00:00.000Z}
        maxDateMessage="Date should not be after maximal date"
        minDate={1900-01-01T00:00:00.000Z}
        minDateMessage="Date should not be before minimal date"
        onChange={[Function]}
        openTo="date"
        value={null}
        variant="inline"
        views={
          Array [
            "year",
            "date",
          ]
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs="auto"
    >
      <WithStyles(ForwardRef(TextField))
        InputProps={
          Object {
            "disableUnderline": true,
          }
        }
        disabled={true}
        style={
          Object {
            "width": 24,
          }
        }
        value=" to "
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      style={
        Object {
          "flexGrow": 1,
          "width": 1,
        }
      }
      zeroMinWidth={true}
    >
      <PickerWithState
        allowKeyboardControl={true}
        autoOk={true}
        disableFuture={true}
        disableToolbar={true}
        disabled={false}
        error={false}
        format="DD/MM/YYYY"
        id="undefined-to-date"
        invalidDateMessage="Invalid Date Format"
        maxDate={2100-01-01T00:00:00.000Z}
        maxDateMessage="Date should not be after maximal date"
        minDate={1900-01-01T00:00:00.000Z}
        minDateMessage="Date should not be before minimal date"
        onChange={[Function]}
        openTo="date"
        value={null}
        variant="inline"
        views={
          Array [
            "year",
            "date",
          ]
        }
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</Fragment>
`;

exports[`DateRangeField component should update on receiving new state 1`] = `
<Fragment>
  <WithStyles(ForwardRef(Grid))
    container={true}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <WithStyles(ForwardRef(InputLabel))
        className="makeStyles-title-1"
        shrink={true}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
  <WithStyles(ForwardRef(Grid))
    container={true}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      style={
        Object {
          "flexGrow": 1,
          "width": 1,
        }
      }
      zeroMinWidth={true}
    >
      <PickerWithState
        allowKeyboardControl={true}
        autoOk={true}
        disableFuture={false}
        disableToolbar={true}
        disabled={false}
        error={false}
        format="DD/MM/YYYY"
        id="undefined-from-date"
        invalidDateMessage="Invalid Date Format"
        maxDate={2100-01-01T00:00:00.000Z}
        maxDateMessage="Date should not be after maximal date"
        minDate={1900-01-01T00:00:00.000Z}
        minDateMessage="Date should not be before minimal date"
        onChange={[Function]}
        openTo="date"
        value={null}
        variant="inline"
        views={
          Array [
            "year",
            "date",
          ]
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs="auto"
    >
      <WithStyles(ForwardRef(TextField))
        InputProps={
          Object {
            "disableUnderline": true,
          }
        }
        disabled={true}
        style={
          Object {
            "width": 24,
          }
        }
        value=" to "
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      style={
        Object {
          "flexGrow": 1,
          "width": 1,
        }
      }
      zeroMinWidth={true}
    >
      <PickerWithState
        allowKeyboardControl={true}
        autoOk={true}
        disableFuture={false}
        disableToolbar={true}
        disabled={false}
        error={false}
        format="DD/MM/YYYY"
        id="undefined-to-date"
        invalidDateMessage="Invalid Date Format"
        maxDate={2100-01-01T00:00:00.000Z}
        maxDateMessage="Date should not be after maximal date"
        minDate={1900-01-01T00:00:00.000Z}
        minDateMessage="Date should not be before minimal date"
        onChange={[Function]}
        openTo="date"
        value={null}
        variant="inline"
        views={
          Array [
            "year",
            "date",
          ]
        }
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</Fragment>
`;

exports[`DateRangeField component should update on receiving new state 2`] = `
<Fragment>
  <WithStyles(ForwardRef(Grid))
    container={true}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <WithStyles(ForwardRef(InputLabel))
        shrink={true}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
  <WithStyles(ForwardRef(Grid))
    container={true}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      style={
        Object {
          "flexGrow": 1,
          "width": 1,
        }
      }
      zeroMinWidth={true}
    >
      <DatePickerField
        disableFuture={false}
        errorText=""
        format="DD/MM/YYYY"
        onChange={[Function]}
        value="01/01/1970"
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs="auto"
    >
      <WithStyles(ForwardRef(TextField))
        InputProps={
          Object {
            "disableUnderline": true,
          }
        }
        disabled={true}
        style={
          Object {
            "width": 24,
          }
        }
        value=" to "
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      style={
        Object {
          "flexGrow": 1,
          "width": 1,
        }
      }
      zeroMinWidth={true}
    >
      <DatePickerField
        disableFuture={false}
        error={false}
        errorText=""
        format="DD/MM/YYYY"
        onChange={[Function]}
        value="01/01/1980"
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</Fragment>
`;
