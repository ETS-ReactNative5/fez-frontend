// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AuthorLinking should call componentDidMount life cycle method 1`] = `
<div>
  <WithStyles(ForwardRef(Grid))
    container={true}
  >
    <WithStyles(ForwardRef(Grid))
      className="infiniteContainer"
      item={true}
    >
      <Infinite
        className=""
        containerHeight={250}
        displayBottomUpwards={false}
        elementHeight={50}
        handleScroll={[Function]}
        infiniteLoadBeginEdgeOffset={50}
        isInfiniteLoading={false}
        loadingSpinnerDelegate={<div />}
        onInfiniteLoad={[Function]}
        styles={Object {}}
        timeScrollStateLastsForAfterUserScrolls={150}
        useWindowAsScrollContainer={false}
      >
        <WithStyles(ForwardRef(Grid))
          container={true}
          key="0"
        >
          <WithStyles(AuthorItem)
            author={
              Object {
                "rek_author": "Overgaard, Nana H.",
                "rek_author_id": null,
                "rek_author_order": 1,
                "rek_author_pid": "UQ:111111",
              }
            }
            disabled={false}
            index={0}
            key="0"
            linked={false}
            onAuthorSelected={[Function]}
            selected={null}
            type="author"
          />
          <WithStyles(AuthorItem)
            author={
              Object {
                "rek_author": "Cruz, Jazmina L.",
                "rek_author_id": null,
                "rek_author_order": 2,
                "rek_author_pid": "UQ:111111",
              }
            }
            disabled={false}
            index={1}
            key="1"
            linked={false}
            onAuthorSelected={[Function]}
            selected={null}
            type="author"
          />
        </WithStyles(ForwardRef(Grid))>
      </Infinite>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`AuthorLinking should call componentDidMount life cycle method with authorList only 1`] = `
<div>
  <WithStyles(ForwardRef(Grid))
    container={true}
  >
    <WithStyles(ForwardRef(Grid))
      className="infiniteContainer"
      item={true}
    >
      <Infinite
        className=""
        containerHeight={250}
        displayBottomUpwards={false}
        elementHeight={50}
        handleScroll={[Function]}
        infiniteLoadBeginEdgeOffset={50}
        isInfiniteLoading={false}
        loadingSpinnerDelegate={<div />}
        onInfiniteLoad={[Function]}
        styles={Object {}}
        timeScrollStateLastsForAfterUserScrolls={150}
        useWindowAsScrollContainer={false}
      >
        <WithStyles(ForwardRef(Grid))
          container={true}
          key="0"
        >
          <WithStyles(AuthorItem)
            author={
              Object {
                "rek_author": "Overgaard, Nana H.",
                "rek_author_id": null,
                "rek_author_order": 1,
                "rek_author_pid": "UQ:111111",
              }
            }
            disabled={false}
            index={0}
            key="0"
            linked={false}
            onAuthorSelected={[Function]}
            selected={null}
            type="author"
          />
          <WithStyles(AuthorItem)
            author={
              Object {
                "rek_author": "Cruz, Jazmina L.",
                "rek_author_id": null,
                "rek_author_order": 2,
                "rek_author_pid": "UQ:111111",
              }
            }
            disabled={false}
            index={1}
            key="1"
            linked={false}
            onAuthorSelected={[Function]}
            selected={null}
            type="author"
          />
        </WithStyles(ForwardRef(Grid))>
      </Infinite>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`AuthorLinking should maintain question if onchange prop is missing 1`] = `
<div>
  <WithStyles(ForwardRef(Grid))
    container={true}
  >
    <WithStyles(ForwardRef(Grid))
      className="infiniteContainer"
      item={true}
    >
      <Infinite
        className=""
        containerHeight={250}
        displayBottomUpwards={false}
        elementHeight={50}
        handleScroll={[Function]}
        infiniteLoadBeginEdgeOffset={50}
        isInfiniteLoading={false}
        loadingSpinnerDelegate={<div />}
        onInfiniteLoad={[Function]}
        styles={Object {}}
        timeScrollStateLastsForAfterUserScrolls={150}
        useWindowAsScrollContainer={false}
      >
        <WithStyles(ForwardRef(Grid))
          container={true}
          key="0"
        >
          <WithStyles(AuthorItem)
            author={
              Object {
                "rek_author": "Overgaard, Nana H.",
                "rek_author_id": null,
                "rek_author_order": 1,
                "rek_author_pid": "UQ:111111",
              }
            }
            disabled={false}
            index={0}
            key="0"
            linked={false}
            onAuthorSelected={[Function]}
            selected={null}
            type="author"
          />
          <WithStyles(AuthorItem)
            author={
              Object {
                "rek_author": "Cruz, Jazmina L.",
                "rek_author_id": null,
                "rek_author_order": 2,
                "rek_author_pid": "UQ:111111",
              }
            }
            disabled={false}
            index={1}
            key="1"
            linked={false}
            onAuthorSelected={[Function]}
            selected={null}
            type="author"
          />
        </WithStyles(ForwardRef(Grid))>
      </Infinite>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`AuthorLinking should maintain question if onchange prop is missing 2`] = `
<div>
  <WithStyles(ForwardRef(Grid))
    container={true}
  >
    <WithStyles(ForwardRef(Grid))
      className="infiniteContainer"
      item={true}
    >
      <Infinite
        className=""
        containerHeight={250}
        displayBottomUpwards={false}
        elementHeight={50}
        handleScroll={[Function]}
        infiniteLoadBeginEdgeOffset={50}
        isInfiniteLoading={false}
        loadingSpinnerDelegate={<div />}
        onInfiniteLoad={[Function]}
        styles={Object {}}
        timeScrollStateLastsForAfterUserScrolls={150}
        useWindowAsScrollContainer={false}
      >
        <WithStyles(ForwardRef(Grid))
          container={true}
          key="0"
        >
          <WithStyles(AuthorItem)
            author={
              Object {
                "rek_author": "Overgaard, Nana H.",
                "rek_author_id": null,
                "rek_author_order": 1,
                "rek_author_pid": "UQ:111111",
              }
            }
            disabled={false}
            index={0}
            key="0"
            linked={false}
            onAuthorSelected={[Function]}
            selected={null}
            type="author"
          />
          <WithStyles(AuthorItem)
            author={
              Object {
                "rek_author": "Cruz, Jazmina L.",
                "rek_author_id": null,
                "rek_author_order": 2,
                "rek_author_pid": "UQ:111111",
              }
            }
            disabled={false}
            index={1}
            key="1"
            linked={false}
            onAuthorSelected={[Function]}
            selected={null}
            type="author"
          />
        </WithStyles(ForwardRef(Grid))>
      </Infinite>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
  <WithStyles(ForwardRef(FormControlLabel))
    classes={
      Object {
        "root": undefined,
      }
    }
    control={
      <WithStyles(ForwardRef(Checkbox))
        checked={false}
        classes={
          Object {
            "checked": undefined,
            "root": undefined,
          }
        }
        id="authorAcceptDeclaration"
        onChange={[Function]}
      />
    }
    disabled={false}
    label={
      <WithStyles(ForwardRef(Typography))
        classes={
          Object {
            "root": undefined,
          }
        }
        color="error"
      >
        I confirm and understand that I am claiming this work under the above name, and confirm this is me
      </WithStyles(ForwardRef(Typography))>
    }
  />
</div>
`;

exports[`AuthorLinking should render component if authorList has more authors than linkedAuthorIdList 1`] = `
<div>
  <WithStyles(ForwardRef(Grid))
    container={true}
  >
    <WithStyles(ForwardRef(Grid))
      className="infiniteContainer"
      item={true}
    >
      <Infinite
        className=""
        containerHeight={250}
        displayBottomUpwards={false}
        elementHeight={50}
        handleScroll={[Function]}
        infiniteLoadBeginEdgeOffset={50}
        isInfiniteLoading={false}
        loadingSpinnerDelegate={<div />}
        onInfiniteLoad={[Function]}
        styles={Object {}}
        timeScrollStateLastsForAfterUserScrolls={150}
        useWindowAsScrollContainer={false}
      >
        <WithStyles(ForwardRef(Grid))
          container={true}
          key="0"
        >
          <WithStyles(AuthorItem)
            author={
              Object {
                "rek_author": "Overgaard, Nana H.",
                "rek_author_id": null,
                "rek_author_order": 1,
                "rek_author_pid": "UQ:111111",
              }
            }
            disabled={false}
            index={0}
            key="0"
            linked={false}
            onAuthorSelected={[Function]}
            selected={null}
            type="author"
          />
          <WithStyles(AuthorItem)
            author={
              Object {
                "rek_author": "Cruz, Jazmina L.",
                "rek_author_id": null,
                "rek_author_order": 2,
                "rek_author_pid": "UQ:111111",
              }
            }
            disabled={false}
            index={1}
            key="1"
            linked={false}
            onAuthorSelected={[Function]}
            selected={null}
            type="author"
          />
        </WithStyles(ForwardRef(Grid))>
      </Infinite>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;
